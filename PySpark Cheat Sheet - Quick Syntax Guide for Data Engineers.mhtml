From: <Saved by Blink>
Snapshot-Content-Location: https://www.sparkplayground.com/pyspark-cheat-sheet
Subject: PySpark Cheat Sheet - Quick Syntax Guide for Data Engineers
Date: Sun, 20 Jul 2025 23:28:43 +0530
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----"


------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/html
Content-ID: <frame-C89C159098C304B16E1C713F68166E6A@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.sparkplayground.com/pyspark-cheat-sheet

<!DOCTYPE html><html lang=3D"en" data-theme=3D"nord" class=3D"__variable_e8=
ce0c"><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"><link rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-4e4910=
6d-bf45-4307-93bd-e278fa2dcf55@mhtml.blink" /><link rel=3D"stylesheet" type=
=3D"text/css" href=3D"cid:css-4f8a21ee-8dfa-44cc-983f-84dbf1589ac8@mhtml.bl=
ink" /><link rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-b9cd6c48-=
7491-4db0-8016-b1df1a84379e@mhtml.blink" /><link rel=3D"stylesheet" type=3D=
"text/css" href=3D"cid:css-227001bd-8eb8-4886-bd56-a9981d2fa21b@mhtml.blink=
" /><link rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-cf17e8b5-8a4=
f-4df9-9c68-47925a77c824@mhtml.blink" /><link rel=3D"stylesheet" type=3D"te=
xt/css" href=3D"cid:css-41e7adc3-dc79-4e6e-86e2-59930d6194d2@mhtml.blink" /=
><link rel=3D"preload" href=3D"https://www.sparkplayground.com/_next/static=
/media/b957ea75a84b6ea7-s.p.woff2" as=3D"font" crossorigin=3D"" type=3D"fon=
t/woff2"><link rel=3D"preload" href=3D"https://www.sparkplayground.com/_nex=
t/static/media/e4af272ccee01ff0-s.p.woff2" as=3D"font" crossorigin=3D"" typ=
e=3D"font/woff2"><link rel=3D"preload" href=3D"https://www.sparkplayground.=
com/_next/static/media/eafabf029ad39a43-s.p.woff2" as=3D"font" crossorigin=
=3D"" type=3D"font/woff2"><link rel=3D"preload" as=3D"image" imagesrcset=3D=
"/_next/image?url=3Dhttps%3A%2F%2Fimages.unsplash.com%2Fphoto-1534528741775=
-53994a69daeb%3Fixlib%3Drb-4.0.3%26ixid%3DM3wxMjA3fDB8MHxwaG90by1wYWdlfHx8f=
GVufDB8fHx8fA%253D%253D%26auto%3Dformat%26fit%3Dcrop%26w%3D3276%26q%3D80&am=
p;w=3D64&amp;q=3D75 1x, /_next/image?url=3Dhttps%3A%2F%2Fimages.unsplash.co=
m%2Fphoto-1534528741775-53994a69daeb%3Fixlib%3Drb-4.0.3%26ixid%3DM3wxMjA3fD=
B8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%253D%253D%26auto%3Dformat%26fit%3Dcrop=
%26w%3D3276%26q%3D80&amp;w=3D128&amp;q=3D75 2x" fetchpriority=3D"high"><lin=
k rel=3D"preload" as=3D"image" imagesrcset=3D"/_next/image?url=3Dhttps%3A%2=
F%2Fimages.unsplash.com%2Fphoto-1517841905240-472988babdf9%3Fixlib%3Drb-4.0=
.3%26ixid%3DM3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%253D%253D%26auto=
%3Dformat%26fit%3Dcrop%26w%3D774%26q%3D80&amp;w=3D64&amp;q=3D75 1x, /_next/=
image?url=3Dhttps%3A%2F%2Fimages.unsplash.com%2Fphoto-1517841905240-472988b=
abdf9%3Fixlib%3Drb-4.0.3%26ixid%3DM3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8f=
Hx8fA%253D%253D%26auto%3Dformat%26fit%3Dcrop%26w%3D774%26q%3D80&amp;w=3D128=
&amp;q=3D75 2x" fetchpriority=3D"high"><link rel=3D"preload" as=3D"image" i=
magesrcset=3D"/_next/image?url=3Dhttps%3A%2F%2Fimages.unsplash.com%2Fphoto-=
1539571696357-5a69c17a67c6%3Fixlib%3Drb-4.0.3%26ixid%3DM3wxMjA3fDB8MHxwaG90=
by1wYWdlfHx8fGVufDB8fHx8fA%253D%253D%26auto%3Dformat%26fit%3Dcrop%26w%3D774=
%26q%3D80&amp;w=3D64&amp;q=3D75 1x, /_next/image?url=3Dhttps%3A%2F%2Fimages=
.unsplash.com%2Fphoto-1539571696357-5a69c17a67c6%3Fixlib%3Drb-4.0.3%26ixid%=
3DM3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%253D%253D%26auto%3Dformat%=
26fit%3Dcrop%26w%3D774%26q%3D80&amp;w=3D128&amp;q=3D75 2x" fetchpriority=3D=
"high"><link rel=3D"preload" as=3D"image" imagesrcset=3D"/_next/image?url=
=3Dhttps%3A%2F%2Fimages.unsplash.com%2Fphoto-1507003211169-0a1dd7228f2d%3Fi=
xlib%3Drb-4.0.3%26ixid%3DM3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%253=
D%253D%26auto%3Dformat%26fit%3Dcrop%26w%3D774%26q%3D80&amp;w=3D64&amp;q=3D7=
5 1x, /_next/image?url=3Dhttps%3A%2F%2Fimages.unsplash.com%2Fphoto-15070032=
11169-0a1dd7228f2d%3Fixlib%3Drb-4.0.3%26ixid%3DM3wxMjA3fDB8MHxwaG90by1wYWdl=
fHx8fGVufDB8fHx8fA%253D%253D%26auto%3Dformat%26fit%3Dcrop%26w%3D774%26q%3D8=
0&amp;w=3D128&amp;q=3D75 2x" fetchpriority=3D"high"><link rel=3D"preload" a=
s=3D"image" imagesrcset=3D"/_next/image?url=3D%2Fusers%2Fajul.png&amp;w=3D6=
4&amp;q=3D75 1x, /_next/image?url=3D%2Fusers%2Fajul.png&amp;w=3D128&amp;q=
=3D75 2x" fetchpriority=3D"high"><link rel=3D"preload" as=3D"image" imagesr=
cset=3D"/_next/image?url=3D%2F_next%2Fstatic%2Fmedia%2Ficon.8e0bf7a0.png&am=
p;w=3D32&amp;q=3D75 1x, /_next/image?url=3D%2F_next%2Fstatic%2Fmedia%2Ficon=
.8e0bf7a0.png&amp;w=3D48&amp;q=3D75 2x" fetchpriority=3D"high"><link rel=3D=
"stylesheet" href=3D"https://www.sparkplayground.com/_next/static/css/971a3=
cbfea2853a6.css" data-precedence=3D"next"><link rel=3D"stylesheet" href=3D"=
https://www.sparkplayground.com/_next/static/css/a8f02d7a58da2449.css" data=
-precedence=3D"next"><link rel=3D"stylesheet" href=3D"https://www.sparkplay=
ground.com/_next/static/css/6b786b77af9d8e90.css" data-precedence=3D"next">=
<link rel=3D"preload" as=3D"script" fetchpriority=3D"low" href=3D"https://w=
ww.sparkplayground.com/_next/static/chunks/webpack-2b40fb1ed9ffdadb.js"><li=
nk rel=3D"preload" href=3D"https://pagead2.googlesyndication.com/pagead/js/=
adsbygoogle.js?client=3Dca-pub-3690357492073975" as=3D"script" crossorigin=
=3D""><link rel=3D"preload" href=3D"https://www.googletagmanager.com/gtag/j=
s?id=3DAW-16685153175" as=3D"script"><meta http-equiv=3D"origin-trial" cont=
ent=3D"AlK2UR5SkAlj8jjdEc9p3F3xuFYlF6LYjAML3EOqw1g26eCwWPjdmecULvBH5MVPoqKY=
rOfPhYVL71xAXI1IBQoAAAB8eyJvcmlnaW4iOiJodHRwczovL2RvdWJsZWNsaWNrLm5ldDo0NDM=
iLCJmZWF0dXJlIjoiV2ViVmlld1hSZXF1ZXN0ZWRXaXRoRGVwcmVjYXRpb24iLCJleHBpcnkiOj=
E3NTgwNjcxOTksImlzU3ViZG9tYWluIjp0cnVlfQ=3D=3D"><meta http-equiv=3D"origin-=
trial" content=3D"Amm8/NmvvQfhwCib6I7ZsmUxiSCfOxWxHayJwyU1r3gRIItzr7bNQid6O=
8ZYaE1GSQTa69WwhPC9flq/oYkRBwsAAACCeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXN5bmRp=
Y2F0aW9uLmNvbTo0NDMiLCJmZWF0dXJlIjoiV2ViVmlld1hSZXF1ZXN0ZWRXaXRoRGVwcmVjYXR=
pb24iLCJleHBpcnkiOjE3NTgwNjcxOTksImlzU3ViZG9tYWluIjp0cnVlfQ=3D=3D"><meta ht=
tp-equiv=3D"origin-trial" content=3D"A9wSqI5i0iwGdf6L1CERNdmsTPgVu44ewj8QxT=
BYgsv1LCPUVF7YmWOvTappqB1139jAymxUW/RO8zmMqo4zlAAAAACNeyJvcmlnaW4iOiJodHRwc=
zovL2RvdWJsZWNsaWNrLm5ldDo0NDMiLCJmZWF0dXJlIjoiRmxlZGdlQmlkZGluZ0FuZEF1Y3Rp=
b25TZXJ2ZXIiLCJleHBpcnkiOjE3MzY4MTI4MDAsImlzU3ViZG9tYWluIjp0cnVlLCJpc1RoaXJ=
kUGFydHkiOnRydWV9"><meta http-equiv=3D"origin-trial" content=3D"A+d7vJfYtay=
4OUbdtRPZA3y7bKQLsxaMEPmxgfhBGqKXNrdkCQeJlUwqa6EBbSfjwFtJWTrWIioXeMW+y8bWAg=
QAAACTeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXN5bmRpY2F0aW9uLmNvbTo0NDMiLCJmZWF0d=
XJlIjoiRmxlZGdlQmlkZGluZ0FuZEF1Y3Rpb25TZXJ2ZXIiLCJleHBpcnkiOjE3MzY4MTI4MDAs=
ImlzU3ViZG9tYWluIjp0cnVlLCJpc1RoaXJkUGFydHkiOnRydWV9"><link rel=3D"preload"=
 as=3D"image" fetchpriority=3D"high" imagesrcset=3D"/_next/image?url=3D%2F_=
next%2Fstatic%2Fmedia%2Ficon.8e0bf7a0.png&amp;w=3D32&amp;q=3D75 1x, /_next/=
image?url=3D%2F_next%2Fstatic%2Fmedia%2Ficon.8e0bf7a0.png&amp;w=3D64&amp;q=
=3D75 2x"><link rel=3D"stylesheet" type=3D"text/css" href=3D"https://cdn.pa=
ddle.com/paddle/v2/assets/css/paddle.css" media=3D"all"><link rel=3D"preloa=
d" as=3D"style" href=3D"https://www.sparkplayground.com/_next/static/css/6b=
786b77af9d8e90.css"><meta name=3D"viewport" content=3D"width=3Ddevice-width=
, initial-scale=3D1"><meta name=3D"theme-color" content=3D"#5E81AC"><title>=
PySpark Cheat Sheet - Quick Syntax Guide for Data Engineers</title><meta na=
me=3D"description" content=3D"Quick reference for essential PySpark functio=
ns with examples. Learn data transformations, string manipulation, and more=
 in the cheat sheet."><meta name=3D"application-name" content=3D"Spark Play=
ground"><meta name=3D"keywords" content=3D"Spark Playground"><meta name=3D"=
impact-site-verification" content=3D"a8d6651a-7154-4e28-aa0c-d78ea5ccd988">=
<link rel=3D"canonical" href=3D"https://www.sparkplayground.com/pyspark-che=
at-sheet"><meta property=3D"og:title" content=3D"Spark Playground"><meta pr=
operty=3D"og:description" content=3D"Platform to learn, practice, and solve=
 PySpark interview questions to land your next DE role."><meta property=3D"=
og:url" content=3D"https://sparkplayground.com"><meta property=3D"og:site_n=
ame" content=3D"Spark Playground"><meta property=3D"og:locale" content=3D"e=
n_US"><meta property=3D"og:image:type" content=3D"image/png"><meta property=
=3D"og:image:width" content=3D"1200"><meta property=3D"og:image:height" con=
tent=3D"630"><meta property=3D"og:image" content=3D"https://www.sparkplaygr=
ound.com/opengraph-image.png?d6406e9a3aa550ce"><meta property=3D"og:type" c=
ontent=3D"website"><meta name=3D"twitter:card" content=3D"summary_large_ima=
ge"><meta name=3D"twitter:creator" content=3D"@rizal_rovins"><meta name=3D"=
twitter:title" content=3D"Spark Playground"><meta name=3D"twitter:descripti=
on" content=3D"Platform to learn, practice, and solve PySpark interview que=
stions to land your next DE role."><meta name=3D"twitter:image:type" conten=
t=3D"image/png"><meta name=3D"twitter:image:width" content=3D"1200"><meta n=
ame=3D"twitter:image:height" content=3D"630"><meta name=3D"twitter:image" c=
ontent=3D"https://www.sparkplayground.com/twitter-image.png?d6406e9a3aa550c=
e"><link rel=3D"icon" href=3D"https://www.sparkplayground.com/favicon.ico" =
type=3D"image/x-icon" sizes=3D"48x48"><link rel=3D"icon" href=3D"https://ww=
w.sparkplayground.com/icon.png?8e0bf7a07d09542a" type=3D"image/png" sizes=
=3D"1200x1200"><link rel=3D"apple-touch-icon" href=3D"https://www.sparkplay=
ground.com/apple-icon.png?52e4779274dcf9c5" type=3D"image/png" sizes=3D"180=
x180"><meta name=3D"next-size-adjust"></head><body><header class=3D"bg-base=
-200 border-b border-base-300"><nav class=3D"container mx-auto max-w-screen=
-xl"><div class=3D"flex px-2 lg:px-4 items-center justify-between gap-6 lg:=
items-center lg:justify-center py-2.5"><div class=3D"flex flex-col items-st=
art whitespace-nowrap"><a title=3D"Spark Playground Home" class=3D"flex ite=
ms-center gap-2 hover:opacity-90 transition-opacity" href=3D"https://www.sp=
arkplayground.com/"><img alt=3D"Spark Playground logo" fetchpriority=3D"hig=
h" width=3D"32" height=3D"32" decoding=3D"async" data-nimg=3D"1" class=3D"w=
-8" src=3D"https://www.sparkplayground.com/_next/image?url=3D%2F_next%2Fsta=
tic%2Fmedia%2Ficon.8e0bf7a0.png&amp;w=3D64&amp;q=3D75" style=3D"color: tran=
sparent;"><span class=3D"font-extrabold text-lg">Spark Playground</span></a=
></div><div class=3D"flex items-center justify-between lg:hidden"><button t=
ype=3D"button" class=3D"-m-2.5 inline-flex items-center justify-center roun=
ded-md p-2.5"><span class=3D"sr-only">Open main menu</span><svg xmlns=3D"ht=
tp://www.w3.org/2000/svg" fill=3D"none" viewBox=3D"0 0 24 24" stroke-width=
=3D"1.5" stroke=3D"currentColor" class=3D"w-6 h-6 text-base-content"><path =
stroke-linecap=3D"round" stroke-linejoin=3D"round" d=3D"M3.75 6.75h16.5M3.7=
5 12h16.5m-16.5 5.25h16.5"></path></svg></button></div><div class=3D"hidden=
 lg:flex lg:items-center lg:justify-center lg:gap-6 flex-1"><a class=3D"px-=
2 py-2 rounded-lg hover:bg-base-300 hover:text-base-content transition-colo=
rs whitespace-nowrap" href=3D"https://www.sparkplayground.com/tutorials">Le=
arn PySpark</a><div class=3D"px-2 py-2 rounded-lg hover:bg-base-300 hover:t=
ext-base-content transition-colors "><div class=3D"relative z-20" data-head=
lessui-state=3D""><button class=3D"bg-transparent flex items-center outline=
-none focus:outline-none active:outline-none" type=3D"button" aria-expanded=
=3D"false" data-headlessui-state=3D"" id=3D"headlessui-popover-button-:r3:"=
><span class=3D"text-current whitespace-nowrap">Practice Interview Question=
s</span><svg xmlns=3D"http://www.w3.org/2000/svg" viewBox=3D"0 0 20 20" fil=
l=3D"currentColor" class=3D"size-6 w-5 h-5 transform transition-transform d=
uration-300 rotate-0"><path fill-rule=3D"evenodd" d=3D"M5.23 7.21a.75.75 0 =
011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1=
.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule=3D"evenodd"></path></svg></=
button></div><div style=3D"position: fixed; top: 1px; left: 1px; width: 1px=
; height: 0px; padding: 0px; margin: -1px; overflow: hidden; clip: rect(0px=
, 0px, 0px, 0px); white-space: nowrap; border-width: 0px; display: none;"><=
/div></div><a class=3D"px-2 py-2 rounded-lg hover:bg-base-300 hover:text-ba=
se-content transition-colors whitespace-nowrap" href=3D"https://www.sparkpl=
ayground.com/pyspark-online-compiler">PySpark Online Compiler</a><a class=
=3D"px-2 py-2 rounded-lg hover:bg-base-300 hover:text-base-content transiti=
on-colors whitespace-nowrap" href=3D"https://www.sparkplayground.com/pyspar=
k-cheat-sheet">Cheat Sheet</a><a class=3D"
    px-2 py-2 rounded-lg whitespace-nowrap transition-all duration-300 ease=
-in-out
    hover:bg-base-300 hover:text-base-content
    overflow-hidden inline-block
    opacity-100 scale-100 max-w-xs
    pointer-events-auto
  " href=3D"https://www.sparkplayground.com/pricing">Pricing</a></div><div =
class=3D"hidden lg:flex lg:items-center lg:justify-center"><button class=3D=
"btn-blue rounded-full">Sign In</button></div></div></nav><div class=3D"rel=
ative z-50 hidden"><div class=3D"fixed inset-y-0 right-0 z-10 w-full px-8 p=
y-4 overflow-y-auto bg-base-200 sm:max-w-sm sm:ring-1 sm:ring-neutral/10 tr=
ansform origin-right transition ease-in-out duration-300"><div class=3D"fle=
x items-center justify-between"><a class=3D"flex items-center gap-2 shrink-=
0 " title=3D"Spark Playground hompage" href=3D"https://www.sparkplayground.=
com/"><img alt=3D"Spark Playground logo" fetchpriority=3D"high" width=3D"32=
" height=3D"32" decoding=3D"async" data-nimg=3D"1" class=3D"w-8" src=3D"htt=
ps://www.sparkplayground.com/_next/image?url=3D%2F_next%2Fstatic%2Fmedia%2F=
icon.8e0bf7a0.png&amp;w=3D64&amp;q=3D75" style=3D"color: transparent;"><spa=
n class=3D"font-extrabold text-lg">Spark Playground</span></a><button type=
=3D"button" class=3D"-m-2.5 rounded-md p-2.5"><span class=3D"sr-only">Close=
 menu</span><svg xmlns=3D"http://www.w3.org/2000/svg" fill=3D"none" viewBox=
=3D"0 0 24 24" stroke-width=3D"1.5" stroke=3D"currentColor" class=3D"w-6 h-=
6"><path stroke-linecap=3D"round" stroke-linejoin=3D"round" d=3D"M6 18L18 6=
M6 6l12 12"></path></svg></button></div><div class=3D"flow-root mt-6"><div =
class=3D"py-4"><div class=3D"flex flex-col gap-y-4 items-start"><a class=3D=
"link link-hover" title=3D"Learn PySpark" href=3D"https://www.sparkplaygrou=
nd.com/tutorials">Learn PySpark</a><a class=3D"link link-hover" title=3D"Pr=
actice Interview Questions" href=3D"https://www.sparkplayground.com/pyspark=
-coding-interview-questions">Practice Interview Questions</a><a class=3D"li=
nk link-hover" title=3D"Blogs &amp; Scenario Based Questions" href=3D"https=
://www.sparkplayground.com/blog">Blogs &amp; Scenario Based Questions</a><a=
 class=3D"link link-hover" title=3D"PySpark Online Compiler" href=3D"https:=
//www.sparkplayground.com/pyspark-online-compiler">PySpark Online Compiler<=
/a><a class=3D"link link-hover" title=3D"Cheat Sheet" href=3D"https://www.s=
parkplayground.com/pyspark-cheat-sheet">Cheat Sheet</a><a class=3D"link lin=
k-hover" title=3D"Pricing" href=3D"https://www.sparkplayground.com/pricing"=
>Pricing</a></div></div><div class=3D"divider"></div><div class=3D"flex fle=
x-col"><button class=3D"btn-blue rounded-full">Sign In</button></div></div>=
</div></div></header><main class=3D"min-h-screen p-8 bg-base-100 text-base-=
content flex"><aside class=3D"hidden md:block h-screen sticky top-4 w-1/4 b=
g-base-200 p-2 rounded-lg shadow-md overflow-y-auto overflow-auto"><ul clas=
s=3D"list-none ml-2 mt-4 mb-4"><li class=3D"mb-2"><a href=3D"https://www.sp=
arkplayground.com/pyspark-cheat-sheet#create-dataframe" class=3D"text-black=
 hover:text-blue-600 text-md font-semibold">1. Create DataFrame</a><ul clas=
s=3D"list-none ml-6 mt-2"><li class=3D"mb-1"><a href=3D"https://www.sparkpl=
ayground.com/pyspark-cheat-sheet#with-default-schema" class=3D"text-black/7=
0 font-semibold hover:text-blue-600 text-sm">1.1. With Default Schema</a></=
li><li class=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark-ch=
eat-sheet#explicit-schema" class=3D"text-black/70 font-semibold hover:text-=
blue-600 text-sm">1.2. Explicit Schema</a></li><li class=3D"mb-1"><a href=
=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#using-a-list-of-dic=
tionaries" class=3D"text-black/70 font-semibold hover:text-blue-600 text-sm=
">1.3. Using a List of Dictionaries</a></li></ul></li><li class=3D"mb-2"><a=
 href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#reading-files"=
 class=3D"text-black hover:text-blue-600 text-md font-semibold">2. Reading =
Files</a><ul class=3D"list-none ml-6 mt-2"><li class=3D"mb-1"><a href=3D"ht=
tps://www.sparkplayground.com/pyspark-cheat-sheet#csv-files" class=3D"text-=
black/70 font-semibold hover:text-blue-600 text-sm">2.1. CSV Files</a></li>=
<li class=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark-cheat=
-sheet#json-files" class=3D"text-black/70 font-semibold hover:text-blue-600=
 text-sm">2.2. JSON Files</a></li></ul></li><li class=3D"mb-2"><a href=3D"h=
ttps://www.sparkplayground.com/pyspark-cheat-sheet#select-drop-rename-colum=
ns" class=3D"text-black hover:text-blue-600 text-md font-semibold">3. Selec=
t, Drop, Rename Columns</a><ul class=3D"list-none ml-6 mt-2"><li class=3D"m=
b-1"><a href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#selecti=
ng-columns" class=3D"text-black/70 font-semibold hover:text-blue-600 text-s=
m">3.1. Selecting Columns</a></li><li class=3D"mb-1"><a href=3D"https://www=
.sparkplayground.com/pyspark-cheat-sheet#renaming-columns" class=3D"text-bl=
ack/70 font-semibold hover:text-blue-600 text-sm">3.2. Renaming Columns</a>=
</li><li class=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark-=
cheat-sheet#adding-columns" class=3D"text-black/70 font-semibold hover:text=
-blue-600 text-sm">3.3. Adding Columns</a></li><li class=3D"mb-1"><a href=
=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#dropping-columns" c=
lass=3D"text-black/70 font-semibold hover:text-blue-600 text-sm">3.4. Dropp=
ing Columns</a></li></ul></li><li class=3D"mb-2"><a href=3D"https://www.spa=
rkplayground.com/pyspark-cheat-sheet#filtering" class=3D"text-black hover:t=
ext-blue-600 text-md font-semibold">4. Filtering</a><ul class=3D"list-none =
ml-6 mt-2"><li class=3D"mb-1"><a href=3D"https://www.sparkplayground.com/py=
spark-cheat-sheet#basic-filtering" class=3D"text-black/70 font-semibold hov=
er:text-blue-600 text-sm">4.1. Basic Filtering</a></li><li class=3D"mb-1"><=
a href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#filter-with-m=
ultiple-conditions" class=3D"text-black/70 font-semibold hover:text-blue-60=
0 text-sm">4.2. Filter with Multiple Conditions</a></li><li class=3D"mb-1">=
<a href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#string-filte=
rs" class=3D"text-black/70 font-semibold hover:text-blue-600 text-sm">4.3. =
String Filters</a></li><li class=3D"mb-1"><a href=3D"https://www.sparkplayg=
round.com/pyspark-cheat-sheet#null-filters" class=3D"text-black/70 font-sem=
ibold hover:text-blue-600 text-sm">4.4. Null Filters</a></li><li class=3D"m=
b-1"><a href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#filter-=
from-a-list" class=3D"text-black/70 font-semibold hover:text-blue-600 text-=
sm">4.5. Filter from a List</a></li><li class=3D"mb-1"><a href=3D"https://w=
ww.sparkplayground.com/pyspark-cheat-sheet#data-cleansing" class=3D"text-bl=
ack/70 font-semibold hover:text-blue-600 text-sm">4.6. Data Cleansing</a></=
li></ul></li><li class=3D"mb-2"><a href=3D"https://www.sparkplayground.com/=
pyspark-cheat-sheet#grouping" class=3D"text-black hover:text-blue-600 text-=
md font-semibold">5. Grouping</a><ul class=3D"list-none ml-6 mt-2"><li clas=
s=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#b=
asic-aggregations-without-grouping" class=3D"text-black/70 font-semibold ho=
ver:text-blue-600 text-sm">5.1. Basic Aggregations without Grouping</a></li=
><li class=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark-chea=
t-sheet#aggregations-with-grouping" class=3D"text-black/70 font-semibold ho=
ver:text-blue-600 text-sm">5.2. Aggregations with Grouping</a></li><li clas=
s=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#c=
ommon-aggregation-functions" class=3D"text-black/70 font-semibold hover:tex=
t-blue-600 text-sm">5.3. Common Aggregation Functions</a></li></ul></li><li=
 class=3D"mb-2"><a href=3D"https://www.sparkplayground.com/pyspark-cheat-sh=
eet#joins" class=3D"text-black hover:text-blue-600 text-md font-semibold">6=
. Joins</a><ul class=3D"list-none ml-6 mt-2"><li class=3D"mb-1"><a href=3D"=
https://www.sparkplayground.com/pyspark-cheat-sheet#join-types" class=3D"te=
xt-black/70 font-semibold hover:text-blue-600 text-sm">6.1. Join Types</a><=
/li><li class=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark-c=
heat-sheet#basic-syntax" class=3D"text-black/70 font-semibold hover:text-bl=
ue-600 text-sm">6.2. Basic Syntax</a></li></ul></li><li class=3D"mb-2"><a h=
ref=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#date-and-time-fu=
nctions" class=3D"text-black hover:text-blue-600 text-md font-semibold">7. =
Date and Time Functions</a><ul class=3D"list-none ml-6 mt-2"><li class=3D"m=
b-1"><a href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#string-=
to-date-format" class=3D"text-black/70 font-semibold hover:text-blue-600 te=
xt-sm">7.1. String to Date Format</a></li><li class=3D"mb-1"><a href=3D"htt=
ps://www.sparkplayground.com/pyspark-cheat-sheet#string-to-timestamp-format=
" class=3D"text-black/70 font-semibold hover:text-blue-600 text-sm">7.2. St=
ring to Timestamp Format</a></li><li class=3D"mb-1"><a href=3D"https://www.=
sparkplayground.com/pyspark-cheat-sheet#date-to-string-format" class=3D"tex=
t-black/70 font-semibold hover:text-blue-600 text-sm">7.3. Date to String F=
ormat</a></li><li class=3D"mb-1"><a href=3D"https://www.sparkplayground.com=
/pyspark-cheat-sheet#timestamp-to-string-format" class=3D"text-black/70 fon=
t-semibold hover:text-blue-600 text-sm">7.4. Timestamp to String Format</a>=
</li><li class=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark-=
cheat-sheet#date-functions" class=3D"text-black/70 font-semibold hover:text=
-blue-600 text-sm">7.5. Date Functions</a></li><li class=3D"mb-1"><a href=
=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#time-functions" cla=
ss=3D"text-black/70 font-semibold hover:text-blue-600 text-sm">7.6. Time Fu=
nctions</a></li></ul></li><li class=3D"mb-2"><a href=3D"https://www.sparkpl=
ayground.com/pyspark-cheat-sheet#math-functions" class=3D"text-black hover:=
text-blue-600 text-md font-semibold">8. Math Functions</a><ul class=3D"list=
-none ml-6 mt-2"><li class=3D"mb-1"><a href=3D"https://www.sparkplayground.=
com/pyspark-cheat-sheet#simple-arithmetic" class=3D"text-black/70 font-semi=
bold hover:text-blue-600 text-sm">8.1. Simple Arithmetic</a></li><li class=
=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#co=
mplex-arithmetic" class=3D"text-black/70 font-semibold hover:text-blue-600 =
text-sm">8.2. Complex Arithmetic</a></li></ul></li><li class=3D"mb-2"><a hr=
ef=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#string-functions"=
 class=3D"text-black hover:text-blue-600 text-md font-semibold">9. String F=
unctions</a><ul class=3D"list-none ml-6 mt-2"><li class=3D"mb-1"><a href=3D=
"https://www.sparkplayground.com/pyspark-cheat-sheet#basic-string-functions=
" class=3D"text-black/70 font-semibold hover:text-blue-600 text-sm">9.1. Ba=
sic String Functions</a></li><li class=3D"mb-1"><a href=3D"https://www.spar=
kplayground.com/pyspark-cheat-sheet#trim-and-pad-functions" class=3D"text-b=
lack/70 font-semibold hover:text-blue-600 text-sm">9.2. Trim and Pad Functi=
ons</a></li><li class=3D"mb-1"><a href=3D"https://www.sparkplayground.com/p=
yspark-cheat-sheet#advanced-string-functions" class=3D"text-black/70 font-s=
emibold hover:text-blue-600 text-sm">9.3. Advanced String Functions</a></li=
><li class=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark-chea=
t-sheet#converting-to-other-data-types" class=3D"text-black/70 font-semibol=
d hover:text-blue-600 text-sm">9.4. Converting to Other Data Types</a></li>=
</ul></li><li class=3D"mb-2"><a href=3D"https://www.sparkplayground.com/pys=
park-cheat-sheet#window-functions" class=3D"text-black hover:text-blue-600 =
text-md font-semibold">10. Window Functions</a><ul class=3D"list-none ml-6 =
mt-2"><li class=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark=
-cheat-sheet#basic-window-functions" class=3D"text-black/70 font-semibold h=
over:text-blue-600 text-sm">10.1. Basic Window Functions</a></li><li class=
=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#wi=
th-rows-between" class=3D"text-black/70 font-semibold hover:text-blue-600 t=
ext-sm">10.2. With Rows Between</a></li></ul></li><li class=3D"mb-2"><a hre=
f=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#array-functions" c=
lass=3D"text-black hover:text-blue-600 text-md font-semibold">11. Array Fun=
ctions</a><ul class=3D"list-none ml-6 mt-2"><li class=3D"mb-1"><a href=3D"h=
ttps://www.sparkplayground.com/pyspark-cheat-sheet#creating-and-manipulatin=
g-arrays" class=3D"text-black/70 font-semibold hover:text-blue-600 text-sm"=
>11.1. Creating and Manipulating Arrays</a></li><li class=3D"mb-1"><a href=
=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#array-elements" cla=
ss=3D"text-black/70 font-semibold hover:text-blue-600 text-sm">11.2. Array =
Elements</a></li><li class=3D"mb-1"><a href=3D"https://www.sparkplayground.=
com/pyspark-cheat-sheet#modifying-array-elements" class=3D"text-black/70 fo=
nt-semibold hover:text-blue-600 text-sm">11.3. Modifying Array Elements</a>=
</li><li class=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark-=
cheat-sheet#arrays-to-rows" class=3D"text-black/70 font-semibold hover:text=
-blue-600 text-sm">11.4. Arrays to Rows</a></li><li class=3D"mb-1"><a href=
=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#rows-to-array" clas=
s=3D"text-black/70 font-semibold hover:text-blue-600 text-sm">11.5. Rows to=
 Array</a></li></ul></li><li class=3D"mb-2"><a href=3D"https://www.sparkpla=
yground.com/pyspark-cheat-sheet#running-sql-queries" class=3D"text-black ho=
ver:text-blue-600 text-md font-semibold">12. Running SQL Queries</a><ul cla=
ss=3D"list-none ml-6 mt-2"><li class=3D"mb-1"><a href=3D"https://www.sparkp=
layground.com/pyspark-cheat-sheet#with-temp-view" class=3D"text-black/70 fo=
nt-semibold hover:text-blue-600 text-sm">12.1. With Temp View</a></li><li c=
lass=3D"mb-1"><a href=3D"https://www.sparkplayground.com/pyspark-cheat-shee=
t#without-temp-view" class=3D"text-black/70 font-semibold hover:text-blue-6=
00 text-sm">12.2. Without Temp View</a></li></ul></li></ul></aside><section=
 class=3D"w-full lg:w-3/4 ml-0 sm:ml-1 lg:ml-8 md:ml-8"><header class=3D"fl=
ex justify-between items-center mb-4"><h1 class=3D"text-2xl font-bold text-=
black">PySpark Cheat Sheet - Quick Syntax Guide for Data Engineers</h1></he=
ader><div class=3D"bg-base-100" data-color-mode=3D"light"><div class=3D"wmd=
e-markdown wmde-markdown-color bg-base-100" style=3D"background: rgb(237, 2=
39, 244); padding: 0px;">
<p>Welcome to the <strong>PySpark Syntax Cheat Sheet</strong>! This page is=
 designed to provide a quick reference to essential PySpark functions and o=
perations. <strong>Click</strong> the links on the left to quickly navigate=
 through the sections.</p>
<p>This page is still a <strong>work in progress</strong>, so check back fo=
r updates as we continue to add more content. If you have feedback or find =
something essential missing, submit a request by clicking on the <strong>"H=
elp Us Improve"</strong> button at the bottom right!</p>
<h2 id=3D"create-dataframe"><a class=3D"anchor" aria-hidden=3D"true" tabind=
ex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#creat=
e-dataframe"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" vers=
ion=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=
=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 =
2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-=
2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 =
2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 00=
4.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></pa=
th></svg></a>Create DataFrame</h2>
<h3 id=3D"with-default-schema"><a class=3D"anchor" aria-hidden=3D"true" tab=
index=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#wi=
th-default-schema"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16=
" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fil=
l-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 1=
12.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 =
0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-=
2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.=
5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z=
"></path></svg></a>With Default Schema</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql <span class=3D"token keywo=
rd">import</span> SparkSession
</span><span class=3D"code-line">
</span><span class=3D"code-line">spark <span class=3D"token operator">=3D</=
span> SparkSession<span class=3D"token punctuation">.</span>builder<span cl=
ass=3D"token punctuation">.</span>appName<span class=3D"token punctuation">=
(</span><span class=3D"token string">"Example"</span><span class=3D"token p=
unctuation">)</span><span class=3D"token punctuation">.</span>getOrCreate<s=
pan class=3D"token punctuation">(</span><span class=3D"token punctuation">)=
</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line">data <span class=3D"token operator">=3D</s=
pan> <span class=3D"token punctuation">[</span><span class=3D"token punctua=
tion">(</span><span class=3D"token number">1</span><span class=3D"token pun=
ctuation">,</span> <span class=3D"token string">"Alice"</span><span class=
=3D"token punctuation">,</span> <span class=3D"token number">29</span><span=
 class=3D"token punctuation">)</span><span class=3D"token punctuation">,</s=
pan> <span class=3D"token punctuation">(</span><span class=3D"token number"=
>2</span><span class=3D"token punctuation">,</span> <span class=3D"token st=
ring">"Bob"</span><span class=3D"token punctuation">,</span> <span class=3D=
"token number">35</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">]</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>createDataFrame<span clas=
s=3D"token punctuation">(</span>data<span class=3D"token punctuation">,</sp=
an> <span class=3D"token punctuation">[</span><span class=3D"token string">=
"id"</span><span class=3D"token punctuation">,</span> <span class=3D"token =
string">"name"</span><span class=3D"token punctuation">,</span> <span class=
=3D"token string">"age"</span><span class=3D"token punctuation">]</span><sp=
an class=3D"token punctuation">)</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>show<span class=3D"token punctuation">(</span><span class=3D"token punctu=
ation">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql import Sp=
arkSession

spark =3D SparkSession.builder.appName(&quot;Example&quot;).getOrCreate()

data =3D [(1, &quot;Alice&quot;, 29), (2, &quot;Bob&quot;, 35)]
df =3D spark.createDataFrame(data, [&quot;id&quot;, &quot;name&quot;, &quot=
;age&quot;])
df.show()
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"explicit-schema"><a class=3D"anchor" aria-hidden=3D"true" tabinde=
x=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#explic=
it-schema"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" versio=
n=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=
=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 =
2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-=
2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 =
2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 00=
4.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></pa=
th></svg></a>Explicit Schema</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>types <span class=3D"token keyword">import</span> StructType=
<span class=3D"token punctuation">,</span> StructField<span class=3D"token =
punctuation">,</span> IntegerType<span class=3D"token punctuation">,</span>=
 StringType
</span><span class=3D"code-line">
</span><span class=3D"code-line">schema <span class=3D"token operator">=3D<=
/span> StructType<span class=3D"token punctuation">(</span><span class=3D"t=
oken punctuation">[</span>
</span><span class=3D"code-line">    StructField<span class=3D"token punctu=
ation">(</span><span class=3D"token string">"id"</span><span class=3D"token=
 punctuation">,</span> IntegerType<span class=3D"token punctuation">(</span=
><span class=3D"token punctuation">)</span><span class=3D"token punctuation=
">,</span> <span class=3D"token boolean">True</span><span class=3D"token pu=
nctuation">)</span><span class=3D"token punctuation">,</span>
</span><span class=3D"code-line">    StructField<span class=3D"token punctu=
ation">(</span><span class=3D"token string">"name"</span><span class=3D"tok=
en punctuation">,</span> StringType<span class=3D"token punctuation">(</spa=
n><span class=3D"token punctuation">)</span><span class=3D"token punctuatio=
n">,</span> <span class=3D"token boolean">True</span><span class=3D"token p=
unctuation">)</span><span class=3D"token punctuation">,</span>
</span><span class=3D"code-line">    StructField<span class=3D"token punctu=
ation">(</span><span class=3D"token string">"age"</span><span class=3D"toke=
n punctuation">,</span> IntegerType<span class=3D"token punctuation">(</spa=
n><span class=3D"token punctuation">)</span><span class=3D"token punctuatio=
n">,</span> <span class=3D"token boolean">True</span><span class=3D"token p=
unctuation">)</span>
</span><span class=3D"code-line"><span class=3D"token punctuation">]</span>=
<span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>createDataFrame<span clas=
s=3D"token punctuation">(</span>data<span class=3D"token punctuation">,</sp=
an> schema<span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>printSchema<span class=3D"token punctuation">(</span><span class=3D"token=
 punctuation">)</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>show<span class=3D"token punctuation">(</span><span class=3D"token punctu=
ation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Schema as =
a string</span>
</span><span class=3D"code-line">data <span class=3D"token operator">=3D</s=
pan> <span class=3D"token punctuation">[</span><span class=3D"token punctua=
tion">(</span><span class=3D"token number">1</span><span class=3D"token pun=
ctuation">,</span> <span class=3D"token string">"Alice"</span><span class=
=3D"token punctuation">,</span> <span class=3D"token number">29</span><span=
 class=3D"token punctuation">)</span><span class=3D"token punctuation">,</s=
pan> <span class=3D"token punctuation">(</span><span class=3D"token number"=
>2</span><span class=3D"token punctuation">,</span> <span class=3D"token st=
ring">"Bob"</span><span class=3D"token punctuation">,</span> <span class=3D=
"token number">35</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">]</span>
</span><span class=3D"code-line">schema <span class=3D"token operator">=3D<=
/span> <span class=3D"token string">"id INT, name STRING, age INT"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>createDataFrame<span clas=
s=3D"token punctuation">(</span>data<span class=3D"token punctuation">,</sp=
an> schema<span class=3D"token operator">=3D</span>schema<span class=3D"tok=
en punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Schema Str=
ing with Float and Boolean Types</span>
</span><span class=3D"code-line">schema <span class=3D"token operator">=3D<=
/span> <span class=3D"token string">"id INT, name STRING, salary FLOAT, is_=
active BOOLEAN"</span>
</span><span class=3D"code-line">data <span class=3D"token operator">=3D</s=
pan> <span class=3D"token punctuation">[</span><span class=3D"token punctua=
tion">(</span><span class=3D"token number">1</span><span class=3D"token pun=
ctuation">,</span> <span class=3D"token string">"Alice"</span><span class=
=3D"token punctuation">,</span> <span class=3D"token number">50000.75</span=
><span class=3D"token punctuation">,</span> <span class=3D"token boolean">T=
rue</span><span class=3D"token punctuation">)</span><span class=3D"token pu=
nctuation">,</span> <span class=3D"token punctuation">(</span><span class=
=3D"token number">2</span><span class=3D"token punctuation">,</span> <span =
class=3D"token string">"Bob"</span><span class=3D"token punctuation">,</spa=
n> <span class=3D"token number">60000.50</span><span class=3D"token punctua=
tion">,</span> <span class=3D"token boolean">False</span><span class=3D"tok=
en punctuation">)</span><span class=3D"token punctuation">]</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>createDataFrame<span clas=
s=3D"token punctuation">(</span>data<span class=3D"token punctuation">,</sp=
an> schema<span class=3D"token operator">=3D</span>schema<span class=3D"tok=
en punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Schema Str=
ing with Date and Timestamp</span>
</span><span class=3D"code-line"><span class=3D"token keyword">from</span> =
datetime <span class=3D"token keyword">import</span> date<span class=3D"tok=
en punctuation">,</span> datetime
</span><span class=3D"code-line">schema <span class=3D"token operator">=3D<=
/span> <span class=3D"token string">"id INT, name STRING, join_date DATE, l=
ast_login TIMESTAMP"</span>
</span><span class=3D"code-line">data <span class=3D"token operator">=3D</s=
pan> <span class=3D"token punctuation">[</span><span class=3D"token punctua=
tion">(</span><span class=3D"token number">1</span><span class=3D"token pun=
ctuation">,</span> <span class=3D"token string">"Alice"</span><span class=
=3D"token punctuation">,</span> date<span class=3D"token punctuation">(</sp=
an><span class=3D"token number">2023</span><span class=3D"token punctuation=
">,</span> <span class=3D"token number">1</span><span class=3D"token punctu=
ation">,</span> <span class=3D"token number">15</span><span class=3D"token =
punctuation">)</span><span class=3D"token punctuation">,</span> datetime<sp=
an class=3D"token punctuation">(</span><span class=3D"token number">2024</s=
pan><span class=3D"token punctuation">,</span> <span class=3D"token number"=
>3</span><span class=3D"token punctuation">,</span> <span class=3D"token nu=
mber">10</span><span class=3D"token punctuation">,</span> <span class=3D"to=
ken number">14</span><span class=3D"token punctuation">,</span> <span class=
=3D"token number">30</span><span class=3D"token punctuation">,</span> <span=
 class=3D"token number">0</span><span class=3D"token punctuation">)</span><=
span class=3D"token punctuation">)</span><span class=3D"token punctuation">=
,</span>
</span><span class=3D"code-line">        <span class=3D"token punctuation">=
(</span><span class=3D"token number">2</span><span class=3D"token punctuati=
on">,</span> <span class=3D"token string">"Bob"</span><span class=3D"token =
punctuation">,</span> date<span class=3D"token punctuation">(</span><span c=
lass=3D"token number">2023</span><span class=3D"token punctuation">,</span>=
 <span class=3D"token number">1</span><span class=3D"token punctuation">,</=
span> <span class=3D"token number">15</span><span class=3D"token punctuatio=
n">)</span><span class=3D"token punctuation">,</span> datetime<span class=
=3D"token punctuation">(</span><span class=3D"token number">2024</span><spa=
n class=3D"token punctuation">,</span> <span class=3D"token number">3</span=
><span class=3D"token punctuation">,</span> <span class=3D"token number">10=
</span><span class=3D"token punctuation">,</span> <span class=3D"token numb=
er">14</span><span class=3D"token punctuation">,</span> <span class=3D"toke=
n number">30</span><span class=3D"token punctuation">,</span> <span class=
=3D"token number">0</span><span class=3D"token punctuation">)</span><span c=
lass=3D"token punctuation">)</span><span class=3D"token punctuation">]</spa=
n>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>createDataFrame<span clas=
s=3D"token punctuation">(</span>data<span class=3D"token punctuation">,</sp=
an> schema<span class=3D"token operator">=3D</span>schema<span class=3D"tok=
en punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.types imp=
ort StructType, StructField, IntegerType, StringType

schema =3D StructType([
    StructField(&quot;id&quot;, IntegerType(), True),
    StructField(&quot;name&quot;, StringType(), True),
    StructField(&quot;age&quot;, IntegerType(), True)
])

df =3D spark.createDataFrame(data, schema)
df.printSchema()
df.show()

# Schema as a string
data =3D [(1, &quot;Alice&quot;, 29), (2, &quot;Bob&quot;, 35)]
schema =3D &quot;id INT, name STRING, age INT&quot;
df =3D spark.createDataFrame(data, schema=3Dschema)

# Schema String with Float and Boolean Types
schema =3D &quot;id INT, name STRING, salary FLOAT, is_active BOOLEAN&quot;
data =3D [(1, &quot;Alice&quot;, 50000.75, True), (2, &quot;Bob&quot;, 6000=
0.50, False)]
df =3D spark.createDataFrame(data, schema=3Dschema)

# Schema String with Date and Timestamp
from datetime import date, datetime
schema =3D &quot;id INT, name STRING, join_date DATE, last_login TIMESTAMP&=
quot;
data =3D [(1, &quot;Alice&quot;, date(2023, 1, 15), datetime(2024, 3, 10, 1=
4, 30, 0)),
        (2, &quot;Bob&quot;, date(2023, 1, 15), datetime(2024, 3, 10, 14, 3=
0, 0))]
df =3D spark.createDataFrame(data, schema=3Dschema)
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"using-a-list-of-dictionaries"><a class=3D"anchor" aria-hidden=3D"=
true" tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat=
-sheet#using-a-list-of-dictionaries"><svg class=3D"octicon octicon-link" vi=
ewBox=3D"0 0 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=
=3D"true"><path fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.0=
6l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.0=
6 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a=
2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.9=
5 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.=
25a2 2 0 01-2.83 0z"></path></svg></a>Using a List of Dictionaries</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql <span class=3D"token keywo=
rd">import</span> SparkSession
</span><span class=3D"code-line">
</span><span class=3D"code-line">spark <span class=3D"token operator">=3D</=
span> SparkSession<span class=3D"token punctuation">.</span>builder<span cl=
ass=3D"token punctuation">.</span>appName<span class=3D"token punctuation">=
(</span><span class=3D"token string">"Example"</span><span class=3D"token p=
unctuation">)</span><span class=3D"token punctuation">.</span>getOrCreate<s=
pan class=3D"token punctuation">(</span><span class=3D"token punctuation">)=
</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line">data <span class=3D"token operator">=3D</s=
pan> <span class=3D"token punctuation">[</span>
</span><span class=3D"code-line">    <span class=3D"token punctuation">{</s=
pan><span class=3D"token string">"id"</span><span class=3D"token punctuatio=
n">:</span> <span class=3D"token number">1</span><span class=3D"token punct=
uation">,</span> <span class=3D"token string">"name"</span><span class=3D"t=
oken punctuation">:</span> <span class=3D"token string">"Alice"</span><span=
 class=3D"token punctuation">,</span> <span class=3D"token string">"age"</s=
pan><span class=3D"token punctuation">:</span> <span class=3D"token number"=
>29</span><span class=3D"token punctuation">}</span><span class=3D"token pu=
nctuation">,</span>
</span><span class=3D"code-line">    <span class=3D"token punctuation">{</s=
pan><span class=3D"token string">"id"</span><span class=3D"token punctuatio=
n">:</span> <span class=3D"token number">2</span><span class=3D"token punct=
uation">,</span> <span class=3D"token string">"name"</span><span class=3D"t=
oken punctuation">:</span> <span class=3D"token string">"Bob"</span><span c=
lass=3D"token punctuation">,</span> <span class=3D"token string">"age"</spa=
n><span class=3D"token punctuation">:</span> <span class=3D"token number">3=
5</span><span class=3D"token punctuation">}</span>
</span><span class=3D"code-line"><span class=3D"token punctuation">]</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>createDataFrame<span clas=
s=3D"token punctuation">(</span>data<span class=3D"token punctuation">)</sp=
an>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>show<span class=3D"token punctuation">(</span><span class=3D"token punctu=
ation">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql import Sp=
arkSession

spark =3D SparkSession.builder.appName(&quot;Example&quot;).getOrCreate()

data =3D [
    {&quot;id&quot;: 1, &quot;name&quot;: &quot;Alice&quot;, &quot;age&quot=
;: 29},
    {&quot;id&quot;: 2, &quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;:=
 35}
]

df =3D spark.createDataFrame(data)
df.show()
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h2 id=3D"reading-files"><a class=3D"anchor" aria-hidden=3D"true" tabindex=
=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#reading=
-files"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=
=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D=
"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.8=
3l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5=
a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0=
 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.9=
5 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path>=
</svg></a><strong>Reading Files</strong></h2>
<h3 id=3D"csv-files"><a class=3D"anchor" aria-hidden=3D"true" tabindex=3D"-=
1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#csv-files"><=
svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=3D"1.1" wi=
dth=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D"evenodd" d=
=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a=
2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 =
00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .=
75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25=
-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><=
strong>CSV Files</strong></h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment">#Basic CSV files=
</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>read<span class=3D"token =
punctuation">.</span><span class=3D"token builtin">format</span><span class=
=3D"token punctuation">(</span><span class=3D"token string">"csv"</span><sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">.<=
/span>load<span class=3D"token punctuation">(</span><span class=3D"token st=
ring">"/path/to/sample.csv"</span><span class=3D"token punctuation">)</span=
>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment">#csv with he=
ader</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>read<span class=3D"token =
punctuation">.</span>option<span class=3D"token punctuation">(</span><span =
class=3D"token string">"header"</span><span class=3D"token punctuation">,</=
span><span class=3D"token boolean">True</span><span class=3D"token punctuat=
ion">)</span><span class=3D"token punctuation">.</span>csv<span class=3D"to=
ken punctuation">(</span><span class=3D"token string">"/path/to/sample.csv"=
</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># multiple o=
ptions</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>read<span class=3D"token =
punctuation">.</span>option<span class=3D"token punctuation">(</span><span =
class=3D"token string">"inferSchema"</span><span class=3D"token punctuation=
">,</span><span class=3D"token boolean">True</span><span class=3D"token pun=
ctuation">)</span><span class=3D"token punctuation">.</span>option<span cla=
ss=3D"token punctuation">(</span><span class=3D"token string">"delimiter"</=
span><span class=3D"token punctuation">,</span><span class=3D"token string"=
>","</span><span class=3D"token punctuation">)</span><span class=3D"token p=
unctuation">.</span>csv<span class=3D"token punctuation">(</span><span clas=
s=3D"token string">"/path/to/sample.csv"</span><span class=3D"token punctua=
tion">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># with defin=
ed schema</span>
</span><span class=3D"code-line"><span class=3D"token keyword">from</span> =
pyspark<span class=3D"token punctuation">.</span>sql<span class=3D"token pu=
nctuation">.</span>types <span class=3D"token keyword">import</span> Struct=
Type<span class=3D"token punctuation">,</span> StructField<span class=3D"to=
ken punctuation">,</span> StringType<span class=3D"token punctuation">,</sp=
an> IntegerType
</span><span class=3D"code-line">schema <span class=3D"token operator">=3D<=
/span> StructType<span class=3D"token punctuation">(</span><span class=3D"t=
oken punctuation">[</span>
</span><span class=3D"code-line">    StructField<span class=3D"token punctu=
ation">(</span><span class=3D"token string">"name"</span><span class=3D"tok=
en punctuation">,</span> StringType<span class=3D"token punctuation">(</spa=
n><span class=3D"token punctuation">)</span><span class=3D"token punctuatio=
n">,</span> <span class=3D"token boolean">True</span><span class=3D"token p=
unctuation">)</span><span class=3D"token punctuation">,</span>
</span><span class=3D"code-line">    StructField<span class=3D"token punctu=
ation">(</span><span class=3D"token string">"age"</span><span class=3D"toke=
n punctuation">,</span> IntegerType<span class=3D"token punctuation">(</spa=
n><span class=3D"token punctuation">)</span><span class=3D"token punctuatio=
n">,</span> <span class=3D"token boolean">True</span><span class=3D"token p=
unctuation">)</span>
</span><span class=3D"code-line"><span class=3D"token punctuation">]</span>=
<span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>read<span class=3D"token =
punctuation">.</span><span class=3D"token builtin">format</span><span class=
=3D"token punctuation">(</span><span class=3D"token string">"csv"</span><sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">.<=
/span>schema<span class=3D"token punctuation">(</span>schema<span class=3D"=
token punctuation">)</span><span class=3D"token punctuation">.</span>load<s=
pan class=3D"token punctuation">(</span><span class=3D"token string">"/path=
/to/sample.csv"</span><span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"#Basic CSV files
df =3D spark.read.format(&quot;csv&quot;).load(&quot;/path/to/sample.csv&qu=
ot;)

#csv with header
df =3D spark.read.option(&quot;header&quot;,True).csv(&quot;/path/to/sample=
.csv&quot;)

# multiple options
df =3D spark.read.option(&quot;inferSchema&quot;,True).option(&quot;delimit=
er&quot;,&quot;,&quot;).csv(&quot;/path/to/sample.csv&quot;)

# with defined schema
from pyspark.sql.types import StructType, StructField, StringType, IntegerT=
ype
schema =3D StructType([
    StructField(&quot;name&quot;, StringType(), True),
    StructField(&quot;age&quot;, IntegerType(), True)
])
df =3D spark.read.format(&quot;csv&quot;).schema(schema).load(&quot;/path/t=
o/sample.csv&quot;)
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"json-files"><a class=3D"anchor" aria-hidden=3D"true" tabindex=3D"=
-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#json-files"=
><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=3D"1.1" =
width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D"evenodd"=
 d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.=
5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 =
0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0=
 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.=
25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a=
><strong>JSON Files</strong></h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># Basic JSON fil=
e</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>read<span class=3D"token =
punctuation">.</span><span class=3D"token builtin">format</span><span class=
=3D"token punctuation">(</span><span class=3D"token string">"json"</span><s=
pan class=3D"token punctuation">)</span><span class=3D"token punctuation">.=
</span>load<span class=3D"token punctuation">(</span><span class=3D"token s=
tring">"/path/to/sample.json"</span><span class=3D"token punctuation">)</sp=
an>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># JSON with =
multi-line records</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>read<span class=3D"token =
punctuation">.</span>option<span class=3D"token punctuation">(</span><span =
class=3D"token string">"multiline"</span><span class=3D"token punctuation">=
,</span> <span class=3D"token boolean">True</span><span class=3D"token punc=
tuation">)</span><span class=3D"token punctuation">.</span>json<span class=
=3D"token punctuation">(</span><span class=3D"token string">"/path/to/sampl=
e.json"</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># JSON with =
a defined schema</span>
</span><span class=3D"code-line"><span class=3D"token keyword">from</span> =
pyspark<span class=3D"token punctuation">.</span>sql<span class=3D"token pu=
nctuation">.</span>types <span class=3D"token keyword">import</span> Struct=
Type<span class=3D"token punctuation">,</span> StructField<span class=3D"to=
ken punctuation">,</span> StringType<span class=3D"token punctuation">,</sp=
an> IntegerType
</span><span class=3D"code-line">
</span><span class=3D"code-line">schema <span class=3D"token operator">=3D<=
/span> StructType<span class=3D"token punctuation">(</span><span class=3D"t=
oken punctuation">[</span>
</span><span class=3D"code-line">    StructField<span class=3D"token punctu=
ation">(</span><span class=3D"token string">"name"</span><span class=3D"tok=
en punctuation">,</span> StringType<span class=3D"token punctuation">(</spa=
n><span class=3D"token punctuation">)</span><span class=3D"token punctuatio=
n">,</span> <span class=3D"token boolean">True</span><span class=3D"token p=
unctuation">)</span><span class=3D"token punctuation">,</span>
</span><span class=3D"code-line">    StructField<span class=3D"token punctu=
ation">(</span><span class=3D"token string">"age"</span><span class=3D"toke=
n punctuation">,</span> IntegerType<span class=3D"token punctuation">(</spa=
n><span class=3D"token punctuation">)</span><span class=3D"token punctuatio=
n">,</span> <span class=3D"token boolean">True</span><span class=3D"token p=
unctuation">)</span>
</span><span class=3D"code-line"><span class=3D"token punctuation">]</span>=
<span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>read<span class=3D"token =
punctuation">.</span><span class=3D"token builtin">format</span><span class=
=3D"token punctuation">(</span><span class=3D"token string">"json"</span><s=
pan class=3D"token punctuation">)</span><span class=3D"token punctuation">.=
</span>schema<span class=3D"token punctuation">(</span>schema<span class=3D=
"token punctuation">)</span><span class=3D"token punctuation">.</span>load<=
span class=3D"token punctuation">(</span><span class=3D"token string">"/pat=
h/to/sample.json"</span><span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# Basic JSON file
df =3D spark.read.format(&quot;json&quot;).load(&quot;/path/to/sample.json&=
quot;)

# JSON with multi-line records
df =3D spark.read.option(&quot;multiline&quot;, True).json(&quot;/path/to/s=
ample.json&quot;)

# JSON with a defined schema
from pyspark.sql.types import StructType, StructField, StringType, IntegerT=
ype

schema =3D StructType([
    StructField(&quot;name&quot;, StringType(), True),
    StructField(&quot;age&quot;, IntegerType(), True)
])

df =3D spark.read.format(&quot;json&quot;).schema(schema).load(&quot;/path/=
to/sample.json&quot;)
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h2 id=3D"select-drop-rename-columns"><a class=3D"anchor" aria-hidden=3D"tr=
ue" tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-s=
heet#select-drop-rename-columns"><svg class=3D"octicon octicon-link" viewBo=
x=3D"0 0 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"t=
rue"><path fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.2=
5-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5=
 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0=
 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-=
2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 =
2 0 01-2.83 0z"></path></svg></a><strong>Select, Drop, Rename Columns</stro=
ng></h2>
<h3 id=3D"selecting-columns"><a class=3D"anchor" aria-hidden=3D"true" tabin=
dex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#sele=
cting-columns"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" ve=
rsion=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-ru=
le=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.8=
3 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.=
5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a=
2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 =
004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></=
path></svg></a>Selecting Columns</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># Select single =
column</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>select<span class=3D"token p=
unctuation">(</span><span class=3D"token string">"name"</span><span class=
=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Select mul=
tiple columns</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>select<span class=3D"token p=
unctuation">(</span><span class=3D"token string">"name"</span><span class=
=3D"token punctuation">,</span> <span class=3D"token string">"age"</span><s=
pan class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Select col=
umns dynamically</span>
</span><span class=3D"code-line">columns_to_select <span class=3D"token ope=
rator">=3D</span> <span class=3D"token punctuation">[</span><span class=3D"=
token string">"name"</span><span class=3D"token punctuation">,</span> <span=
 class=3D"token string">"department"</span><span class=3D"token punctuation=
">]</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>select<span class=3D"token p=
unctuation">(</span><span class=3D"token operator">*</span>columns_to_selec=
t<span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# Select single column
df =3D df.select(&quot;name&quot;)

# Select multiple columns
df =3D df.select(&quot;name&quot;, &quot;age&quot;)

# Select columns dynamically
columns_to_select =3D [&quot;name&quot;, &quot;department&quot;]
df =3D df.select(*columns_to_select)
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"renaming-columns"><a class=3D"anchor" aria-hidden=3D"true" tabind=
ex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#renam=
ing-columns"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" vers=
ion=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=
=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 =
2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-=
2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 =
2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 00=
4.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></pa=
th></svg></a>Renaming Columns</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># Rename a colum=
n</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumnRenamed<span class=
=3D"token punctuation">(</span><span class=3D"token string">"name"</span><s=
pan class=3D"token punctuation">,</span> <span class=3D"token string">"full=
_name"</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Rename mul=
tiple columns with chained calls</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumnRenamed<span class=
=3D"token punctuation">(</span><span class=3D"token string">"old_col1"</spa=
n><span class=3D"token punctuation">,</span> <span class=3D"token string">"=
new_col1"</span><span class=3D"token punctuation">)</span>\
</span><span class=3D"code-line">       <span class=3D"token punctuation">.=
</span>withColumnRenamed<span class=3D"token punctuation">(</span><span cla=
ss=3D"token string">"old_col2"</span><span class=3D"token punctuation">,</s=
pan> <span class=3D"token string">"new_col2"</span><span class=3D"token pun=
ctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Rename col=
umns using select and alias</span>
</span><span class=3D"code-line"><span class=3D"token keyword">from</span> =
pyspark<span class=3D"token punctuation">.</span>sql<span class=3D"token pu=
nctuation">.</span>functions <span class=3D"token keyword">import</span> co=
l
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>select<span class=3D"token p=
unctuation">(</span>
</span><span class=3D"code-line">    col<span class=3D"token punctuation">(=
</span><span class=3D"token string">"old_column_name1"</span><span class=3D=
"token punctuation">)</span><span class=3D"token punctuation">.</span>alias=
<span class=3D"token punctuation">(</span><span class=3D"token string">"new=
_column_name1"</span><span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">,</span>
</span><span class=3D"code-line">    col<span class=3D"token punctuation">(=
</span><span class=3D"token string">"old_column_name2"</span><span class=3D=
"token punctuation">)</span><span class=3D"token punctuation">.</span>alias=
<span class=3D"token punctuation">(</span><span class=3D"token string">"new=
_column_name2"</span><span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">,</span>
</span><span class=3D"code-line">    <span class=3D"token comment"># Add mo=
re columns as needed</span>
</span><span class=3D"code-line"><span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# Rename a column
df =3D df.withColumnRenamed(&quot;name&quot;, &quot;full_name&quot;)

# Rename multiple columns with chained calls
df =3D df.withColumnRenamed(&quot;old_col1&quot;, &quot;new_col1&quot;)\
       .withColumnRenamed(&quot;old_col2&quot;, &quot;new_col2&quot;)

# Rename columns using select and alias
from pyspark.sql.functions import col
df =3D df.select(
    col(&quot;old_column_name1&quot;).alias(&quot;new_column_name1&quot;),
    col(&quot;old_column_name2&quot;).alias(&quot;new_column_name2&quot;),
    # Add more columns as needed
)
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"adding-columns"><a class=3D"anchor" aria-hidden=3D"true" tabindex=
=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#adding-=
columns"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=
=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D=
"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.8=
3l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5=
a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0=
 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.9=
5 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path>=
</svg></a>Adding Columns</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>functions <span class=3D"token keyword">import</span> col<sp=
an class=3D"token punctuation">,</span> lit<span class=3D"token punctuation=
">,</span> expr<span class=3D"token punctuation">,</span> when
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Add a new =
column with a constant value</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"country"</span><span =
class=3D"token punctuation">,</span> lit<span class=3D"token punctuation">(=
</span><span class=3D"token string">"USA"</span><span class=3D"token punctu=
ation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Add a new =
column with a calculated value</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"salary_after_bonus"</=
span><span class=3D"token punctuation">,</span> col<span class=3D"token pun=
ctuation">(</span><span class=3D"token string">"salary"</span><span class=
=3D"token punctuation">)</span> <span class=3D"token operator">*</span> <sp=
an class=3D"token number">1.1</span><span class=3D"token punctuation">)</sp=
an>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Add a colu=
mn using an SQL expression</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"tax"</span><span clas=
s=3D"token punctuation">,</span> expr<span class=3D"token punctuation">(</s=
pan><span class=3D"token string">"salary * 0.2"</span><span class=3D"token =
punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Add a colu=
mn with conditional logic</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"high_earner"</span><s=
pan class=3D"token punctuation">,</span> when<span class=3D"token punctuati=
on">(</span>col<span class=3D"token punctuation">(</span><span class=3D"tok=
en string">"salary"</span><span class=3D"token punctuation">)</span> <span =
class=3D"token operator">&gt;</span> <span class=3D"token number">55000</sp=
an><span class=3D"token punctuation">,</span> <span class=3D"token string">=
"Yes"</span><span class=3D"token punctuation">)</span><span class=3D"token =
punctuation">.</span>otherwise<span class=3D"token punctuation">(</span><sp=
an class=3D"token string">"No"</span><span class=3D"token punctuation">)</s=
pan><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Case When =
with multiple conditions</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span>
</span><span class=3D"code-line">    <span class=3D"token string">"salary_c=
ategory"</span><span class=3D"token punctuation">,</span>
</span><span class=3D"code-line">    when<span class=3D"token punctuation">=
(</span>col<span class=3D"token punctuation">(</span><span class=3D"token s=
tring">"salary"</span><span class=3D"token punctuation">)</span> <span clas=
s=3D"token operator">&lt;</span> <span class=3D"token number">60000</span><=
span class=3D"token punctuation">,</span> <span class=3D"token string">"Low=
"</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">    <span class=3D"token punctuation">.</s=
pan>when<span class=3D"token punctuation">(</span><span class=3D"token punc=
tuation">(</span>col<span class=3D"token punctuation">(</span><span class=
=3D"token string">"salary"</span><span class=3D"token punctuation">)</span>=
 <span class=3D"token operator">&gt;=3D</span> <span class=3D"token number"=
>60000</span><span class=3D"token punctuation">)</span> <span class=3D"toke=
n operator">&amp;</span> <span class=3D"token punctuation">(</span>col<span=
 class=3D"token punctuation">(</span><span class=3D"token string">"salary"<=
/span><span class=3D"token punctuation">)</span> <span class=3D"token opera=
tor">&lt;</span> <span class=3D"token number">90000</span><span class=3D"to=
ken punctuation">)</span><span class=3D"token punctuation">,</span> <span c=
lass=3D"token string">"Medium"</span><span class=3D"token punctuation">)</s=
pan>
</span><span class=3D"code-line">    <span class=3D"token punctuation">.</s=
pan>otherwise<span class=3D"token punctuation">(</span><span class=3D"token=
 string">"High"</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line"><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Add multip=
le columns at once</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumns<span class=3D"to=
ken punctuation">(</span><span class=3D"token punctuation">{</span>
</span><span class=3D"code-line">    <span class=3D"token string">"bonus"</=
span><span class=3D"token punctuation">:</span> col<span class=3D"token pun=
ctuation">(</span><span class=3D"token string">"salary"</span><span class=
=3D"token punctuation">)</span> <span class=3D"token operator">*</span> <sp=
an class=3D"token number">0.1</span><span class=3D"token punctuation">,</sp=
an>
</span><span class=3D"code-line">    <span class=3D"token string">"net_sala=
ry"</span><span class=3D"token punctuation">:</span> col<span class=3D"toke=
n punctuation">(</span><span class=3D"token string">"salary"</span><span cl=
ass=3D"token punctuation">)</span> <span class=3D"token operator">-</span> =
<span class=3D"token punctuation">(</span>col<span class=3D"token punctuati=
on">(</span><span class=3D"token string">"salary"</span><span class=3D"toke=
n punctuation">)</span> <span class=3D"token operator">*</span> <span class=
=3D"token number">0.2</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line"><span class=3D"token punctuation">}</span>=
<span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.functions=
 import col, lit, expr, when

# Add a new column with a constant value
df =3D df.withColumn(&quot;country&quot;, lit(&quot;USA&quot;))

# Add a new column with a calculated value
df =3D df.withColumn(&quot;salary_after_bonus&quot;, col(&quot;salary&quot;=
) * 1.1)

# Add a column using an SQL expression
df =3D df.withColumn(&quot;tax&quot;, expr(&quot;salary * 0.2&quot;))

# Add a column with conditional logic
df =3D df.withColumn(&quot;high_earner&quot;, when(col(&quot;salary&quot;) =
&gt; 55000, &quot;Yes&quot;).otherwise(&quot;No&quot;))

# Case When with multiple conditions
df =3D df.withColumn(
    &quot;salary_category&quot;,
    when(col(&quot;salary&quot;) &lt; 60000, &quot;Low&quot;)
    .when((col(&quot;salary&quot;) &gt;=3D 60000) &amp; (col(&quot;salary&q=
uot;) &lt; 90000), &quot;Medium&quot;)
    .otherwise(&quot;High&quot;)
)

# Add multiple columns at once
df =3D df.withColumns({
    &quot;bonus&quot;: col(&quot;salary&quot;) * 0.1,
    &quot;net_salary&quot;: col(&quot;salary&quot;) - (col(&quot;salary&quo=
t;) * 0.2)
})

"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"dropping-columns"><a class=3D"anchor" aria-hidden=3D"true" tabind=
ex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#dropp=
ing-columns"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" vers=
ion=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=
=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 =
2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-=
2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 =
2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 00=
4.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></pa=
th></svg></a>Dropping Columns</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># Drop a column<=
/span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>drop<span class=3D"token pun=
ctuation">(</span><span class=3D"token string">"department"</span><span cla=
ss=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Drop multi=
ple columns</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>drop<span class=3D"token pun=
ctuation">(</span><span class=3D"token string">'column1'</span><span class=
=3D"token punctuation">,</span> <span class=3D"token string">'column2'</spa=
n><span class=3D"token punctuation">,</span> <span class=3D"token string">'=
column3'</span><span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# Drop a column
df =3D df.drop(&quot;department&quot;)

# Drop multiple columns
df =3D df.drop('column1', 'column2', 'column3')
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h2 id=3D"filtering"><a class=3D"anchor" aria-hidden=3D"true" tabindex=3D"-=
1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#filtering"><=
svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=3D"1.1" wi=
dth=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D"evenodd" d=
=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a=
2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 =
00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .=
75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25=
-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><=
strong>Filtering</strong></h2>
<p>You can refer to columns using any of these notations: <code>df.age</cod=
e> , <code>df['age']</code>, <code>col('age')</code></p>
<h3 id=3D"basic-filtering"><a class=3D"anchor" aria-hidden=3D"true" tabinde=
x=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#basic-=
filtering"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" versio=
n=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=
=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 =
2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-=
2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 =
2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 00=
4.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></pa=
th></svg></a>Basic Filtering</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># Filter on &gt;=
, &lt;, &gt;=3D, &lt;=3D, =3D=3D condition</span>
</span><span class=3D"code-line">df_filtered <span class=3D"token operator"=
>=3D</span> df<span class=3D"token punctuation">.</span><span class=3D"toke=
n builtin">filter</span><span class=3D"token punctuation">(</span>df<span c=
lass=3D"token punctuation">.</span>age <span class=3D"token operator">&gt;<=
/span> <span class=3D"token number">30</span><span class=3D"token punctuati=
on">)</span>
</span><span class=3D"code-line">df_filtered <span class=3D"token operator"=
>=3D</span> df<span class=3D"token punctuation">.</span><span class=3D"toke=
n builtin">filter</span><span class=3D"token punctuation">(</span>df<span c=
lass=3D"token punctuation">[</span><span class=3D"token string">'age'</span=
><span class=3D"token punctuation">]</span> <span class=3D"token operator">=
&gt;</span> <span class=3D"token number">30</span><span class=3D"token punc=
tuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Using col(=
) function</span>
</span><span class=3D"code-line"><span class=3D"token keyword">from</span> =
pyspark<span class=3D"token punctuation">.</span>sql<span class=3D"token pu=
nctuation">.</span>functions <span class=3D"token keyword">import</span> co=
l
</span><span class=3D"code-line">df_filtered <span class=3D"token operator"=
>=3D</span> df<span class=3D"token punctuation">.</span><span class=3D"toke=
n builtin">filter</span><span class=3D"token punctuation">(</span>col<span =
class=3D"token punctuation">(</span><span class=3D"token string">"age"</spa=
n><span class=3D"token punctuation">)</span> <span class=3D"token operator"=
>&gt;</span> <span class=3D"token number">30</span><span class=3D"token pun=
ctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# Filter on &gt;, &lt;, &g=
t;=3D, &lt;=3D, =3D=3D condition
df_filtered =3D df.filter(df.age &gt; 30)
df_filtered =3D df.filter(df['age'] &gt; 30)

# Using col() function
from pyspark.sql.functions import col
df_filtered =3D df.filter(col(&quot;age&quot;) &gt; 30)
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"filter-with-multiple-conditions"><a class=3D"anchor" aria-hidden=
=3D"true" tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-c=
heat-sheet#filter-with-multiple-conditions"><svg class=3D"octicon octicon-l=
ink" viewBox=3D"0 0 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-=
hidden=3D"true"><path fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.=
06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.=
06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69=
 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 =
00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1=
.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Filter with Multiple Conditions=
</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># Multiple condi=
tions require parentheses around each condition</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># AND condit=
ion ( &amp; )</span>
</span><span class=3D"code-line">df_filtered <span class=3D"token operator"=
>=3D</span> df<span class=3D"token punctuation">.</span><span class=3D"toke=
n builtin">filter</span><span class=3D"token punctuation">(</span><span cla=
ss=3D"token punctuation">(</span>df<span class=3D"token punctuation">.</spa=
n>age <span class=3D"token operator">&gt;</span> <span class=3D"token numbe=
r">25</span><span class=3D"token punctuation">)</span> <span class=3D"token=
 operator">&amp;</span> <span class=3D"token punctuation">(</span>df<span c=
lass=3D"token punctuation">.</span>department <span class=3D"token operator=
">=3D=3D</span> <span class=3D"token string">"Engineering"</span><span clas=
s=3D"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># OR conditi=
on ( | )</span>
</span><span class=3D"code-line">df_filtered <span class=3D"token operator"=
>=3D</span> df<span class=3D"token punctuation">.</span><span class=3D"toke=
n builtin">filter</span><span class=3D"token punctuation">(</span><span cla=
ss=3D"token punctuation">(</span>df<span class=3D"token punctuation">.</spa=
n>age <span class=3D"token operator">&lt;</span> <span class=3D"token numbe=
r">30</span><span class=3D"token punctuation">)</span> <span class=3D"token=
 operator">|</span> <span class=3D"token punctuation">(</span>df<span class=
=3D"token punctuation">.</span>department <span class=3D"token operator">=
=3D=3D</span> <span class=3D"token string">"Finance"</span><span class=3D"t=
oken punctuation">)</span><span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# Multiple conditions requ=
ire parentheses around each condition

# AND condition ( &amp; )
df_filtered =3D df.filter((df.age &gt; 25) &amp; (df.department =3D=3D &quo=
t;Engineering&quot;))
# OR condition ( | )
df_filtered =3D df.filter((df.age &lt; 30) | (df.department =3D=3D &quot;Fi=
nance&quot;))
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"string-filters"><a class=3D"anchor" aria-hidden=3D"true" tabindex=
=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#string-=
filters"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=
=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D=
"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.8=
3l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5=
a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0=
 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.9=
5 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path>=
</svg></a>String Filters</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># Filter rows wh=
ere department equals 'Marketing'</span>
</span><span class=3D"code-line">df_filtered <span class=3D"token operator"=
>=3D</span> df<span class=3D"token punctuation">.</span><span class=3D"toke=
n builtin">filter</span><span class=3D"token punctuation">(</span>df<span c=
lass=3D"token punctuation">.</span>department <span class=3D"token operator=
">=3D=3D</span> <span class=3D"token string">"Marketing"</span><span class=
=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Case-insen=
sitive filter</span>
</span><span class=3D"code-line">df_filtered <span class=3D"token operator"=
>=3D</span> df<span class=3D"token punctuation">.</span><span class=3D"toke=
n builtin">filter</span><span class=3D"token punctuation">(</span>col<span =
class=3D"token punctuation">(</span><span class=3D"token string">"departmen=
t"</span><span class=3D"token punctuation">)</span><span class=3D"token pun=
ctuation">.</span>like<span class=3D"token punctuation">(</span><span class=
=3D"token string">"MARKETING"</span><span class=3D"token punctuation">)</sp=
an><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Contains a=
 substring</span>
</span><span class=3D"code-line">df_filtered <span class=3D"token operator"=
>=3D</span> df<span class=3D"token punctuation">.</span><span class=3D"toke=
n builtin">filter</span><span class=3D"token punctuation">(</span>col<span =
class=3D"token punctuation">(</span><span class=3D"token string">"departmen=
t"</span><span class=3D"token punctuation">)</span><span class=3D"token pun=
ctuation">.</span>contains<span class=3D"token punctuation">(</span><span c=
lass=3D"token string">"Engineer"</span><span class=3D"token punctuation">)<=
/span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Filter row=
s where the name starts with 'A'</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n><span class=3D"token builtin">filter</span><span class=3D"token punctuati=
on">(</span>col<span class=3D"token punctuation">(</span><span class=3D"tok=
en string">"name"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">.</span>startswith<span class=3D"token punctuation=
">(</span><span class=3D"token string">"A"</span><span class=3D"token punct=
uation">)</span><span class=3D"token punctuation">)</span><span class=3D"to=
ken punctuation">.</span>show<span class=3D"token punctuation">(</span><spa=
n class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Filter row=
s where the name ends with 'e'</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n><span class=3D"token builtin">filter</span><span class=3D"token punctuati=
on">(</span>col<span class=3D"token punctuation">(</span><span class=3D"tok=
en string">"name"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">.</span>endswith<span class=3D"token punctuation">=
(</span><span class=3D"token string">"e"</span><span class=3D"token punctua=
tion">)</span><span class=3D"token punctuation">)</span><span class=3D"toke=
n punctuation">.</span>show<span class=3D"token punctuation">(</span><span =
class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Filter row=
s where the name matches a regex</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n><span class=3D"token builtin">filter</span><span class=3D"token punctuati=
on">(</span>col<span class=3D"token punctuation">(</span><span class=3D"tok=
en string">"name"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">.</span>rlike<span class=3D"token punctuation">(</=
span><span class=3D"token string">"^A.*"</span><span class=3D"token punctua=
tion">)</span><span class=3D"token punctuation">)</span><span class=3D"toke=
n punctuation">.</span>show<span class=3D"token punctuation">(</span><span =
class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# Filter rows where depart=
ment equals 'Marketing'
df_filtered =3D df.filter(df.department =3D=3D &quot;Marketing&quot;)

# Case-insensitive filter
df_filtered =3D df.filter(col(&quot;department&quot;).like(&quot;MARKETING&=
quot;))

# Contains a substring
df_filtered =3D df.filter(col(&quot;department&quot;).contains(&quot;Engine=
er&quot;))

# Filter rows where the name starts with 'A'
df.filter(col(&quot;name&quot;).startswith(&quot;A&quot;)).show()

# Filter rows where the name ends with 'e'
df.filter(col(&quot;name&quot;).endswith(&quot;e&quot;)).show()

# Filter rows where the name matches a regex
df.filter(col(&quot;name&quot;).rlike(&quot;^A.*&quot;)).show()
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"null-filters"><a class=3D"anchor" aria-hidden=3D"true" tabindex=
=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#null-fi=
lters"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=3D=
"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D"ev=
enodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-=
2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.=
5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 01=
2.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4=
.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></s=
vg></a>Null Filters</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># Filter rows wh=
ere a column is null</span>
</span><span class=3D"code-line">df_filtered <span class=3D"token operator"=
>=3D</span> df<span class=3D"token punctuation">.</span><span class=3D"toke=
n builtin">filter</span><span class=3D"token punctuation">(</span>df<span c=
lass=3D"token punctuation">.</span>department<span class=3D"token punctuati=
on">.</span>isNull<span class=3D"token punctuation">(</span><span class=3D"=
token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Filter row=
s where a column is not null</span>
</span><span class=3D"code-line">df_filtered <span class=3D"token operator"=
>=3D</span> df<span class=3D"token punctuation">.</span><span class=3D"toke=
n builtin">filter</span><span class=3D"token punctuation">(</span>df<span c=
lass=3D"token punctuation">.</span>department<span class=3D"token punctuati=
on">.</span>isNotNull<span class=3D"token punctuation">(</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# Filter rows where a colu=
mn is null
df_filtered =3D df.filter(df.department.isNull())
# Filter rows where a column is not null
df_filtered =3D df.filter(df.department.isNotNull())
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"filter-from-a-list"><a class=3D"anchor" aria-hidden=3D"true" tabi=
ndex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#fil=
ter-from-a-list"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" =
version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-=
rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112=
.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l=
2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.=
5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 =
0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z">=
</path></svg></a>Filter from a List</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># Filter rows wh=
ere department is in a list</span>
</span><span class=3D"code-line">departments <span class=3D"token operator"=
>=3D</span> <span class=3D"token punctuation">[</span><span class=3D"token =
string">"Engineering"</span><span class=3D"token punctuation">,</span> <spa=
n class=3D"token string">"Finance"</span><span class=3D"token punctuation">=
]</span>
</span><span class=3D"code-line">df_filtered <span class=3D"token operator"=
>=3D</span> df<span class=3D"token punctuation">.</span><span class=3D"toke=
n builtin">filter</span><span class=3D"token punctuation">(</span>col<span =
class=3D"token punctuation">(</span><span class=3D"token string">"departmen=
t"</span><span class=3D"token punctuation">)</span><span class=3D"token pun=
ctuation">.</span>isin<span class=3D"token punctuation">(</span>departments=
<span class=3D"token punctuation">)</span><span class=3D"token punctuation"=
>)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Negate the=
 filter (not in list)</span>
</span><span class=3D"code-line">df_filtered <span class=3D"token operator"=
>=3D</span> df<span class=3D"token punctuation">.</span><span class=3D"toke=
n builtin">filter</span><span class=3D"token punctuation">(</span><span cla=
ss=3D"token operator">~</span>col<span class=3D"token punctuation">(</span>=
<span class=3D"token string">"department"</span><span class=3D"token punctu=
ation">)</span><span class=3D"token punctuation">.</span>isin<span class=3D=
"token punctuation">(</span>departments<span class=3D"token punctuation">)<=
/span><span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# Filter rows where depart=
ment is in a list
departments =3D [&quot;Engineering&quot;, &quot;Finance&quot;]
df_filtered =3D df.filter(col(&quot;department&quot;).isin(departments))
# Negate the filter (not in list)
df_filtered =3D df.filter(~col(&quot;department&quot;).isin(departments))
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"data-cleansing"><a class=3D"anchor" aria-hidden=3D"true" tabindex=
=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#data-cl=
eansing"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=
=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D=
"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.8=
3l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5=
a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0=
 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.9=
5 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path>=
</svg></a>Data Cleansing</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># 1. Drop all fu=
lly duplicate rows</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Removes ro=
ws where all columns match exactly</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>dropDuplicates<span class=3D=
"token punctuation">(</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Drop du=
plicates based on specific columns</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Keeps the =
first row for each unique email</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>dropDuplicates<span class=3D=
"token punctuation">(</span><span class=3D"token punctuation">[</span><span=
 class=3D"token string">"email"</span><span class=3D"token punctuation">]</=
span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Get onl=
y distinct rows (same as SELECT DISTINCT)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Removes du=
plicates across all columns</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>distinct<span class=3D"token=
 punctuation">(</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Drop ro=
ws with any null values</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Removes ro=
ws with even a single null field</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>dropna<span class=3D"token p=
unctuation">(</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 5. Drop ro=
ws with nulls in specific columns</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Only keeps=
 rows where 'email' and 'age' are not null</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>dropna<span class=3D"token p=
unctuation">(</span>subset<span class=3D"token operator">=3D</span><span cl=
ass=3D"token punctuation">[</span><span class=3D"token string">"email"</spa=
n><span class=3D"token punctuation">,</span> <span class=3D"token string">"=
age"</span><span class=3D"token punctuation">]</span><span class=3D"token p=
unctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 6. Fill mi=
ssing values for all columns</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Replaces a=
ll nulls with a default value</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>fillna<span class=3D"token p=
unctuation">(</span><span class=3D"token string">"N/A"</span><span class=3D=
"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 7. Fill mi=
ssing values for specific columns</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Sets defau=
lt age as 0 and country as "Unknown" if missing</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>fillna<span class=3D"token p=
unctuation">(</span><span class=3D"token punctuation">{</span><span class=
=3D"token string">"age"</span><span class=3D"token punctuation">:</span> <s=
pan class=3D"token number">0</span><span class=3D"token punctuation">,</spa=
n> <span class=3D"token string">"country"</span><span class=3D"token punctu=
ation">:</span> <span class=3D"token string">"Unknown"</span><span class=3D=
"token punctuation">}</span><span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# 1. Drop all fully duplic=
ate rows
# Removes rows where all columns match exactly
df =3D df.dropDuplicates()

# 2. Drop duplicates based on specific columns
# Keeps the first row for each unique email
df =3D df.dropDuplicates([&quot;email&quot;])

# 3. Get only distinct rows (same as SELECT DISTINCT)
# Removes duplicates across all columns
df =3D df.distinct()

# 4. Drop rows with any null values
# Removes rows with even a single null field
df =3D df.dropna()

# 5. Drop rows with nulls in specific columns
# Only keeps rows where 'email' and 'age' are not null
df =3D df.dropna(subset=3D[&quot;email&quot;, &quot;age&quot;])

# 6. Fill missing values for all columns
# Replaces all nulls with a default value
df =3D df.fillna(&quot;N/A&quot;)

# 7. Fill missing values for specific columns
# Sets default age as 0 and country as &quot;Unknown&quot; if missing
df =3D df.fillna({&quot;age&quot;: 0, &quot;country&quot;: &quot;Unknown&qu=
ot;})
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h2 id=3D"grouping"><a class=3D"anchor" aria-hidden=3D"true" tabindex=3D"-1=
" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#grouping"><sv=
g class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=3D"1.1" widt=
h=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D"evenodd" d=
=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a=
2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 =
00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .=
75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25=
-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><=
strong>Grouping</strong></h2>
<p>Import the required functions</p>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>functions <span class=3D"token keyword">import</span> count<=
span class=3D"token punctuation">,</span> <span class=3D"token builtin">sum=
</span><span class=3D"token punctuation">,</span> avg<span class=3D"token p=
unctuation">,</span> <span class=3D"token builtin">min</span><span class=3D=
"token punctuation">,</span> <span class=3D"token builtin">max</span><span =
class=3D"token punctuation">,</span> countDistinct<span class=3D"token punc=
tuation">,</span> collect_list<span class=3D"token punctuation">,</span> co=
llect_set
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.functions=
 import count, sum, avg, min, max, countDistinct, collect_list, collect_set
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"basic-aggregations-without-grouping"><a class=3D"anchor" aria-hid=
den=3D"true" tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspar=
k-cheat-sheet#basic-aggregations-without-grouping"><svg class=3D"octicon oc=
ticon-link" viewBox=3D"0 0 16 16" version=3D"1.1" width=3D"16" height=3D"16=
" aria-hidden=3D"true"><path fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75=
 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 =
0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25=
zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5=
 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-=
1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Basic Aggregations witho=
ut Grouping</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment">#Count rows</spa=
n>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>count<span class=3D"token punctuation">(</span><span class=3D"token punct=
uation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment">#Count Disti=
nct Values in a column</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>select<span class=3D"token punctuation">(</span>countDistinct<span class=
=3D"token punctuation">(</span><span class=3D"token string">"Department"</s=
pan><span class=3D"token punctuation">)</span><span class=3D"token punctuat=
ion">)</span><span class=3D"token punctuation">.</span>show<span class=3D"t=
oken punctuation">(</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment">#Sum</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>select<span class=3D"token punctuation">(</span><span class=3D"token buil=
tin">sum</span><span class=3D"token punctuation">(</span><span class=3D"tok=
en string">"Salary"</span><span class=3D"token punctuation">)</span><span c=
lass=3D"token punctuation">)</span><span class=3D"token punctuation">.</spa=
n>show<span class=3D"token punctuation">(</span><span class=3D"token punctu=
ation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment">#Multiple Ag=
gregations</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>select<span class=3D"token punctuation">(</span><span class=3D"token buil=
tin">min</span><span class=3D"token punctuation">(</span><span class=3D"tok=
en string">"Salary"</span><span class=3D"token punctuation">)</span><span c=
lass=3D"token punctuation">,</span> <span class=3D"token builtin">max</span=
><span class=3D"token punctuation">(</span><span class=3D"token string">"Sa=
lary"</span><span class=3D"token punctuation">)</span><span class=3D"token =
punctuation">)</span><span class=3D"token punctuation">.</span>show<span cl=
ass=3D"token punctuation">(</span><span class=3D"token punctuation">)</span=
>
</span></code><div class=3D"copied" data-code=3D"#Count rows
df.count()

#Count Distinct Values in a column
df.select(countDistinct(&quot;Department&quot;)).show()

#Sum
df.select(sum(&quot;Salary&quot;)).show()

#Multiple Aggregations
df.select(min(&quot;Salary&quot;), max(&quot;Salary&quot;)).show()
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"aggregations-with-grouping"><a class=3D"anchor" aria-hidden=3D"tr=
ue" tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-s=
heet#aggregations-with-grouping"><svg class=3D"octicon octicon-link" viewBo=
x=3D"0 0 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"t=
rue"><path fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.2=
5-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5=
 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0=
 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-=
2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 =
2 0 01-2.83 0z"></path></svg></a>Aggregations with Grouping</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment">#Group by a sing=
le column</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>groupBy<span class=3D"token punctuation">(</span><span class=3D"token str=
ing">"Department"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">.</span><span class=3D"token builtin">sum</span><s=
pan class=3D"token punctuation">(</span><span class=3D"token string">"Salar=
y"</span><span class=3D"token punctuation">)</span><span class=3D"token pun=
ctuation">.</span>show<span class=3D"token punctuation">(</span><span class=
=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment">#GroupBy wit=
h Multiple Columns</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>groupBy<span class=3D"token punctuation">(</span><span class=3D"token str=
ing">"Department"</span><span class=3D"token punctuation">,</span> <span cl=
ass=3D"token string">"Employee"</span><span class=3D"token punctuation">)</=
span><span class=3D"token punctuation">.</span><span class=3D"token builtin=
">sum</span><span class=3D"token punctuation">(</span><span class=3D"token =
string">"Salary"</span><span class=3D"token punctuation">)</span><span clas=
s=3D"token punctuation">.</span>show<span class=3D"token punctuation">(</sp=
an><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment">#Group by wi=
th multiple aggregations</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>groupBy<span class=3D"token punctuation">(</span><span class=3D"token str=
ing">"Department"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">.</span>agg<span class=3D"token punctuation">(</sp=
an>
</span><span class=3D"code-line">    count<span class=3D"token punctuation"=
>(</span><span class=3D"token string">"Employee"</span><span class=3D"token=
 punctuation">)</span><span class=3D"token punctuation">.</span>alias<span =
class=3D"token punctuation">(</span><span class=3D"token string">"Employee_=
Count"</span><span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">,</span>
</span><span class=3D"code-line">    avg<span class=3D"token punctuation">(=
</span><span class=3D"token string">"Salary"</span><span class=3D"token pun=
ctuation">)</span><span class=3D"token punctuation">.</span>alias<span clas=
s=3D"token punctuation">(</span><span class=3D"token string">"Average_Salar=
y"</span><span class=3D"token punctuation">)</span><span class=3D"token pun=
ctuation">,</span>
</span><span class=3D"code-line">    <span class=3D"token builtin">max</spa=
n><span class=3D"token punctuation">(</span><span class=3D"token string">"S=
alary"</span><span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">.</span>alias<span class=3D"token punctuation">(</span><span =
class=3D"token string">"Max_Salary"</span><span class=3D"token punctuation"=
>)</span>
</span><span class=3D"code-line"><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment">#Filter afte=
r aggregation</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>groupBy<span class=3D"token punctuation">(</span><span class=3D"token str=
ing">"Department"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">.</span>agg<span class=3D"token punctuation">(</sp=
an><span class=3D"token builtin">sum</span><span class=3D"token punctuation=
">(</span><span class=3D"token string">"Salary"</span><span class=3D"token =
punctuation">)</span><span class=3D"token punctuation">.</span>alias<span c=
lass=3D"token punctuation">(</span><span class=3D"token string">"Total_Sala=
ry"</span><span class=3D"token punctuation">)</span><span class=3D"token pu=
nctuation">)</span><span class=3D"token punctuation">.</span><span class=3D=
"token builtin">filter</span><span class=3D"token punctuation">(</span><spa=
n class=3D"token string">"Total_Salary &gt; 8000"</span><span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">.</span>show<span =
class=3D"token punctuation">(</span><span class=3D"token punctuation">)</sp=
an>
</span><span class=3D"code-line">
</span></code><div class=3D"copied" data-code=3D"#Group by a single column
df.groupBy(&quot;Department&quot;).sum(&quot;Salary&quot;).show()

#GroupBy with Multiple Columns
df.groupBy(&quot;Department&quot;, &quot;Employee&quot;).sum(&quot;Salary&q=
uot;).show()

#Group by with multiple aggregations
df.groupBy(&quot;Department&quot;).agg(
    count(&quot;Employee&quot;).alias(&quot;Employee_Count&quot;),
    avg(&quot;Salary&quot;).alias(&quot;Average_Salary&quot;),
    max(&quot;Salary&quot;).alias(&quot;Max_Salary&quot;)
)

#Filter after aggregation
df.groupBy(&quot;Department&quot;).agg(sum(&quot;Salary&quot;).alias(&quot;=
Total_Salary&quot;)).filter(&quot;Total_Salary &gt; 8000&quot;).show()

"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"common-aggregation-functions"><a class=3D"anchor" aria-hidden=3D"=
true" tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat=
-sheet#common-aggregation-functions"><svg class=3D"octicon octicon-link" vi=
ewBox=3D"0 0 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=
=3D"true"><path fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.0=
6l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.0=
6 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a=
2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.9=
5 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.=
25a2 2 0 01-2.83 0z"></path></svg></a>Common Aggregation Functions</h3>


















































<table><thead><tr><th><strong>Function</strong></th><th><strong>Description=
</strong></th><th><strong>Example</strong></th></tr></thead><tbody><tr><td>=
<code>count()</code></td><td>Counts rows in a group.</td><td><code>groupBy(=
"Department").count()</code></td></tr><tr><td><code>sum()</code></td><td>Su=
ms values in a group.</td><td><code>groupBy("Department").sum("Salary")</co=
de></td></tr><tr><td><code>avg()</code> / <code>mean()</code></td><td>Calcu=
lates average values.</td><td><code>groupBy("Department").avg("Salary")</co=
de></td></tr><tr><td><code>min()</code></td><td>Finds the minimum value.</t=
d><td><code>groupBy("Department").min("Salary")</code></td></tr><tr><td><co=
de>max()</code></td><td>Finds the maximum value.</td><td><code>groupBy("Dep=
artment").max("Salary")</code></td></tr><tr><td><code>countDistinct()</code=
></td><td>Counts distinct values in a group.</td><td><code>countDistinct("E=
mployee")</code></td></tr><tr><td><code>collect_list()</code></td><td>Colle=
cts all values into a list.</td><td><code>collect_list("Employee")</code></=
td></tr><tr><td><code>collect_set()</code></td><td>Collects unique values i=
nto a set.</td><td><code>collect_set("Employee")</code></td></tr></tbody></=
table>
<hr>
<h2 id=3D"joins"><a class=3D"anchor" aria-hidden=3D"true" tabindex=3D"-1" h=
ref=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#joins"><svg clas=
s=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=3D"1.1" width=3D"1=
6" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D"evenodd" d=3D"M7.7=
75 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01=
-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-=
4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 =
001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.7=
5.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Joins</h2=
>
<h3 id=3D"join-types"><a class=3D"anchor" aria-hidden=3D"true" tabindex=3D"=
-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#join-types"=
><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=3D"1.1" =
width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D"evenodd"=
 d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.=
5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 =
0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0=
 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.=
25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a=
><strong>Join Types</strong></h3>













































<table><thead><tr><th><strong>Join Type</strong></th><th><strong>Syntax</st=
rong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>=
<strong>inner</strong></td><td><code>how=3D"inner"</code></td><td>Returns m=
atching rows from both DataFrames based on the join condition.</td></tr><tr=
><td><strong>outer</strong> (full)</td><td><code>how=3D"outer</code></td><t=
d>Returns all rows, with <code>NULL</code> where no match is found in eithe=
r DataFrame.</td></tr><tr><td><strong>left</strong> (left_outer)</td><td><c=
ode>how=3D"left"</code></td><td>Returns all rows from the left DataFrame, w=
ith <code>NULL</code> for unmatched rows in the right.</td></tr><tr><td><st=
rong>right</strong> (right_outer)</td><td><code>how=3D"right"</code></td><t=
d>Returns all rows from the right DataFrame, with <code>NULL</code> for unm=
atched rows in the left.</td></tr><tr><td><strong>left_semi</strong></td><t=
d><code>how=3D"left_semi"</code></td><td>This is just an inner join of the =
two DataFrames, but only returns columns of left DataFrame.</td></tr><tr><t=
d><strong>left_anti</strong></td><td><code>how=3D"left_anti"</code></td><td=
>Returns rows from the left DataFrame that do not have a match in the right=
.</td></tr><tr><td><strong>cross</strong></td><td><code>df1.crossJoin(df2)<=
/code></td><td>Returns the Cartesian product of rows from both DataFrames (=
no join condition).</td></tr></tbody></table>
<h3 id=3D"basic-syntax"><a class=3D"anchor" aria-hidden=3D"true" tabindex=
=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#basic-s=
yntax"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=3D=
"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D"ev=
enodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-=
2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.=
5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 01=
2.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4=
.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></s=
vg></a>Basic Syntax</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># Basic Join</sp=
an>
</span><span class=3D"code-line">df1<span class=3D"token punctuation">.</sp=
an>join<span class=3D"token punctuation">(</span>df2<span class=3D"token pu=
nctuation">,</span> on<span class=3D"token operator">=3D</span><span class=
=3D"token string">"id"</span><span class=3D"token punctuation">,</span> how=
<span class=3D"token operator">=3D</span><span class=3D"token string">"inne=
r"</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Join on Mu=
ltiple Columns</span>
</span><span class=3D"code-line">df1<span class=3D"token punctuation">.</sp=
an>join<span class=3D"token punctuation">(</span>df2<span class=3D"token pu=
nctuation">,</span> on<span class=3D"token operator">=3D</span><span class=
=3D"token punctuation">[</span><span class=3D"token string">"col1"</span><s=
pan class=3D"token punctuation">,</span> <span class=3D"token string">"col2=
"</span><span class=3D"token punctuation">]</span><span class=3D"token punc=
tuation">,</span> how<span class=3D"token operator">=3D</span><span class=
=3D"token string">"left"</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Conditiona=
l Join</span>
</span><span class=3D"code-line">df1<span class=3D"token punctuation">.</sp=
an>join<span class=3D"token punctuation">(</span>df2<span class=3D"token pu=
nctuation">,</span> <span class=3D"token punctuation">(</span>df1<span clas=
s=3D"token punctuation">.</span><span class=3D"token builtin">id</span> <sp=
an class=3D"token operator">=3D=3D</span> df2<span class=3D"token punctuati=
on">.</span><span class=3D"token builtin">id</span><span class=3D"token pun=
ctuation">)</span> <span class=3D"token operator">&amp;</span> <span class=
=3D"token punctuation">(</span>df2<span class=3D"token punctuation">.</span=
>city <span class=3D"token operator">=3D=3D</span> <span class=3D"token str=
ing">"New York"</span><span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">,</span> how<span class=3D"token operator">=3D</span=
><span class=3D"token string">"inner"</span><span class=3D"token punctuatio=
n">)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Multiple j=
oin conditions require parentheses around each condition</span>
</span><span class=3D"code-line">joined_df <span class=3D"token operator">=
=3D</span> sales_df<span class=3D"token punctuation">.</span>join<span clas=
s=3D"token punctuation">(</span>
</span><span class=3D"code-line">    customers_df<span class=3D"token punct=
uation">,</span>
</span><span class=3D"code-line">    <span class=3D"token punctuation">(</s=
pan>sales_df<span class=3D"token punctuation">[</span><span class=3D"token =
string">"customer_id"</span><span class=3D"token punctuation">]</span> <spa=
n class=3D"token operator">=3D=3D</span> customers_df<span class=3D"token p=
unctuation">[</span><span class=3D"token string">"customer_id"</span><span =
class=3D"token punctuation">]</span><span class=3D"token punctuation">)</sp=
an> <span class=3D"token operator">&amp;</span> <span class=3D"token punctu=
ation">(</span>sales_df<span class=3D"token punctuation">[</span><span clas=
s=3D"token string">"region"</span><span class=3D"token punctuation">]</span=
> <span class=3D"token operator">=3D=3D</span> customers_df<span class=3D"t=
oken punctuation">[</span><span class=3D"token string">"region"</span><span=
 class=3D"token punctuation">]</span><span class=3D"token punctuation">)</s=
pan><span class=3D"token punctuation">,</span>
</span><span class=3D"code-line">    <span class=3D"token string">"inner"</=
span>
</span><span class=3D"code-line"><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Select ALL=
 columns from df1, and SOME columns from df2 (useful for left joins)</span>
</span><span class=3D"code-line">result <span class=3D"token operator">=3D<=
/span> df1<span class=3D"token punctuation">.</span>join<span class=3D"toke=
n punctuation">(</span>df2<span class=3D"token punctuation">,</span> on<spa=
n class=3D"token operator">=3D</span><span class=3D"token string">"id"</spa=
n><span class=3D"token punctuation">,</span> how<span class=3D"token operat=
or">=3D</span><span class=3D"token string">"left"</span><span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">.</span>select<spa=
n class=3D"token punctuation">(</span>df1<span class=3D"token punctuation">=
[</span><span class=3D"token string">"*"</span><span class=3D"token punctua=
tion">]</span><span class=3D"token punctuation">,</span> df2<span class=3D"=
token punctuation">[</span><span class=3D"token string">"state"</span><span=
 class=3D"token punctuation">]</span> <span class=3D"token punctuation">,</=
span> df2<span class=3D"token punctuation">[</span><span class=3D"token str=
ing">"town"</span><span class=3D"token punctuation">]</span><span class=3D"=
token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Broadcast =
Join for Small DataFrames</span>
</span><span class=3D"code-line"><span class=3D"token keyword">from</span> =
pyspark<span class=3D"token punctuation">.</span>sql<span class=3D"token pu=
nctuation">.</span>functions <span class=3D"token keyword">import</span> br=
oadcast
</span><span class=3D"code-line">df1<span class=3D"token punctuation">.</sp=
an>join<span class=3D"token punctuation">(</span>broadcast<span class=3D"to=
ken punctuation">(</span>df2<span class=3D"token punctuation">)</span><span=
 class=3D"token punctuation">,</span> on<span class=3D"token operator">=3D<=
/span><span class=3D"token string">"id"</span><span class=3D"token punctuat=
ion">,</span> how<span class=3D"token operator">=3D</span><span class=3D"to=
ken string">"inner"</span><span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# Basic Join
df1.join(df2, on=3D&quot;id&quot;, how=3D&quot;inner&quot;)

# Join on Multiple Columns
df1.join(df2, on=3D[&quot;col1&quot;, &quot;col2&quot;], how=3D&quot;left&q=
uot;)

# Conditional Join
df1.join(df2, (df1.id =3D=3D df2.id) &amp; (df2.city =3D=3D &quot;New York&=
quot;), how=3D&quot;inner&quot;)
# Multiple join conditions require parentheses around each condition
joined_df =3D sales_df.join(
    customers_df,
    (sales_df[&quot;customer_id&quot;] =3D=3D customers_df[&quot;customer_i=
d&quot;]) &amp; (sales_df[&quot;region&quot;] =3D=3D customers_df[&quot;reg=
ion&quot;]),
    &quot;inner&quot;
)

# Select ALL columns from df1, and SOME columns from df2 (useful for left j=
oins)
result =3D df1.join(df2, on=3D&quot;id&quot;, how=3D&quot;left&quot;).selec=
t(df1[&quot;*&quot;], df2[&quot;state&quot;] , df2[&quot;town&quot;])

# Broadcast Join for Small DataFrames
from pyspark.sql.functions import broadcast
df1.join(broadcast(df2), on=3D&quot;id&quot;, how=3D&quot;inner&quot;)
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<hr>
<h2 id=3D"date-and-time-functions"><a class=3D"anchor" aria-hidden=3D"true"=
 tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-shee=
t#date-and-time-functions"><svg class=3D"octicon octicon-link" viewBox=3D"0=
 0 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><=
path fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25=
a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0=
 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2=
.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.=
5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01=
-2.83 0z"></path></svg></a>Date and Time Functions</h2>
<h3 id=3D"string-to-date-format"><a class=3D"anchor" aria-hidden=3D"true" t=
abindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#=
string-to-date-format"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 1=
6 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path=
 fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2=
 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004=
.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l=
2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.=
5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.8=
3 0z"></path></svg></a>String to Date Format</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>functions <span class=3D"token keyword">import</span> to_dat=
e
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 1. Convert=
 string date to date type (using "yyyy-MM-dd")</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25-01-25"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 20=
25-01-25 (as a Date type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"date_parsed1"</span><=
span class=3D"token punctuation">,</span> to_date<span class=3D"token punct=
uation">(</span><span class=3D"token string">"date_str"</span><span class=
=3D"token punctuation">,</span> <span class=3D"token string">"yyyy-MM-dd"</=
span><span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Convert=
 string date to date type (using "dd-MMM-yyyy")</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "25=
-Jan-2025"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 20=
25-01-25 (as a Date type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"date_parsed2"</span><=
span class=3D"token punctuation">,</span> to_date<span class=3D"token punct=
uation">(</span><span class=3D"token string">"date_str"</span><span class=
=3D"token punctuation">,</span> <span class=3D"token string">"dd-MMM-yyyy"<=
/span><span class=3D"token punctuation">)</span><span class=3D"token punctu=
ation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Convert=
 string date to date type (using "MM/dd/yyyy")</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "01=
/25/2025"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 20=
25-01-25 (as a Date type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"date_parsed3"</span><=
span class=3D"token punctuation">,</span> to_date<span class=3D"token punct=
uation">(</span><span class=3D"token string">"date_str"</span><span class=
=3D"token punctuation">,</span> <span class=3D"token string">"MM/dd/yyyy"</=
span><span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Convert=
 string date to date type (using "yyyy.MM.dd")</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25.01.25"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 20=
25-01-25 (as a Date type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"date_parsed4"</span><=
span class=3D"token punctuation">,</span> to_date<span class=3D"token punct=
uation">(</span><span class=3D"token string">"date_str"</span><span class=
=3D"token punctuation">,</span> <span class=3D"token string">"yyyy.MM.dd"</=
span><span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.functions=
 import to_date

# 1. Convert string date to date type (using &quot;yyyy-MM-dd&quot;)
# Input: &quot;2025-01-25&quot;
# Output: 2025-01-25 (as a Date type)
df =3D df.withColumn(&quot;date_parsed1&quot;, to_date(&quot;date_str&quot;=
, &quot;yyyy-MM-dd&quot;))

# 2. Convert string date to date type (using &quot;dd-MMM-yyyy&quot;)
# Input: &quot;25-Jan-2025&quot;
# Output: 2025-01-25 (as a Date type)
df =3D df.withColumn(&quot;date_parsed2&quot;, to_date(&quot;date_str&quot;=
, &quot;dd-MMM-yyyy&quot;))

# 3. Convert string date to date type (using &quot;MM/dd/yyyy&quot;)
# Input: &quot;01/25/2025&quot;
# Output: 2025-01-25 (as a Date type)
df =3D df.withColumn(&quot;date_parsed3&quot;, to_date(&quot;date_str&quot;=
, &quot;MM/dd/yyyy&quot;))

# 4. Convert string date to date type (using &quot;yyyy.MM.dd&quot;)
# Input: &quot;2025.01.25&quot;
# Output: 2025-01-25 (as a Date type)
df =3D df.withColumn(&quot;date_parsed4&quot;, to_date(&quot;date_str&quot;=
, &quot;yyyy.MM.dd&quot;)
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"string-to-timestamp-format"><a class=3D"anchor" aria-hidden=3D"tr=
ue" tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-s=
heet#string-to-timestamp-format"><svg class=3D"octicon octicon-link" viewBo=
x=3D"0 0 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"t=
rue"><path fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.2=
5-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5=
 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0=
 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-=
2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 =
2 0 01-2.83 0z"></path></svg></a>String to Timestamp Format</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>functions <span class=3D"token keyword">import</span> to_tim=
estamp
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 1. Convert=
 string timestamp to timestamp type (using "yyyy-MM-dd HH:mm:ss")</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25-01-25 10:15:00"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 20=
25-01-25 10:15:00 (as a Timestamp type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"timestamp_parsed1"</s=
pan><span class=3D"token punctuation">,</span> to_timestamp<span class=3D"t=
oken punctuation">(</span><span class=3D"token string">"timestamp_str"</spa=
n><span class=3D"token punctuation">,</span> <span class=3D"token string">"=
yyyy-MM-dd HH:mm:ss"</span><span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Convert=
 string timestamp to timestamp type (using "dd-MMM-yyyy HH:mm:ss")</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "25=
-Jan-2025 10:15:00"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 20=
25-01-25 10:15:00 (as a Timestamp type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"timestamp_parsed2"</s=
pan><span class=3D"token punctuation">,</span> to_timestamp<span class=3D"t=
oken punctuation">(</span><span class=3D"token string">"timestamp_str"</spa=
n><span class=3D"token punctuation">,</span> <span class=3D"token string">"=
dd-MMM-yyyy HH:mm:ss"</span><span class=3D"token punctuation">)</span><span=
 class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Convert=
 string timestamp to timestamp type (using "MM/dd/yyyy HH:mm:ss")</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "01=
/25/2025 10:15:00"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 20=
25-01-25 10:15:00 (as a Timestamp type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"timestamp_parsed3"</s=
pan><span class=3D"token punctuation">,</span> to_timestamp<span class=3D"t=
oken punctuation">(</span><span class=3D"token string">"timestamp_str"</spa=
n><span class=3D"token punctuation">,</span> <span class=3D"token string">"=
MM/dd/yyyy HH:mm:ss"</span><span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Convert=
 string timestamp to timestamp type (using "yyyy.MM.dd HH:mm:ss")</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25.01.25 10:15:00"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 20=
25-01-25 10:15:00 (as a Timestamp type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"timestamp_parsed4"</s=
pan><span class=3D"token punctuation">,</span> to_timestamp<span class=3D"t=
oken punctuation">(</span><span class=3D"token string">"timestamp_str"</spa=
n><span class=3D"token punctuation">,</span> <span class=3D"token string">"=
yyyy.MM.dd HH:mm:ss"</span><span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.functions=
 import to_timestamp

# 1. Convert string timestamp to timestamp type (using &quot;yyyy-MM-dd HH:=
mm:ss&quot;)
# Input: &quot;2025-01-25 10:15:00&quot;
# Output: 2025-01-25 10:15:00 (as a Timestamp type)
df =3D df.withColumn(&quot;timestamp_parsed1&quot;, to_timestamp(&quot;time=
stamp_str&quot;, &quot;yyyy-MM-dd HH:mm:ss&quot;))

# 2. Convert string timestamp to timestamp type (using &quot;dd-MMM-yyyy HH=
:mm:ss&quot;)
# Input: &quot;25-Jan-2025 10:15:00&quot;
# Output: 2025-01-25 10:15:00 (as a Timestamp type)
df =3D df.withColumn(&quot;timestamp_parsed2&quot;, to_timestamp(&quot;time=
stamp_str&quot;, &quot;dd-MMM-yyyy HH:mm:ss&quot;))

# 3. Convert string timestamp to timestamp type (using &quot;MM/dd/yyyy HH:=
mm:ss&quot;)
# Input: &quot;01/25/2025 10:15:00&quot;
# Output: 2025-01-25 10:15:00 (as a Timestamp type)
df =3D df.withColumn(&quot;timestamp_parsed3&quot;, to_timestamp(&quot;time=
stamp_str&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;))

# 4. Convert string timestamp to timestamp type (using &quot;yyyy.MM.dd HH:=
mm:ss&quot;)
# Input: &quot;2025.01.25 10:15:00&quot;
# Output: 2025-01-25 10:15:00 (as a Timestamp type)
df =3D df.withColumn(&quot;timestamp_parsed4&quot;, to_timestamp(&quot;time=
stamp_str&quot;, &quot;yyyy.MM.dd HH:mm:ss&quot;))
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"date-to-string-format"><a class=3D"anchor" aria-hidden=3D"true" t=
abindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#=
date-to-string-format"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 1=
6 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path=
 fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2=
 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004=
.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l=
2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.=
5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.8=
3 0z"></path></svg></a>Date to String Format</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>functions <span class=3D"token keyword">import</span> date_f=
ormat
</span><span class=3D"code-line"><span class=3D"token comment"># 1. Format =
date as "yyyy-MM-dd"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 202=
5-01-25 (Date Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "2=
025-01-25" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_date1"</spa=
n><span class=3D"token punctuation">,</span> date_format<span class=3D"toke=
n punctuation">(</span><span class=3D"token string">"date_parsed"</span><sp=
an class=3D"token punctuation">,</span> <span class=3D"token string">"yyyy-=
MM-dd"</span><span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Format =
date as "dd-MMM-yyyy"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 202=
5-01-25 (Date Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "2=
5-Jan-2025" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_date2"</spa=
n><span class=3D"token punctuation">,</span> date_format<span class=3D"toke=
n punctuation">(</span><span class=3D"token string">"date_parsed"</span><sp=
an class=3D"token punctuation">,</span> <span class=3D"token string">"dd-MM=
M-yyyy"</span><span class=3D"token punctuation">)</span><span class=3D"toke=
n punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Format =
date as "MM/dd/yyyy"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 202=
5-01-25 (Date Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "0=
1/25/2025" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_date3"</spa=
n><span class=3D"token punctuation">,</span> date_format<span class=3D"toke=
n punctuation">(</span><span class=3D"token string">"date_parsed"</span><sp=
an class=3D"token punctuation">,</span> <span class=3D"token string">"MM/dd=
/yyyy"</span><span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Format =
date as "dd/MM/yyyy"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 202=
5-01-25 (Date Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "2=
5/01/2025" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_date4"</spa=
n><span class=3D"token punctuation">,</span> date_format<span class=3D"toke=
n punctuation">(</span><span class=3D"token string">"date_parsed"</span><sp=
an class=3D"token punctuation">,</span> <span class=3D"token string">"dd/MM=
/yyyy"</span><span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 5. Format =
date as "MMMM dd, yyyy"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 202=
5-01-25 (Date Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "J=
anuary 25, 2025" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_date5"</spa=
n><span class=3D"token punctuation">,</span> date_format<span class=3D"toke=
n punctuation">(</span><span class=3D"token string">"date_parsed"</span><sp=
an class=3D"token punctuation">,</span> <span class=3D"token string">"MMMM =
dd, yyyy"</span><span class=3D"token punctuation">)</span><span class=3D"to=
ken punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 6. Format =
date as "EEE, dd MMM yyyy"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 202=
5-01-25 (Date Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "S=
un, 25 Jan 2025" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_date6"</spa=
n><span class=3D"token punctuation">,</span> date_format<span class=3D"toke=
n punctuation">(</span><span class=3D"token string">"date_parsed"</span><sp=
an class=3D"token punctuation">,</span> <span class=3D"token string">"EEE, =
dd MMM yyyy"</span><span class=3D"token punctuation">)</span><span class=3D=
"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 7. Format =
date as "yyyy/MM/dd"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 202=
5-01-25 (Date Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "2=
025/01/25" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_date7"</spa=
n><span class=3D"token punctuation">,</span> date_format<span class=3D"toke=
n punctuation">(</span><span class=3D"token string">"date_parsed"</span><sp=
an class=3D"token punctuation">,</span> <span class=3D"token string">"yyyy/=
MM/dd"</span><span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 8. Format =
date as "yyyy.MM.dd"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 202=
5-01-25 (Date Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "2=
025.01.25" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_date8"</spa=
n><span class=3D"token punctuation">,</span> date_format<span class=3D"toke=
n punctuation">(</span><span class=3D"token string">"date_parsed"</span><sp=
an class=3D"token punctuation">,</span> <span class=3D"token string">"yyyy.=
MM.dd"</span><span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.functions=
 import date_format
# 1. Format date as &quot;yyyy-MM-dd&quot;
# Input: 2025-01-25 (Date Type)
# Output: &quot;2025-01-25&quot; (String Type)
df =3D df.withColumn(&quot;formatted_date1&quot;, date_format(&quot;date_pa=
rsed&quot;, &quot;yyyy-MM-dd&quot;))

# 2. Format date as &quot;dd-MMM-yyyy&quot;
# Input: 2025-01-25 (Date Type)
# Output: &quot;25-Jan-2025&quot; (String Type)
df =3D df.withColumn(&quot;formatted_date2&quot;, date_format(&quot;date_pa=
rsed&quot;, &quot;dd-MMM-yyyy&quot;))

# 3. Format date as &quot;MM/dd/yyyy&quot;
# Input: 2025-01-25 (Date Type)
# Output: &quot;01/25/2025&quot; (String Type)
df =3D df.withColumn(&quot;formatted_date3&quot;, date_format(&quot;date_pa=
rsed&quot;, &quot;MM/dd/yyyy&quot;))

# 4. Format date as &quot;dd/MM/yyyy&quot;
# Input: 2025-01-25 (Date Type)
# Output: &quot;25/01/2025&quot; (String Type)
df =3D df.withColumn(&quot;formatted_date4&quot;, date_format(&quot;date_pa=
rsed&quot;, &quot;dd/MM/yyyy&quot;))

# 5. Format date as &quot;MMMM dd, yyyy&quot;
# Input: 2025-01-25 (Date Type)
# Output: &quot;January 25, 2025&quot; (String Type)
df =3D df.withColumn(&quot;formatted_date5&quot;, date_format(&quot;date_pa=
rsed&quot;, &quot;MMMM dd, yyyy&quot;))

# 6. Format date as &quot;EEE, dd MMM yyyy&quot;
# Input: 2025-01-25 (Date Type)
# Output: &quot;Sun, 25 Jan 2025&quot; (String Type)
df =3D df.withColumn(&quot;formatted_date6&quot;, date_format(&quot;date_pa=
rsed&quot;, &quot;EEE, dd MMM yyyy&quot;))

# 7. Format date as &quot;yyyy/MM/dd&quot;
# Input: 2025-01-25 (Date Type)
# Output: &quot;2025/01/25&quot; (String Type)
df =3D df.withColumn(&quot;formatted_date7&quot;, date_format(&quot;date_pa=
rsed&quot;, &quot;yyyy/MM/dd&quot;))

# 8. Format date as &quot;yyyy.MM.dd&quot;
# Input: 2025-01-25 (Date Type)
# Output: &quot;2025.01.25&quot; (String Type)
df =3D df.withColumn(&quot;formatted_date8&quot;, date_format(&quot;date_pa=
rsed&quot;, &quot;yyyy.MM.dd&quot;))
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"timestamp-to-string-format"><a class=3D"anchor" aria-hidden=3D"tr=
ue" tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-s=
heet#timestamp-to-string-format"><svg class=3D"octicon octicon-link" viewBo=
x=3D"0 0 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"t=
rue"><path fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.2=
5-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5=
 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0=
 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-=
2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 =
2 0 01-2.83 0z"></path></svg></a>Timestamp to String Format</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>functions <span class=3D"token keyword">import</span> date_f=
ormat
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 1. Format =
timestamp as "yyyy-MM-dd HH:mm:ss"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25-01-25 10:15:00" (Timestamp Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "2=
025-01-25 10:15:00" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_timestamp1"=
</span><span class=3D"token punctuation">,</span> date_format<span class=3D=
"token punctuation">(</span><span class=3D"token string">"timestamp"</span>=
<span class=3D"token punctuation">,</span> <span class=3D"token string">"yy=
yy-MM-dd HH:mm:ss"</span><span class=3D"token punctuation">)</span><span cl=
ass=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Format =
timestamp as "dd-MMM-yyyy HH:mm:ss"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25-01-25 10:15:00" (Timestamp Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "2=
5-Jan-2025 10:15:00" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_timestamp2"=
</span><span class=3D"token punctuation">,</span> date_format<span class=3D=
"token punctuation">(</span><span class=3D"token string">"timestamp"</span>=
<span class=3D"token punctuation">,</span> <span class=3D"token string">"dd=
-MMM-yyyy HH:mm:ss"</span><span class=3D"token punctuation">)</span><span c=
lass=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Format =
timestamp as "MM/dd/yyyy HH:mm:ss"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25-01-25 10:15:00" (Timestamp Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "0=
1/25/2025 10:15:00" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_timestamp3"=
</span><span class=3D"token punctuation">,</span> date_format<span class=3D=
"token punctuation">(</span><span class=3D"token string">"timestamp"</span>=
<span class=3D"token punctuation">,</span> <span class=3D"token string">"MM=
/dd/yyyy HH:mm:ss"</span><span class=3D"token punctuation">)</span><span cl=
ass=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Format =
timestamp as "dd/MM/yyyy HH:mm:ss"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25-01-25 10:15:00" (Timestamp Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "2=
5/01/2025 10:15:00" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_timestamp4"=
</span><span class=3D"token punctuation">,</span> date_format<span class=3D=
"token punctuation">(</span><span class=3D"token string">"timestamp"</span>=
<span class=3D"token punctuation">,</span> <span class=3D"token string">"dd=
/MM/yyyy HH:mm:ss"</span><span class=3D"token punctuation">)</span><span cl=
ass=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 5. Format =
timestamp as "MMMM dd, yyyy HH:mm:ss"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25-01-25 10:15:00" (Timestamp Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "J=
anuary 25, 2025 10:15:00" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_timestamp5"=
</span><span class=3D"token punctuation">,</span> date_format<span class=3D=
"token punctuation">(</span><span class=3D"token string">"timestamp"</span>=
<span class=3D"token punctuation">,</span> <span class=3D"token string">"MM=
MM dd, yyyy HH:mm:ss"</span><span class=3D"token punctuation">)</span><span=
 class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 6. Format =
timestamp as "EEE, dd MMM yyyy HH:mm:ss"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25-01-25 10:15:00" (Timestamp Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "S=
un, 25 Jan 2025 10:15:00" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_timestamp6"=
</span><span class=3D"token punctuation">,</span> date_format<span class=3D=
"token punctuation">(</span><span class=3D"token string">"timestamp"</span>=
<span class=3D"token punctuation">,</span> <span class=3D"token string">"EE=
E, dd MMM yyyy HH:mm:ss"</span><span class=3D"token punctuation">)</span><s=
pan class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 7. Format =
timestamp as "yyyy/MM/dd HH:mm:ss"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25-01-25 10:15:00" (Timestamp Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "2=
025/01/25 10:15:00" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_timestamp7"=
</span><span class=3D"token punctuation">,</span> date_format<span class=3D=
"token punctuation">(</span><span class=3D"token string">"timestamp"</span>=
<span class=3D"token punctuation">,</span> <span class=3D"token string">"yy=
yy/MM/dd HH:mm:ss"</span><span class=3D"token punctuation">)</span><span cl=
ass=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 8. Format =
timestamp as "yyyy.MM.dd HH:mm:ss"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25-01-25 10:15:00" (Timestamp Type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "2=
025.01.25 10:15:00" (String Type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"formatted_timestamp8"=
</span><span class=3D"token punctuation">,</span> date_format<span class=3D=
"token punctuation">(</span><span class=3D"token string">"timestamp"</span>=
<span class=3D"token punctuation">,</span> <span class=3D"token string">"yy=
yy.MM.dd HH:mm:ss"</span><span class=3D"token punctuation">)</span><span cl=
ass=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Show the r=
esulting DataFrame</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>show<span class=3D"token punctuation">(</span>truncate<span class=3D"toke=
n operator">=3D</span><span class=3D"token boolean">False</span><span class=
=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.functions=
 import date_format

# 1. Format timestamp as &quot;yyyy-MM-dd HH:mm:ss&quot;
# Input: &quot;2025-01-25 10:15:00&quot; (Timestamp Type)
# Output: &quot;2025-01-25 10:15:00&quot; (String Type)
df =3D df.withColumn(&quot;formatted_timestamp1&quot;, date_format(&quot;ti=
mestamp&quot;, &quot;yyyy-MM-dd HH:mm:ss&quot;))

# 2. Format timestamp as &quot;dd-MMM-yyyy HH:mm:ss&quot;
# Input: &quot;2025-01-25 10:15:00&quot; (Timestamp Type)
# Output: &quot;25-Jan-2025 10:15:00&quot; (String Type)
df =3D df.withColumn(&quot;formatted_timestamp2&quot;, date_format(&quot;ti=
mestamp&quot;, &quot;dd-MMM-yyyy HH:mm:ss&quot;))

# 3. Format timestamp as &quot;MM/dd/yyyy HH:mm:ss&quot;
# Input: &quot;2025-01-25 10:15:00&quot; (Timestamp Type)
# Output: &quot;01/25/2025 10:15:00&quot; (String Type)
df =3D df.withColumn(&quot;formatted_timestamp3&quot;, date_format(&quot;ti=
mestamp&quot;, &quot;MM/dd/yyyy HH:mm:ss&quot;))

# 4. Format timestamp as &quot;dd/MM/yyyy HH:mm:ss&quot;
# Input: &quot;2025-01-25 10:15:00&quot; (Timestamp Type)
# Output: &quot;25/01/2025 10:15:00&quot; (String Type)
df =3D df.withColumn(&quot;formatted_timestamp4&quot;, date_format(&quot;ti=
mestamp&quot;, &quot;dd/MM/yyyy HH:mm:ss&quot;))

# 5. Format timestamp as &quot;MMMM dd, yyyy HH:mm:ss&quot;
# Input: &quot;2025-01-25 10:15:00&quot; (Timestamp Type)
# Output: &quot;January 25, 2025 10:15:00&quot; (String Type)
df =3D df.withColumn(&quot;formatted_timestamp5&quot;, date_format(&quot;ti=
mestamp&quot;, &quot;MMMM dd, yyyy HH:mm:ss&quot;))

# 6. Format timestamp as &quot;EEE, dd MMM yyyy HH:mm:ss&quot;
# Input: &quot;2025-01-25 10:15:00&quot; (Timestamp Type)
# Output: &quot;Sun, 25 Jan 2025 10:15:00&quot; (String Type)
df =3D df.withColumn(&quot;formatted_timestamp6&quot;, date_format(&quot;ti=
mestamp&quot;, &quot;EEE, dd MMM yyyy HH:mm:ss&quot;))

# 7. Format timestamp as &quot;yyyy/MM/dd HH:mm:ss&quot;
# Input: &quot;2025-01-25 10:15:00&quot; (Timestamp Type)
# Output: &quot;2025/01/25 10:15:00&quot; (String Type)
df =3D df.withColumn(&quot;formatted_timestamp7&quot;, date_format(&quot;ti=
mestamp&quot;, &quot;yyyy/MM/dd HH:mm:ss&quot;))

# 8. Format timestamp as &quot;yyyy.MM.dd HH:mm:ss&quot;
# Input: &quot;2025-01-25 10:15:00&quot; (Timestamp Type)
# Output: &quot;2025.01.25 10:15:00&quot; (String Type)
df =3D df.withColumn(&quot;formatted_timestamp8&quot;, date_format(&quot;ti=
mestamp&quot;, &quot;yyyy.MM.dd HH:mm:ss&quot;))

# Show the resulting DataFrame
df.show(truncate=3DFalse)

"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"date-functions"><a class=3D"anchor" aria-hidden=3D"true" tabindex=
=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#date-fu=
nctions"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=
=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D=
"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.8=
3l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5=
a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0=
 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.9=
5 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path>=
</svg></a>Date Functions</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql <span class=3D"token keywo=
rd">import</span> SparkSession
</span><span class=3D"code-line"><span class=3D"token keyword">from</span> =
pyspark<span class=3D"token punctuation">.</span>sql<span class=3D"token pu=
nctuation">.</span>functions <span class=3D"token keyword">import</span> <s=
pan class=3D"token punctuation">(</span>
</span><span class=3D"code-line">    current_date<span class=3D"token punct=
uation">,</span> date_add<span class=3D"token punctuation">,</span> date_su=
b<span class=3D"token punctuation">,</span> datediff<span class=3D"token pu=
nctuation">,</span> add_months<span class=3D"token punctuation">,</span>
</span><span class=3D"code-line">    trunc<span class=3D"token punctuation"=
>,</span> date_format<span class=3D"token punctuation">,</span> year<span c=
lass=3D"token punctuation">,</span> month<span class=3D"token punctuation">=
,</span> dayofmonth<span class=3D"token punctuation">,</span> next_day<span=
 class=3D"token punctuation">,</span> last_day
</span><span class=3D"code-line"><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 1. Current=
 date</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5" -&gt; Current system date (e.g., "2025-01-25")</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"current_date"</span><=
span class=3D"token punctuation">,</span> current_date<span class=3D"token =
punctuation">(</span><span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Add 10 =
days to the date</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5" -&gt; "2025-02-04"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"date_plus_10"</span><=
span class=3D"token punctuation">,</span> date_add<span class=3D"token punc=
tuation">(</span><span class=3D"token string">"date"</span><span class=3D"t=
oken punctuation">,</span> <span class=3D"token number">10</span><span clas=
s=3D"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Subtrac=
t 5 days from the date</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5" -&gt; "2025-01-20"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"date_minus_5"</span><=
span class=3D"token punctuation">,</span> date_sub<span class=3D"token punc=
tuation">(</span><span class=3D"token string">"date"</span><span class=3D"t=
oken punctuation">,</span> <span class=3D"token number">5</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Differe=
nce in days from current date</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5" -&gt; Number of days difference from today (e.g., "-5")</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"days_diff"</span><spa=
n class=3D"token punctuation">,</span> datediff<span class=3D"token punctua=
tion">(</span>current_date<span class=3D"token punctuation">(</span><span c=
lass=3D"token punctuation">)</span><span class=3D"token punctuation">,</spa=
n> <span class=3D"token string">"date"</span><span class=3D"token punctuati=
on">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 5. Add 2 m=
onths to the date</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5" -&gt; "2025-03-25"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"add_months"</span><sp=
an class=3D"token punctuation">,</span> add_months<span class=3D"token punc=
tuation">(</span><span class=3D"token string">"date"</span><span class=3D"t=
oken punctuation">,</span> <span class=3D"token number">2</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 6. Extract=
 year</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5" -&gt; "2025"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"year"</span><span cla=
ss=3D"token punctuation">,</span> year<span class=3D"token punctuation">(</=
span><span class=3D"token string">"date"</span><span class=3D"token punctua=
tion">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 7. Extract=
 month</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5" -&gt; "1"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"month"</span><span cl=
ass=3D"token punctuation">,</span> month<span class=3D"token punctuation">(=
</span><span class=3D"token string">"date"</span><span class=3D"token punct=
uation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 8. Extract=
 day of the month</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5" -&gt; "25"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"day"</span><span clas=
s=3D"token punctuation">,</span> dayofmonth<span class=3D"token punctuation=
">(</span><span class=3D"token string">"date"</span><span class=3D"token pu=
nctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 9. Extract=
 day of the week (1 =3D Sunday, 7 =3D Saturday)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25-01-25"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 7 =
(Saturday)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"day_of_week"</span><s=
pan class=3D"token punctuation">,</span> dayofweek<span class=3D"token punc=
tuation">(</span><span class=3D"token string">"date"</span><span class=3D"t=
oken punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 10. Extrac=
t week of the year</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "20=
25-01-25"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 4 =
(Week 4 of the year)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"week_of_year"</span><=
span class=3D"token punctuation">,</span> weekofyear<span class=3D"token pu=
nctuation">(</span><span class=3D"token string">"date"</span><span class=3D=
"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 11. Trunca=
te to the first day of the month</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5" -&gt; "2025-01-01"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"trunc_month"</span><s=
pan class=3D"token punctuation">,</span> trunc<span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"date"</span><span class=3D"token=
 punctuation">,</span> <span class=3D"token string">"MM"</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 12. Next s=
pecified day of the week</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5" -&gt; Next Monday (e.g., "2025-01-27")</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"next_monday"</span><s=
pan class=3D"token punctuation">,</span> next_day<span class=3D"token punct=
uation">(</span><span class=3D"token string">"date"</span><span class=3D"to=
ken punctuation">,</span> <span class=3D"token string">"Monday"</span><span=
 class=3D"token punctuation">)</span><span class=3D"token punctuation">)</s=
pan>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 13. Last d=
ay of the month</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5" -&gt; "2025-01-31"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"last_day_month"</span=
><span class=3D"token punctuation">,</span> last_day<span class=3D"token pu=
nctuation">(</span><span class=3D"token string">"date"</span><span class=3D=
"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql import Sp=
arkSession
from pyspark.sql.functions import (
    current_date, date_add, date_sub, datediff, add_months,
    trunc, date_format, year, month, dayofmonth, next_day, last_day
)

# 1. Current date
# &quot;2025-01-25&quot; -&gt; Current system date (e.g., &quot;2025-01-25&=
quot;)
df =3D df.withColumn(&quot;current_date&quot;, current_date())

# 2. Add 10 days to the date
# &quot;2025-01-25&quot; -&gt; &quot;2025-02-04&quot;
df =3D df.withColumn(&quot;date_plus_10&quot;, date_add(&quot;date&quot;, 1=
0))

# 3. Subtract 5 days from the date
# &quot;2025-01-25&quot; -&gt; &quot;2025-01-20&quot;
df =3D df.withColumn(&quot;date_minus_5&quot;, date_sub(&quot;date&quot;, 5=
))

# 4. Difference in days from current date
# &quot;2025-01-25&quot; -&gt; Number of days difference from today (e.g., =
&quot;-5&quot;)
df =3D df.withColumn(&quot;days_diff&quot;, datediff(current_date(), &quot;=
date&quot;))

# 5. Add 2 months to the date
# &quot;2025-01-25&quot; -&gt; &quot;2025-03-25&quot;
df =3D df.withColumn(&quot;add_months&quot;, add_months(&quot;date&quot;, 2=
))

# 6. Extract year
# &quot;2025-01-25&quot; -&gt; &quot;2025&quot;
df =3D df.withColumn(&quot;year&quot;, year(&quot;date&quot;))

# 7. Extract month
# &quot;2025-01-25&quot; -&gt; &quot;1&quot;
df =3D df.withColumn(&quot;month&quot;, month(&quot;date&quot;))

# 8. Extract day of the month
# &quot;2025-01-25&quot; -&gt; &quot;25&quot;
df =3D df.withColumn(&quot;day&quot;, dayofmonth(&quot;date&quot;))

# 9. Extract day of the week (1 =3D Sunday, 7 =3D Saturday)
# Input: &quot;2025-01-25&quot;
# Output: 7 (Saturday)
df =3D df.withColumn(&quot;day_of_week&quot;, dayofweek(&quot;date&quot;))

# 10. Extract week of the year
# Input: &quot;2025-01-25&quot;
# Output: 4 (Week 4 of the year)
df =3D df.withColumn(&quot;week_of_year&quot;, weekofyear(&quot;date&quot;)=
)

# 11. Truncate to the first day of the month
# &quot;2025-01-25&quot; -&gt; &quot;2025-01-01&quot;
df =3D df.withColumn(&quot;trunc_month&quot;, trunc(&quot;date&quot;, &quot=
;MM&quot;))

# 12. Next specified day of the week
# &quot;2025-01-25&quot; -&gt; Next Monday (e.g., &quot;2025-01-27&quot;)
df =3D df.withColumn(&quot;next_monday&quot;, next_day(&quot;date&quot;, &q=
uot;Monday&quot;))

# 13. Last day of the month
# &quot;2025-01-25&quot; -&gt; &quot;2025-01-31&quot;
df =3D df.withColumn(&quot;last_day_month&quot;, last_day(&quot;date&quot;)=
)
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"time-functions"><a class=3D"anchor" aria-hidden=3D"true" tabindex=
=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#time-fu=
nctions"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=
=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D=
"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.8=
3l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5=
a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0=
 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.9=
5 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path>=
</svg></a>Time Functions</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql <span class=3D"token keywo=
rd">import</span> SparkSession
</span><span class=3D"code-line"><span class=3D"token keyword">from</span> =
pyspark<span class=3D"token punctuation">.</span>sql<span class=3D"token pu=
nctuation">.</span>functions <span class=3D"token keyword">import</span> <s=
pan class=3D"token punctuation">(</span>
</span><span class=3D"code-line">    current_timestamp<span class=3D"token =
punctuation">,</span> hour<span class=3D"token punctuation">,</span> minute=
<span class=3D"token punctuation">,</span> second<span class=3D"token punct=
uation">,</span> unix_timestamp<span class=3D"token punctuation">,</span> f=
rom_unixtime
</span><span class=3D"code-line"><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 1. Current=
 timestamp</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5 10:15:00" -&gt; Current system timestamp (e.g., "2025-01-25 10:15:00")</s=
pan>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"current_timestamp"</s=
pan><span class=3D"token punctuation">,</span> current_timestamp<span class=
=3D"token punctuation">(</span><span class=3D"token punctuation">)</span><s=
pan class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Extract=
 hour</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5 10:15:00" -&gt; "10"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"hour"</span><span cla=
ss=3D"token punctuation">,</span> hour<span class=3D"token punctuation">(</=
span><span class=3D"token string">"timestamp"</span><span class=3D"token pu=
nctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Extract=
 minute</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5 10:15:00" -&gt; "15"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"minute"</span><span c=
lass=3D"token punctuation">,</span> minute<span class=3D"token punctuation"=
>(</span><span class=3D"token string">"timestamp"</span><span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Extract=
 second</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5 10:15:00" -&gt; "00"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"second"</span><span c=
lass=3D"token punctuation">,</span> second<span class=3D"token punctuation"=
>(</span><span class=3D"token string">"timestamp"</span><span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 5. Convert=
 date to Unix timestamp</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "2025-01-2=
5 10:15:00" -&gt; "1737763200"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"unix_timestamp"</span=
><span class=3D"token punctuation">,</span> unix_timestamp<span class=3D"to=
ken punctuation">(</span><span class=3D"token string">"timestamp"</span><sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">)<=
/span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 6. Convert=
 Unix timestamp to readable date</span>
</span><span class=3D"code-line"><span class=3D"token comment"># "173776320=
0" -&gt; "2025-01-25 10:15:00"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"from_unix"</span><spa=
n class=3D"token punctuation">,</span> from_unixtime<span class=3D"token pu=
nctuation">(</span>unix_timestamp<span class=3D"token punctuation">(</span>=
<span class=3D"token string">"timestamp"</span><span class=3D"token punctua=
tion">)</span><span class=3D"token punctuation">)</span><span class=3D"toke=
n punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql import Sp=
arkSession
from pyspark.sql.functions import (
    current_timestamp, hour, minute, second, unix_timestamp, from_unixtime
)

# 1. Current timestamp
# &quot;2025-01-25 10:15:00&quot; -&gt; Current system timestamp (e.g., &qu=
ot;2025-01-25 10:15:00&quot;)
df =3D df.withColumn(&quot;current_timestamp&quot;, current_timestamp())

# 2. Extract hour
# &quot;2025-01-25 10:15:00&quot; -&gt; &quot;10&quot;
df =3D df.withColumn(&quot;hour&quot;, hour(&quot;timestamp&quot;))

# 3. Extract minute
# &quot;2025-01-25 10:15:00&quot; -&gt; &quot;15&quot;
df =3D df.withColumn(&quot;minute&quot;, minute(&quot;timestamp&quot;))

# 4. Extract second
# &quot;2025-01-25 10:15:00&quot; -&gt; &quot;00&quot;
df =3D df.withColumn(&quot;second&quot;, second(&quot;timestamp&quot;))

# 5. Convert date to Unix timestamp
# &quot;2025-01-25 10:15:00&quot; -&gt; &quot;1737763200&quot;
df =3D df.withColumn(&quot;unix_timestamp&quot;, unix_timestamp(&quot;times=
tamp&quot;))

# 6. Convert Unix timestamp to readable date
# &quot;1737763200&quot; -&gt; &quot;2025-01-25 10:15:00&quot;
df =3D df.withColumn(&quot;from_unix&quot;, from_unixtime(unix_timestamp(&q=
uot;timestamp&quot;)))
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<hr>
<h2 id=3D"math-functions"><a class=3D"anchor" aria-hidden=3D"true" tabindex=
=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#math-fu=
nctions"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=
=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D=
"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.8=
3l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5=
a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0=
 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.9=
5 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path>=
</svg></a>Math Functions</h2>
<h3 id=3D"simple-arithmetic"><a class=3D"anchor" aria-hidden=3D"true" tabin=
dex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#simp=
le-arithmetic"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" ve=
rsion=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-ru=
le=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.8=
3 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.=
5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a=
2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 =
004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></=
path></svg></a>Simple Arithmetic</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># 1. Add two col=
umns</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: col=
1 =3D 10, col2 =3D 5</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 15=
 (col1 + col2)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"sum"</span><span clas=
s=3D"token punctuation">,</span> col<span class=3D"token punctuation">(</sp=
an><span class=3D"token string">"col1"</span><span class=3D"token punctuati=
on">)</span> <span class=3D"token operator">+</span> col<span class=3D"toke=
n punctuation">(</span><span class=3D"token string">"col2"</span><span clas=
s=3D"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Subtrac=
t two columns</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: col=
1 =3D 10, col2 =3D 5</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 5 =
(col1 - col2)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"difference"</span><sp=
an class=3D"token punctuation">,</span> col<span class=3D"token punctuation=
">(</span><span class=3D"token string">"col1"</span><span class=3D"token pu=
nctuation">)</span> <span class=3D"token operator">-</span> col<span class=
=3D"token punctuation">(</span><span class=3D"token string">"col2"</span><s=
pan class=3D"token punctuation">)</span><span class=3D"token punctuation">)=
</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Multipl=
y two columns</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: col=
1 =3D 10, col2 =3D 5</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 50=
 (col1 * col2)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"product"</span><span =
class=3D"token punctuation">,</span> col<span class=3D"token punctuation">(=
</span><span class=3D"token string">"col1"</span><span class=3D"token punct=
uation">)</span> <span class=3D"token operator">*</span> col<span class=3D"=
token punctuation">(</span><span class=3D"token string">"col2"</span><span =
class=3D"token punctuation">)</span><span class=3D"token punctuation">)</sp=
an>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Divide =
two columns</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: col=
1 =3D 10, col2 =3D 5</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 2.=
0 (col1 / col2)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"quotient"</span><span=
 class=3D"token punctuation">,</span> col<span class=3D"token punctuation">=
(</span><span class=3D"token string">"col1"</span><span class=3D"token punc=
tuation">)</span> <span class=3D"token operator">/</span> col<span class=3D=
"token punctuation">(</span><span class=3D"token string">"col2"</span><span=
 class=3D"token punctuation">)</span><span class=3D"token punctuation">)</s=
pan>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 5. Add a c=
onstant to a column</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: col=
1 =3D 10</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 15=
 (col1 + 5)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"sum_with_constant"</s=
pan><span class=3D"token punctuation">,</span> col<span class=3D"token punc=
tuation">(</span><span class=3D"token string">"col1"</span><span class=3D"t=
oken punctuation">)</span> <span class=3D"token operator">+</span> <span cl=
ass=3D"token number">5</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 6. Subtrac=
t a constant from a column</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: col=
1 =3D 10</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 5 =
(col1 - 5)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"difference_with_const=
ant"</span><span class=3D"token punctuation">,</span> col<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"col1"</span><span cla=
ss=3D"token punctuation">)</span> <span class=3D"token operator">-</span> <=
span class=3D"token number">5</span><span class=3D"token punctuation">)</sp=
an>
</span></code><div class=3D"copied" data-code=3D"# 1. Add two columns
# Input: col1 =3D 10, col2 =3D 5
# Output: 15 (col1 + col2)
df =3D df.withColumn(&quot;sum&quot;, col(&quot;col1&quot;) + col(&quot;col=
2&quot;))

# 2. Subtract two columns
# Input: col1 =3D 10, col2 =3D 5
# Output: 5 (col1 - col2)
df =3D df.withColumn(&quot;difference&quot;, col(&quot;col1&quot;) - col(&q=
uot;col2&quot;))

# 3. Multiply two columns
# Input: col1 =3D 10, col2 =3D 5
# Output: 50 (col1 * col2)
df =3D df.withColumn(&quot;product&quot;, col(&quot;col1&quot;) * col(&quot=
;col2&quot;))

# 4. Divide two columns
# Input: col1 =3D 10, col2 =3D 5
# Output: 2.0 (col1 / col2)
df =3D df.withColumn(&quot;quotient&quot;, col(&quot;col1&quot;) / col(&quo=
t;col2&quot;))

# 5. Add a constant to a column
# Input: col1 =3D 10
# Output: 15 (col1 + 5)
df =3D df.withColumn(&quot;sum_with_constant&quot;, col(&quot;col1&quot;) +=
 5)

# 6. Subtract a constant from a column
# Input: col1 =3D 10
# Output: 5 (col1 - 5)
df =3D df.withColumn(&quot;difference_with_constant&quot;, col(&quot;col1&q=
uot;) - 5)
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"complex-arithmetic"><a class=3D"anchor" aria-hidden=3D"true" tabi=
ndex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#com=
plex-arithmetic"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" =
version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-=
rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112=
.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l=
2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.=
5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 =
0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z">=
</path></svg></a>Complex Arithmetic</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>functions <span class=3D"token keyword">import</span> <span =
class=3D"token punctuation">(</span>
</span><span class=3D"code-line">    <span class=3D"token builtin">abs</spa=
n><span class=3D"token punctuation">,</span> <span class=3D"token builtin">=
round</span><span class=3D"token punctuation">,</span> floor<span class=3D"=
token punctuation">,</span> ceil<span class=3D"token punctuation">,</span> =
exp<span class=3D"token punctuation">,</span> log<span class=3D"token punct=
uation">,</span> sqrt<span class=3D"token punctuation">,</span> <span class=
=3D"token builtin">pow</span>
</span><span class=3D"code-line"><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 1. Absolut=
e value</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: -2.=
71</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 2.=
71</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"abs_value"</span><spa=
n class=3D"token punctuation">,</span> <span class=3D"token builtin">abs</s=
pan><span class=3D"token punctuation">(</span><span class=3D"token string">=
"value"</span><span class=3D"token punctuation">)</span><span class=3D"toke=
n punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Round t=
he number to 2 decimal places</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 3.1=
4159</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 3.=
14</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"rounded_value"</span>=
<span class=3D"token punctuation">,</span> <span class=3D"token builtin">ro=
und</span><span class=3D"token punctuation">(</span><span class=3D"token st=
ring">"value"</span><span class=3D"token punctuation">,</span> <span class=
=3D"token number">2</span><span class=3D"token punctuation">)</span><span c=
lass=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Floor (=
round down to the nearest integer)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 3.1=
4</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 3<=
/span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"floor_value"</span><s=
pan class=3D"token punctuation">,</span> floor<span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"value"</span><span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Ceil (r=
ound up to the nearest integer)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 3.1=
4</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 4<=
/span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"ceil_value"</span><sp=
an class=3D"token punctuation">,</span> ceil<span class=3D"token punctuatio=
n">(</span><span class=3D"token string">"value"</span><span class=3D"token =
punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 5. Exponen=
t (e raised to the power of the value)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 2.0=
</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 7.=
389056</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"exp_value"</span><spa=
n class=3D"token punctuation">,</span> exp<span class=3D"token punctuation"=
>(</span><span class=3D"token string">"value"</span><span class=3D"token pu=
nctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 6. Logarit=
hm (log base e of the value)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 2.7=
18</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 0.=
999896</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"log_value"</span><spa=
n class=3D"token punctuation">,</span> log<span class=3D"token punctuation"=
>(</span><span class=3D"token string">"value"</span><span class=3D"token pu=
nctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 7. Square =
root</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 16<=
/span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 4<=
/span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"sqrt_value"</span><sp=
an class=3D"token punctuation">,</span> sqrt<span class=3D"token punctuatio=
n">(</span><span class=3D"token string">"value"</span><span class=3D"token =
punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 8. Power (=
raise the value to the power of 2)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 3</=
span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 9<=
/span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"pow_value"</span><spa=
n class=3D"token punctuation">,</span> <span class=3D"token builtin">pow</s=
pan><span class=3D"token punctuation">(</span><span class=3D"token string">=
"value"</span><span class=3D"token punctuation">,</span> <span class=3D"tok=
en number">2</span><span class=3D"token punctuation">)</span><span class=3D=
"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.functions=
 import (
    abs, round, floor, ceil, exp, log, sqrt, pow
)

# 1. Absolute value
# Input: -2.71
# Output: 2.71
df =3D df.withColumn(&quot;abs_value&quot;, abs(&quot;value&quot;))

# 2. Round the number to 2 decimal places
# Input: 3.14159
# Output: 3.14
df =3D df.withColumn(&quot;rounded_value&quot;, round(&quot;value&quot;, 2)=
)

# 3. Floor (round down to the nearest integer)
# Input: 3.14
# Output: 3
df =3D df.withColumn(&quot;floor_value&quot;, floor(&quot;value&quot;))

# 4. Ceil (round up to the nearest integer)
# Input: 3.14
# Output: 4
df =3D df.withColumn(&quot;ceil_value&quot;, ceil(&quot;value&quot;))

# 5. Exponent (e raised to the power of the value)
# Input: 2.0
# Output: 7.389056
df =3D df.withColumn(&quot;exp_value&quot;, exp(&quot;value&quot;))

# 6. Logarithm (log base e of the value)
# Input: 2.718
# Output: 0.999896
df =3D df.withColumn(&quot;log_value&quot;, log(&quot;value&quot;))

# 7. Square root
# Input: 16
# Output: 4
df =3D df.withColumn(&quot;sqrt_value&quot;, sqrt(&quot;value&quot;))

# 8. Power (raise the value to the power of 2)
# Input: 3
# Output: 9
df =3D df.withColumn(&quot;pow_value&quot;, pow(&quot;value&quot;, 2))
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<hr>
<h2 id=3D"string-functions"><a class=3D"anchor" aria-hidden=3D"true" tabind=
ex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#strin=
g-functions"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" vers=
ion=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=
=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 =
2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-=
2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 =
2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 00=
4.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></pa=
th></svg></a>String Functions</h2>
<h3 id=3D"basic-string-functions"><a class=3D"anchor" aria-hidden=3D"true" =
tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet=
#basic-string-functions"><svg class=3D"octicon octicon-link" viewBox=3D"0 0=
 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><pa=
th fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2=
 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 0=
04.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.8=
3l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a=
3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2=
.83 0z"></path></svg></a>Basic String Functions</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># 1. Concatenate=
 two strings</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "he=
llo world" + " !!!"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "h=
ello world !!!"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"concatenated_2_cols"<=
/span><span class=3D"token punctuation">,</span> concat<span class=3D"token=
 punctuation">(</span>col<span class=3D"token punctuation">(</span><span cl=
ass=3D"token string">"col1"</span><span class=3D"token punctuation">)</span=
><span class=3D"token punctuation">,</span> col<span class=3D"token punctua=
tion">(</span><span class=3D"token string">"col2"</span><span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">)</span><span clas=
s=3D"token punctuation">)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"concatenated_col_with=
_lit"</span><span class=3D"token punctuation">,</span> concat<span class=3D=
"token punctuation">(</span>col<span class=3D"token punctuation">(</span><s=
pan class=3D"token string">"text"</span><span class=3D"token punctuation">)=
</span><span class=3D"token punctuation">,</span> lit<span class=3D"token p=
unctuation">(</span><span class=3D"token string">" !!!"</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">)</span><s=
pan class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Concate=
nate columns with a separator (Space)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: ("J=
ohn", "Doe", "30")</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "J=
ohn Doe 30"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"full_name"</span><spa=
n class=3D"token punctuation">,</span> concat_ws<span class=3D"token punctu=
ation">(</span><span class=3D"token string">" "</span><span class=3D"token =
punctuation">,</span> col<span class=3D"token punctuation">(</span><span cl=
ass=3D"token string">"first_name"</span><span class=3D"token punctuation">)=
</span><span class=3D"token punctuation">,</span> col<span class=3D"token p=
unctuation">(</span><span class=3D"token string">"last_name"</span><span cl=
ass=3D"token punctuation">)</span><span class=3D"token punctuation">,</span=
> col<span class=3D"token punctuation">(</span><span class=3D"token string"=
>"age"</span><span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Concate=
nate columns with a separator (Comma)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: ("J=
ohn", "Doe", "30")</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "J=
ohn, Doe, 30"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"full_name_comma"</spa=
n><span class=3D"token punctuation">,</span> concat_ws<span class=3D"token =
punctuation">(</span><span class=3D"token string">", "</span><span class=3D=
"token punctuation">,</span> col<span class=3D"token punctuation">(</span><=
span class=3D"token string">"first_name"</span><span class=3D"token punctua=
tion">)</span><span class=3D"token punctuation">,</span> col<span class=3D"=
token punctuation">(</span><span class=3D"token string">"last_name"</span><=
span class=3D"token punctuation">)</span><span class=3D"token punctuation">=
,</span> col<span class=3D"token punctuation">(</span><span class=3D"token =
string">"age"</span><span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Concate=
nate with a custom string</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: ("J=
ohn", "Doe")</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "N=
ame: John Doe"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"name"</span><span cla=
ss=3D"token punctuation">,</span> concat_ws<span class=3D"token punctuation=
">(</span><span class=3D"token string">""</span><span class=3D"token punctu=
ation">,</span> lit<span class=3D"token punctuation">(</span><span class=3D=
"token string">"Name: "</span><span class=3D"token punctuation">)</span><sp=
an class=3D"token punctuation">,</span> col<span class=3D"token punctuation=
">(</span><span class=3D"token string">"first_name"</span><span class=3D"to=
ken punctuation">)</span><span class=3D"token punctuation">,</span> lit<spa=
n class=3D"token punctuation">(</span><span class=3D"token string">" "</spa=
n><span class=3D"token punctuation">)</span><span class=3D"token punctuatio=
n">,</span> col<span class=3D"token punctuation">(</span><span class=3D"tok=
en string">"last_name"</span><span class=3D"token punctuation">)</span><spa=
n class=3D"token punctuation">)</span><span class=3D"token punctuation">)</=
span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 5. Check i=
f string contains a substring</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "he=
llo world" -&gt; "world"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: Tr=
ue</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"contains_world"</span=
><span class=3D"token punctuation">,</span> col<span class=3D"token punctua=
tion">(</span><span class=3D"token string">"text"</span><span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">.</span>contains<s=
pan class=3D"token punctuation">(</span><span class=3D"token string">"world=
"</span><span class=3D"token punctuation">)</span><span class=3D"token punc=
tuation">)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"contains_world2"</spa=
n><span class=3D"token punctuation">,</span> contains<span class=3D"token p=
unctuation">(</span>col<span class=3D"token punctuation">(</span><span clas=
s=3D"token string">"text"</span><span class=3D"token punctuation">)</span><=
span class=3D"token punctuation">,</span> lit<span class=3D"token punctuati=
on">(</span><span class=3D"token string">"world"</span><span class=3D"token=
 punctuation">)</span><span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 6. Check i=
f string starts with a specific substring</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "he=
llo world" -&gt; "hello"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: Tr=
ue</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"starts_with_hello"</s=
pan><span class=3D"token punctuation">,</span> col<span class=3D"token punc=
tuation">(</span><span class=3D"token string">"text"</span><span class=3D"t=
oken punctuation">)</span><span class=3D"token punctuation">.</span>startsw=
ith<span class=3D"token punctuation">(</span><span class=3D"token string">"=
hello"</span><span class=3D"token punctuation">)</span><span class=3D"token=
 punctuation">)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"starts_with_hello2"</=
span><span class=3D"token punctuation">,</span> startswith<span class=3D"to=
ken punctuation">(</span>col<span class=3D"token punctuation">(</span><span=
 class=3D"token string">"text"</span><span class=3D"token punctuation">)</s=
pan><span class=3D"token punctuation">,</span> lit<span class=3D"token punc=
tuation">(</span><span class=3D"token string">"hello"</span><span class=3D"=
token punctuation">)</span><span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 7. Check i=
f string ends with a specific substring</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "he=
llo world" -&gt; "world"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: Tr=
ue</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"ends_with_world"</spa=
n><span class=3D"token punctuation">,</span> col<span class=3D"token punctu=
ation">(</span><span class=3D"token string">"text"</span><span class=3D"tok=
en punctuation">)</span><span class=3D"token punctuation">.</span>endswith<=
span class=3D"token punctuation">(</span><span class=3D"token string">"worl=
d"</span><span class=3D"token punctuation">)</span><span class=3D"token pun=
ctuation">)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"ends_with_world2"</sp=
an><span class=3D"token punctuation">,</span> endswith<span class=3D"token =
punctuation">(</span>col<span class=3D"token punctuation">(</span><span cla=
ss=3D"token string">"text"</span><span class=3D"token punctuation">)</span>=
<span class=3D"token punctuation">,</span> lit<span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"world"</span><span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">)</span><span clas=
s=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 8. Capital=
ize the first letter of each word</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "he=
llo world"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "H=
ello World"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"initcap_text"</span><=
span class=3D"token punctuation">,</span> initcap<span class=3D"token punct=
uation">(</span>col<span class=3D"token punctuation">(</span><span class=3D=
"token string">"text"</span><span class=3D"token punctuation">)</span><span=
 class=3D"token punctuation">)</span><span class=3D"token punctuation">)</s=
pan>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 9. Convert=
 string to uppercase</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "he=
llo world"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "H=
ELLO WORLD"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"upper_text"</span><sp=
an class=3D"token punctuation">,</span> upper<span class=3D"token punctuati=
on">(</span>col<span class=3D"token punctuation">(</span><span class=3D"tok=
en string">"text"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 10. Conver=
t string to lowercase</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "HE=
LLO WORLD"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "h=
ello world"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"lower_text"</span><sp=
an class=3D"token punctuation">,</span> lower<span class=3D"token punctuati=
on">(</span>col<span class=3D"token punctuation">(</span><span class=3D"tok=
en string">"text"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 11. Get th=
e length of the string</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "he=
llo world"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 11=
</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"length_of_text"</span=
><span class=3D"token punctuation">,</span> length<span class=3D"token punc=
tuation">(</span>col<span class=3D"token punctuation">(</span><span class=
=3D"token string">"text"</span><span class=3D"token punctuation">)</span><s=
pan class=3D"token punctuation">)</span><span class=3D"token punctuation">)=
</span>
</span></code><div class=3D"copied" data-code=3D"# 1. Concatenate two strin=
gs
# Input: &quot;hello world&quot; + &quot; !!!&quot;
# Output: &quot;hello world !!!&quot;
df =3D df.withColumn(&quot;concatenated_2_cols&quot;, concat(col(&quot;col1=
&quot;), col(&quot;col2&quot;)))
df =3D df.withColumn(&quot;concatenated_col_with_lit&quot;, concat(col(&quo=
t;text&quot;), lit(&quot; !!!&quot;)))

# 2. Concatenate columns with a separator (Space)
# Input: (&quot;John&quot;, &quot;Doe&quot;, &quot;30&quot;)
# Output: &quot;John Doe 30&quot;
df =3D df.withColumn(&quot;full_name&quot;, concat_ws(&quot; &quot;, col(&q=
uot;first_name&quot;), col(&quot;last_name&quot;), col(&quot;age&quot;)))

# 3. Concatenate columns with a separator (Comma)
# Input: (&quot;John&quot;, &quot;Doe&quot;, &quot;30&quot;)
# Output: &quot;John, Doe, 30&quot;
df =3D df.withColumn(&quot;full_name_comma&quot;, concat_ws(&quot;, &quot;,=
 col(&quot;first_name&quot;), col(&quot;last_name&quot;), col(&quot;age&quo=
t;)))

# 4. Concatenate with a custom string
# Input: (&quot;John&quot;, &quot;Doe&quot;)
# Output: &quot;Name: John Doe&quot;
df =3D df.withColumn(&quot;name&quot;, concat_ws(&quot;&quot;, lit(&quot;Na=
me: &quot;), col(&quot;first_name&quot;), lit(&quot; &quot;), col(&quot;las=
t_name&quot;)))

# 5. Check if string contains a substring
# Input: &quot;hello world&quot; -&gt; &quot;world&quot;
# Output: True
df =3D df.withColumn(&quot;contains_world&quot;, col(&quot;text&quot;).cont=
ains(&quot;world&quot;))
df =3D df.withColumn(&quot;contains_world2&quot;, contains(col(&quot;text&q=
uot;), lit(&quot;world&quot;)))

# 6. Check if string starts with a specific substring
# Input: &quot;hello world&quot; -&gt; &quot;hello&quot;
# Output: True
df =3D df.withColumn(&quot;starts_with_hello&quot;, col(&quot;text&quot;).s=
tartswith(&quot;hello&quot;))
df =3D df.withColumn(&quot;starts_with_hello2&quot;, startswith(col(&quot;t=
ext&quot;), lit(&quot;hello&quot;)))

# 7. Check if string ends with a specific substring
# Input: &quot;hello world&quot; -&gt; &quot;world&quot;
# Output: True
df =3D df.withColumn(&quot;ends_with_world&quot;, col(&quot;text&quot;).end=
swith(&quot;world&quot;))
df =3D df.withColumn(&quot;ends_with_world2&quot;, endswith(col(&quot;text&=
quot;), lit(&quot;world&quot;)))

# 8. Capitalize the first letter of each word
# Input: &quot;hello world&quot;
# Output: &quot;Hello World&quot;
df =3D df.withColumn(&quot;initcap_text&quot;, initcap(col(&quot;text&quot;=
)))

# 9. Convert string to uppercase
# Input: &quot;hello world&quot;
# Output: &quot;HELLO WORLD&quot;
df =3D df.withColumn(&quot;upper_text&quot;, upper(col(&quot;text&quot;)))

# 10. Convert string to lowercase
# Input: &quot;HELLO WORLD&quot;
# Output: &quot;hello world&quot;
df =3D df.withColumn(&quot;lower_text&quot;, lower(col(&quot;text&quot;)))

# 11. Get the length of the string
# Input: &quot;hello world&quot;
# Output: 11
df =3D df.withColumn(&quot;length_of_text&quot;, length(col(&quot;text&quot=
;)))
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"trim-and-pad-functions"><a class=3D"anchor" aria-hidden=3D"true" =
tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet=
#trim-and-pad-functions"><svg class=3D"octicon octicon-link" viewBox=3D"0 0=
 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><pa=
th fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2=
 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 0=
04.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.8=
3l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a=
3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2=
.83 0z"></path></svg></a>Trim and Pad Functions</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># 1. Trim: Remov=
e both leading and trailing spaces from first_name</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "  =
 John   "</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "J=
ohn"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"trimmed_first_name"</=
span><span class=3D"token punctuation">,</span> trim<span class=3D"token pu=
nctuation">(</span>col<span class=3D"token punctuation">(</span><span class=
=3D"token string">"first_name"</span><span class=3D"token punctuation">)</s=
pan><span class=3D"token punctuation">)</span><span class=3D"token punctuat=
ion">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Ltrim: =
Remove leading spaces from first_name</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "  =
 John"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "J=
ohn"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"ltrim_first_name"</sp=
an><span class=3D"token punctuation">,</span> ltrim<span class=3D"token pun=
ctuation">(</span>col<span class=3D"token punctuation">(</span><span class=
=3D"token string">"first_name"</span><span class=3D"token punctuation">)</s=
pan><span class=3D"token punctuation">)</span><span class=3D"token punctuat=
ion">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Rtrim: =
Remove trailing spaces from last_name</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "Do=
e   "</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "D=
oe"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"rtrim_last_name"</spa=
n><span class=3D"token punctuation">,</span> rtrim<span class=3D"token punc=
tuation">(</span>col<span class=3D"token punctuation">(</span><span class=
=3D"token string">"last_name"</span><span class=3D"token punctuation">)</sp=
an><span class=3D"token punctuation">)</span><span class=3D"token punctuati=
on">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Lpad: P=
ad first_name with spaces on the left to make the length 10</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "Jo=
hn"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: " =
     John"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"lpad_first_name"</spa=
n><span class=3D"token punctuation">,</span> lpad<span class=3D"token punct=
uation">(</span>col<span class=3D"token punctuation">(</span><span class=3D=
"token string">"first_name"</span><span class=3D"token punctuation">)</span=
><span class=3D"token punctuation">,</span> <span class=3D"token number">10=
</span><span class=3D"token punctuation">,</span> <span class=3D"token stri=
ng">" "</span><span class=3D"token punctuation">)</span><span class=3D"toke=
n punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 5. Rpad: P=
ad last_name with spaces on the right to make the length 10</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "Do=
e"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "D=
oe       "</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"rpad_last_name"</span=
><span class=3D"token punctuation">,</span> rpad<span class=3D"token punctu=
ation">(</span>col<span class=3D"token punctuation">(</span><span class=3D"=
token string">"last_name"</span><span class=3D"token punctuation">)</span><=
span class=3D"token punctuation">,</span> <span class=3D"token number">10</=
span><span class=3D"token punctuation">,</span> <span class=3D"token string=
">" "</span><span class=3D"token punctuation">)</span><span class=3D"token =
punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 6. Lpad wi=
th a custom padding character: Pad first_name with "0" on the left to make =
the length 10</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "Jo=
hn"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "0=
0000John"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"lpad_first_name_zeros=
"</span><span class=3D"token punctuation">,</span> lpad<span class=3D"token=
 punctuation">(</span>col<span class=3D"token punctuation">(</span><span cl=
ass=3D"token string">"first_name"</span><span class=3D"token punctuation">)=
</span><span class=3D"token punctuation">,</span> <span class=3D"token numb=
er">10</span><span class=3D"token punctuation">,</span> <span class=3D"toke=
n string">"0"</span><span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 7. Rpad wi=
th a custom padding character: Pad last_name with "0" on the right to make =
the length 10</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "Do=
e"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "D=
oe0000000"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"rpad_last_name_zeros"=
</span><span class=3D"token punctuation">,</span> rpad<span class=3D"token =
punctuation">(</span>col<span class=3D"token punctuation">(</span><span cla=
ss=3D"token string">"last_name"</span><span class=3D"token punctuation">)</=
span><span class=3D"token punctuation">,</span> <span class=3D"token number=
">10</span><span class=3D"token punctuation">,</span> <span class=3D"token =
string">"0"</span><span class=3D"token punctuation">)</span><span class=3D"=
token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# 1. Trim: Remove both lea=
ding and trailing spaces from first_name
# Input: &quot;   John   &quot;
# Output: &quot;John&quot;
df =3D df.withColumn(&quot;trimmed_first_name&quot;, trim(col(&quot;first_n=
ame&quot;)))

# 2. Ltrim: Remove leading spaces from first_name
# Input: &quot;   John&quot;
# Output: &quot;John&quot;
df =3D df.withColumn(&quot;ltrim_first_name&quot;, ltrim(col(&quot;first_na=
me&quot;)))

# 3. Rtrim: Remove trailing spaces from last_name
# Input: &quot;Doe   &quot;
# Output: &quot;Doe&quot;
df =3D df.withColumn(&quot;rtrim_last_name&quot;, rtrim(col(&quot;last_name=
&quot;)))

# 4. Lpad: Pad first_name with spaces on the left to make the length 10
# Input: &quot;John&quot;
# Output: &quot;      John&quot;
df =3D df.withColumn(&quot;lpad_first_name&quot;, lpad(col(&quot;first_name=
&quot;), 10, &quot; &quot;))

# 5. Rpad: Pad last_name with spaces on the right to make the length 10
# Input: &quot;Doe&quot;
# Output: &quot;Doe       &quot;
df =3D df.withColumn(&quot;rpad_last_name&quot;, rpad(col(&quot;last_name&q=
uot;), 10, &quot; &quot;))

# 6. Lpad with a custom padding character: Pad first_name with &quot;0&quot=
; on the left to make the length 10
# Input: &quot;John&quot;
# Output: &quot;00000John&quot;
df =3D df.withColumn(&quot;lpad_first_name_zeros&quot;, lpad(col(&quot;firs=
t_name&quot;), 10, &quot;0&quot;))

# 7. Rpad with a custom padding character: Pad last_name with &quot;0&quot;=
 on the right to make the length 10
# Input: &quot;Doe&quot;
# Output: &quot;Doe0000000&quot;
df =3D df.withColumn(&quot;rpad_last_name_zeros&quot;, rpad(col(&quot;last_=
name&quot;), 10, &quot;0&quot;))
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"advanced-string-functions"><a class=3D"anchor" aria-hidden=3D"tru=
e" tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sh=
eet#advanced-string-functions"><svg class=3D"octicon octicon-link" viewBox=
=3D"0 0 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"tr=
ue"><path fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25=
-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 =
3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 =
010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2=
.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2=
 0 01-2.83 0z"></path></svg></a>Advanced String Functions</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># 1. Substring: =
Extract substring from the full_name starting from position 1 (inclusive) w=
ith length 4</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "Jo=
hn_Doe_30"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "J=
ohn"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"substring_example"</s=
pan><span class=3D"token punctuation">,</span> substring<span class=3D"toke=
n punctuation">(</span>col<span class=3D"token punctuation">(</span><span c=
lass=3D"token string">"full_name"</span><span class=3D"token punctuation">)=
</span><span class=3D"token punctuation">,</span> <span class=3D"token numb=
er">1</span><span class=3D"token punctuation">,</span> <span class=3D"token=
 number">4</span><span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Substri=
ng: Extract substring from the full_name starting from position 6 (inclusiv=
e) with length 3</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "Jo=
hn_Doe_30"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "D=
oe"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"substring_name"</span=
><span class=3D"token punctuation">,</span> substring<span class=3D"token p=
unctuation">(</span>col<span class=3D"token punctuation">(</span><span clas=
s=3D"token string">"full_name"</span><span class=3D"token punctuation">)</s=
pan><span class=3D"token punctuation">,</span> <span class=3D"token number"=
>6</span><span class=3D"token punctuation">,</span> <span class=3D"token nu=
mber">3</span><span class=3D"token punctuation">)</span><span class=3D"toke=
n punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Substri=
ng: Extract last 2 characters of the full_name</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "Jo=
hn_Doe_30"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "3=
0"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"substring_age"</span>=
<span class=3D"token punctuation">,</span> substring<span class=3D"token pu=
nctuation">(</span>col<span class=3D"token punctuation">(</span><span class=
=3D"token string">"full_name"</span><span class=3D"token punctuation">)</sp=
an><span class=3D"token punctuation">,</span> <span class=3D"token operator=
">-</span><span class=3D"token number">2</span><span class=3D"token punctua=
tion">,</span> <span class=3D"token number">2</span><span class=3D"token pu=
nctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Split: =
Split the full_name into first and last names based on the "_" separator</s=
pan>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "Jo=
hn_Doe_30"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: ["=
John", "Doe", "30"]</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"split_name"</span><sp=
an class=3D"token punctuation">,</span> split<span class=3D"token punctuati=
on">(</span>col<span class=3D"token punctuation">(</span><span class=3D"tok=
en string">"full_name"</span><span class=3D"token punctuation">)</span><spa=
n class=3D"token punctuation">,</span> <span class=3D"token string">"_"</sp=
an><span class=3D"token punctuation">)</span><span class=3D"token punctuati=
on">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 5. Split: =
Split the full_name into first and last names based on the "_" separator an=
d get the first part (first name)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "Jo=
hn_Doe_30"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "J=
ohn"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"first_name"</span><sp=
an class=3D"token punctuation">,</span> split<span class=3D"token punctuati=
on">(</span>col<span class=3D"token punctuation">(</span><span class=3D"tok=
en string">"full_name"</span><span class=3D"token punctuation">)</span><spa=
n class=3D"token punctuation">,</span> <span class=3D"token string">"_"</sp=
an><span class=3D"token punctuation">)</span><span class=3D"token punctuati=
on">[</span><span class=3D"token number">0</span><span class=3D"token punct=
uation">]</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 6. Split: =
Split the full_name into first and last names and get the second part (last=
 name)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "Jo=
hn_Doe_30"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "D=
oe"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"last_name"</span><spa=
n class=3D"token punctuation">,</span> split<span class=3D"token punctuatio=
n">(</span>col<span class=3D"token punctuation">(</span><span class=3D"toke=
n string">"full_name"</span><span class=3D"token punctuation">)</span><span=
 class=3D"token punctuation">,</span> <span class=3D"token string">"_"</spa=
n><span class=3D"token punctuation">)</span><span class=3D"token punctuatio=
n">[</span><span class=3D"token number">1</span><span class=3D"token punctu=
ation">]</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 7. Split: =
Split the full_name and get the third part (age)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "Jo=
hn_Doe_30"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "3=
0"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"age"</span><span clas=
s=3D"token punctuation">,</span> split<span class=3D"token punctuation">(</=
span>col<span class=3D"token punctuation">(</span><span class=3D"token stri=
ng">"full_name"</span><span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">,</span> <span class=3D"token string">"_"</span><spa=
n class=3D"token punctuation">)</span><span class=3D"token punctuation">[</=
span><span class=3D"token number">2</span><span class=3D"token punctuation"=
>]</span><span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# 1. Substring: Extract su=
bstring from the full_name starting from position 1 (inclusive) with length=
 4
# Input: &quot;John_Doe_30&quot;
# Output: &quot;John&quot;
df =3D df.withColumn(&quot;substring_example&quot;, substring(col(&quot;ful=
l_name&quot;), 1, 4))

# 2. Substring: Extract substring from the full_name starting from position=
 6 (inclusive) with length 3
# Input: &quot;John_Doe_30&quot;
# Output: &quot;Doe&quot;
df =3D df.withColumn(&quot;substring_name&quot;, substring(col(&quot;full_n=
ame&quot;), 6, 3))

# 3. Substring: Extract last 2 characters of the full_name
# Input: &quot;John_Doe_30&quot;
# Output: &quot;30&quot;
df =3D df.withColumn(&quot;substring_age&quot;, substring(col(&quot;full_na=
me&quot;), -2, 2))

# 4. Split: Split the full_name into first and last names based on the &quo=
t;_&quot; separator
# Input: &quot;John_Doe_30&quot;
# Output: [&quot;John&quot;, &quot;Doe&quot;, &quot;30&quot;]
df =3D df.withColumn(&quot;split_name&quot;, split(col(&quot;full_name&quot=
;), &quot;_&quot;))

# 5. Split: Split the full_name into first and last names based on the &quo=
t;_&quot; separator and get the first part (first name)
# Input: &quot;John_Doe_30&quot;
# Output: &quot;John&quot;
df =3D df.withColumn(&quot;first_name&quot;, split(col(&quot;full_name&quot=
;), &quot;_&quot;)[0])

# 6. Split: Split the full_name into first and last names and get the secon=
d part (last name)
# Input: &quot;John_Doe_30&quot;
# Output: &quot;Doe&quot;
df =3D df.withColumn(&quot;last_name&quot;, split(col(&quot;full_name&quot;=
), &quot;_&quot;)[1])

# 7. Split: Split the full_name and get the third part (age)
# Input: &quot;John_Doe_30&quot;
# Output: &quot;30&quot;
df =3D df.withColumn(&quot;age&quot;, split(col(&quot;full_name&quot;), &qu=
ot;_&quot;)[2])
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"converting-to-other-data-types"><a class=3D"anchor" aria-hidden=
=3D"true" tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-c=
heat-sheet#converting-to-other-data-types"><svg class=3D"octicon octicon-li=
nk" viewBox=3D"0 0 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-h=
idden=3D"true"><path fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.0=
6 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.0=
6 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 =
9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 0=
0-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.=
25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Converting to Other Data Types</=
h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># 1. Convert str=
ing to integer</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "12=
345"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 12=
345 (as an Integer type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"int_parsed"</span><sp=
an class=3D"token punctuation">,</span> col<span class=3D"token punctuation=
">(</span><span class=3D"token string">"int_str"</span><span class=3D"token=
 punctuation">)</span><span class=3D"token punctuation">.</span>cast<span c=
lass=3D"token punctuation">(</span><span class=3D"token string">"int"</span=
><span class=3D"token punctuation">)</span><span class=3D"token punctuation=
">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Convert=
 string to float</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "12=
3.45"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 12=
3.45 (as a Float type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"float_parsed"</span><=
span class=3D"token punctuation">,</span> col<span class=3D"token punctuati=
on">(</span><span class=3D"token string">"int_str"</span><span class=3D"tok=
en punctuation">)</span><span class=3D"token punctuation">.</span>cast<span=
 class=3D"token punctuation">(</span><span class=3D"token string">"float"</=
span><span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Convert=
 string to double</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "12=
3.4567"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 12=
3.4567 (as a Double type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"double_parsed"</span>=
<span class=3D"token punctuation">,</span> col<span class=3D"token punctuat=
ion">(</span><span class=3D"token string">"int_str"</span><span class=3D"to=
ken punctuation">)</span><span class=3D"token punctuation">.</span>cast<spa=
n class=3D"token punctuation">(</span><span class=3D"token string">"double"=
</span><span class=3D"token punctuation">)</span><span class=3D"token punct=
uation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Convert=
 string to long</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: "12=
3456789012"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 12=
3456789012 (as a Long type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"long_parsed"</span><s=
pan class=3D"token punctuation">,</span> col<span class=3D"token punctuatio=
n">(</span><span class=3D"token string">"int_str"</span><span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">.</span>cast<span =
class=3D"token punctuation">(</span><span class=3D"token string">"long"</sp=
an><span class=3D"token punctuation">)</span><span class=3D"token punctuati=
on">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 5. Convert=
 integer to string</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 123=
45</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "1=
2345" (as a String type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"int_to_str"</span><sp=
an class=3D"token punctuation">,</span> col<span class=3D"token punctuation=
">(</span><span class=3D"token string">"int_parsed"</span><span class=3D"to=
ken punctuation">)</span><span class=3D"token punctuation">.</span>cast<spa=
n class=3D"token punctuation">(</span><span class=3D"token string">"string"=
</span><span class=3D"token punctuation">)</span><span class=3D"token punct=
uation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 6. Convert=
 date to string</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 202=
5-01-25 (Date type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "2=
025-01-25" (String type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"date_to_str"</span><s=
pan class=3D"token punctuation">,</span> col<span class=3D"token punctuatio=
n">(</span><span class=3D"token string">"date_parsed"</span><span class=3D"=
token punctuation">)</span><span class=3D"token punctuation">.</span>cast<s=
pan class=3D"token punctuation">(</span><span class=3D"token string">"strin=
g"</span><span class=3D"token punctuation">)</span><span class=3D"token pun=
ctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 7. Convert=
 timestamp to string</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: 202=
5-01-25 10:15:00 (Timestamp type)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "2=
025-01-25 10:15:00" (String type)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"timestamp_to_str"</sp=
an><span class=3D"token punctuation">,</span> col<span class=3D"token punct=
uation">(</span><span class=3D"token string">"timestamp_parsed"</span><span=
 class=3D"token punctuation">)</span><span class=3D"token punctuation">.</s=
pan>cast<span class=3D"token punctuation">(</span><span class=3D"token stri=
ng">"string"</span><span class=3D"token punctuation">)</span><span class=3D=
"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# 1. Convert string to int=
eger
# Input: &quot;12345&quot;
# Output: 12345 (as an Integer type)
df =3D df.withColumn(&quot;int_parsed&quot;, col(&quot;int_str&quot;).cast(=
&quot;int&quot;))

# 2. Convert string to float
# Input: &quot;123.45&quot;
# Output: 123.45 (as a Float type)
df =3D df.withColumn(&quot;float_parsed&quot;, col(&quot;int_str&quot;).cas=
t(&quot;float&quot;))

# 3. Convert string to double
# Input: &quot;123.4567&quot;
# Output: 123.4567 (as a Double type)
df =3D df.withColumn(&quot;double_parsed&quot;, col(&quot;int_str&quot;).ca=
st(&quot;double&quot;))

# 4. Convert string to long
# Input: &quot;123456789012&quot;
# Output: 123456789012 (as a Long type)
df =3D df.withColumn(&quot;long_parsed&quot;, col(&quot;int_str&quot;).cast=
(&quot;long&quot;))

# 5. Convert integer to string
# Input: 12345
# Output: &quot;12345&quot; (as a String type)
df =3D df.withColumn(&quot;int_to_str&quot;, col(&quot;int_parsed&quot;).ca=
st(&quot;string&quot;))

# 6. Convert date to string
# Input: 2025-01-25 (Date type)
# Output: &quot;2025-01-25&quot; (String type)
df =3D df.withColumn(&quot;date_to_str&quot;, col(&quot;date_parsed&quot;).=
cast(&quot;string&quot;))

# 7. Convert timestamp to string
# Input: 2025-01-25 10:15:00 (Timestamp type)
# Output: &quot;2025-01-25 10:15:00&quot; (String type)
df =3D df.withColumn(&quot;timestamp_to_str&quot;, col(&quot;timestamp_pars=
ed&quot;).cast(&quot;string&quot;))
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<hr>
<h2 id=3D"window-functions"><a class=3D"anchor" aria-hidden=3D"true" tabind=
ex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#windo=
w-functions"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" vers=
ion=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=
=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 =
2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-=
2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 =
2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 00=
4.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></pa=
th></svg></a>Window Functions</h2>
<h3 id=3D"basic-window-functions"><a class=3D"anchor" aria-hidden=3D"true" =
tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet=
#basic-window-functions"><svg class=3D"octicon octicon-link" viewBox=3D"0 0=
 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><pa=
th fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2=
 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 0=
04.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.8=
3l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a=
3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2=
.83 0z"></path></svg></a>Basic Window Functions</h3>
<p><strong>Use orderBy()</strong> when order matters:</p>
<ul>
<li>Ranking Functions (row_number, rank, dense_rank)</li>
<li>Offset Functions (lead, lag)</li>
<li>Cumulative Aggregations (sum, avg with rowsBetween)</li>
</ul>
<p><strong>Skip orderBy()</strong> when order is irrelevant:</p>
<ul>
<li>Partition-wise Aggregates (sum, avg, count)</li>
<li>Row-Agnostic Aggregations (max, min)</li>
</ul>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>window <span class=3D"token keyword">import</span> Window
</span><span class=3D"code-line"><span class=3D"token keyword">from</span> =
pyspark<span class=3D"token punctuation">.</span>sql<span class=3D"token pu=
nctuation">.</span>functions <span class=3D"token keyword">import</span> co=
l<span class=3D"token punctuation">,</span> row_number<span class=3D"token =
punctuation">,</span> rank<span class=3D"token punctuation">,</span> dense_=
rank<span class=3D"token punctuation">,</span> lag<span class=3D"token punc=
tuation">,</span> lead<span class=3D"token punctuation">,</span> <span clas=
s=3D"token builtin">sum</span><span class=3D"token punctuation">,</span> av=
g
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Define win=
dow specification (partition by department, order by salary descending)</sp=
an>
</span><span class=3D"code-line">window_spec <span class=3D"token operator"=
>=3D</span> Window<span class=3D"token punctuation">.</span>partitionBy<spa=
n class=3D"token punctuation">(</span><span class=3D"token string">"departm=
ent"</span><span class=3D"token punctuation">)</span><span class=3D"token p=
unctuation">.</span>orderBy<span class=3D"token punctuation">(</span>col<sp=
an class=3D"token punctuation">(</span><span class=3D"token string">"salary=
"</span><span class=3D"token punctuation">)</span><span class=3D"token punc=
tuation">.</span>desc<span class=3D"token punctuation">(</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Apply wind=
ow functions</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment">#**row_numbe=
r:** Assigns unique numbers to each row in a partition.</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"row_number"</span><sp=
an class=3D"token punctuation">,</span> row_number<span class=3D"token punc=
tuation">(</span><span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">.</span>over<span class=3D"token punctuation">(</span>win=
dow_spec<span class=3D"token punctuation">)</span><span class=3D"token punc=
tuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># **rank:** =
Similar to row_number but allows rank gaps.</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"rank"</span><span cla=
ss=3D"token punctuation">,</span> rank<span class=3D"token punctuation">(</=
span><span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">.</span>over<span class=3D"token punctuation">(</span>window_spec<spa=
n class=3D"token punctuation">)</span><span class=3D"token punctuation">)</=
span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># **dense_ra=
nk:** Like rank but without gaps.</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"dense_rank"</span><sp=
an class=3D"token punctuation">,</span> dense_rank<span class=3D"token punc=
tuation">(</span><span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">.</span>over<span class=3D"token punctuation">(</span>win=
dow_spec<span class=3D"token punctuation">)</span><span class=3D"token punc=
tuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># **lag:** G=
ets the previous row's value.</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"previous_salary"</spa=
n><span class=3D"token punctuation">,</span> lag<span class=3D"token punctu=
ation">(</span><span class=3D"token string">"salary"</span><span class=3D"t=
oken punctuation">)</span><span class=3D"token punctuation">.</span>over<sp=
an class=3D"token punctuation">(</span>window_spec<span class=3D"token punc=
tuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># **lead:** =
Gets the next row's value.</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"next_salary"</span><s=
pan class=3D"token punctuation">,</span> lead<span class=3D"token punctuati=
on">(</span><span class=3D"token string">"salary"</span><span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">.</span>over<span =
class=3D"token punctuation">(</span>window_spec<span class=3D"token punctua=
tion">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># **sum:** C=
omputes a running total.</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"running_total"</span>=
<span class=3D"token punctuation">,</span> <span class=3D"token builtin">su=
m</span><span class=3D"token punctuation">(</span><span class=3D"token stri=
ng">"salary"</span><span class=3D"token punctuation">)</span><span class=3D=
"token punctuation">.</span>over<span class=3D"token punctuation">(</span>w=
indow_spec<span class=3D"token punctuation">)</span><span class=3D"token pu=
nctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># **avg:** C=
omputes a moving average. </span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"moving_avg"</span><sp=
an class=3D"token punctuation">,</span> avg<span class=3D"token punctuation=
">(</span><span class=3D"token string">"salary"</span><span class=3D"token =
punctuation">)</span><span class=3D"token punctuation">.</span>over<span cl=
ass=3D"token punctuation">(</span>window_spec<span class=3D"token punctuati=
on">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Show resul=
t</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>show<span class=3D"token punctuation">(</span><span class=3D"token punctu=
ation">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.window im=
port Window
from pyspark.sql.functions import col, row_number, rank, dense_rank, lag, l=
ead, sum, avg

# Define window specification (partition by department, order by salary des=
cending)
window_spec =3D Window.partitionBy(&quot;department&quot;).orderBy(col(&quo=
t;salary&quot;).desc())

# Apply window functions

#**row_number:** Assigns unique numbers to each row in a partition.
df =3D df.withColumn(&quot;row_number&quot;, row_number().over(window_spec)=
)

# **rank:** Similar to row_number but allows rank gaps.
df =3D df.withColumn(&quot;rank&quot;, rank().over(window_spec))

# **dense_rank:** Like rank but without gaps.
df =3D df.withColumn(&quot;dense_rank&quot;, dense_rank().over(window_spec)=
)

# **lag:** Gets the previous row's value.
df =3D df.withColumn(&quot;previous_salary&quot;, lag(&quot;salary&quot;).o=
ver(window_spec))

# **lead:** Gets the next row's value.
df =3D df.withColumn(&quot;next_salary&quot;, lead(&quot;salary&quot;).over=
(window_spec))

# **sum:** Computes a running total.
df =3D df.withColumn(&quot;running_total&quot;, sum(&quot;salary&quot;).ove=
r(window_spec))

# **avg:** Computes a moving average.=20
df =3D df.withColumn(&quot;moving_avg&quot;, avg(&quot;salary&quot;).over(w=
indow_spec))

# Show result
df.show()
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"with-rows-between"><a class=3D"anchor" aria-hidden=3D"true" tabin=
dex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#with=
-rows-between"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" ve=
rsion=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-ru=
le=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.8=
3 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.=
5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a=
2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 =
004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></=
path></svg></a>With Rows Between</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>window <span class=3D"token keyword">import</span> Window
</span><span class=3D"code-line"><span class=3D"token keyword">from</span> =
pyspark<span class=3D"token punctuation">.</span>sql<span class=3D"token pu=
nctuation">.</span>functions <span class=3D"token keyword">import</span> co=
l<span class=3D"token punctuation">,</span> <span class=3D"token builtin">s=
um</span><span class=3D"token punctuation">,</span> avg<span class=3D"token=
 punctuation">,</span> <span class=3D"token builtin">min</span><span class=
=3D"token punctuation">,</span> <span class=3D"token builtin">max</span><sp=
an class=3D"token punctuation">,</span> count
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment">#1. Rolling =
sum over the last 2 rows and current row</span>
</span><span class=3D"code-line">window_spec1 <span class=3D"token operator=
">=3D</span> Window<span class=3D"token punctuation">.</span>partitionBy<sp=
an class=3D"token punctuation">(</span><span class=3D"token string">"depart=
ment"</span><span class=3D"token punctuation">)</span><span class=3D"token =
punctuation">.</span>orderBy<span class=3D"token punctuation">(</span><span=
 class=3D"token string">"salary"</span><span class=3D"token punctuation">)<=
/span><span class=3D"token punctuation">.</span>rowsBetween<span class=3D"t=
oken punctuation">(</span><span class=3D"token operator">-</span><span clas=
s=3D"token number">2</span><span class=3D"token punctuation">,</span> <span=
 class=3D"token number">0</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"rolling_sum_last_2"</=
span><span class=3D"token punctuation">,</span> <span class=3D"token builti=
n">sum</span><span class=3D"token punctuation">(</span><span class=3D"token=
 string">"salary"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">.</span>over<span class=3D"token punctuation">(</s=
pan>window_spec1<span class=3D"token punctuation">)</span><span class=3D"to=
ken punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment">#2. Moving a=
verage including previous, current, and next row</span>
</span><span class=3D"code-line">window_spec2 <span class=3D"token operator=
">=3D</span> Window<span class=3D"token punctuation">.</span>partitionBy<sp=
an class=3D"token punctuation">(</span><span class=3D"token string">"depart=
ment"</span><span class=3D"token punctuation">)</span><span class=3D"token =
punctuation">.</span>orderBy<span class=3D"token punctuation">(</span><span=
 class=3D"token string">"salary"</span><span class=3D"token punctuation">)<=
/span><span class=3D"token punctuation">.</span>rowsBetween<span class=3D"t=
oken punctuation">(</span><span class=3D"token operator">-</span><span clas=
s=3D"token number">1</span><span class=3D"token punctuation">,</span> <span=
 class=3D"token number">1</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"moving_avg"</span><sp=
an class=3D"token punctuation">,</span> avg<span class=3D"token punctuation=
">(</span><span class=3D"token string">"salary"</span><span class=3D"token =
punctuation">)</span><span class=3D"token punctuation">.</span>over<span cl=
ass=3D"token punctuation">(</span>window_spec2<span class=3D"token punctuat=
ion">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment">#3. Rolling =
minimum for current and next 2 rows</span>
</span><span class=3D"code-line">window_spec3 <span class=3D"token operator=
">=3D</span> Window<span class=3D"token punctuation">.</span>partitionBy<sp=
an class=3D"token punctuation">(</span><span class=3D"token string">"depart=
ment"</span><span class=3D"token punctuation">)</span><span class=3D"token =
punctuation">.</span>orderBy<span class=3D"token punctuation">(</span><span=
 class=3D"token string">"salary"</span><span class=3D"token punctuation">)<=
/span><span class=3D"token punctuation">.</span>rowsBetween<span class=3D"t=
oken punctuation">(</span><span class=3D"token number">0</span><span class=
=3D"token punctuation">,</span> <span class=3D"token number">2</span><span =
class=3D"token punctuation">)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"rolling_min_next_2"</=
span><span class=3D"token punctuation">,</span> <span class=3D"token builti=
n">min</span><span class=3D"token punctuation">(</span><span class=3D"token=
 string">"salary"</span><span class=3D"token punctuation">)</span><span cla=
ss=3D"token punctuation">.</span>over<span class=3D"token punctuation">(</s=
pan>window_spec3<span class=3D"token punctuation">)</span><span class=3D"to=
ken punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment">#4. Maximum =
salary over all previous rows (running max)</span>
</span><span class=3D"code-line">window_spec4 <span class=3D"token operator=
">=3D</span> Window<span class=3D"token punctuation">.</span>partitionBy<sp=
an class=3D"token punctuation">(</span><span class=3D"token string">"depart=
ment"</span><span class=3D"token punctuation">)</span><span class=3D"token =
punctuation">.</span>orderBy<span class=3D"token punctuation">(</span><span=
 class=3D"token string">"salary"</span><span class=3D"token punctuation">)<=
/span><span class=3D"token punctuation">.</span>rowsBetween<span class=3D"t=
oken punctuation">(</span>Window<span class=3D"token punctuation">.</span>u=
nboundedPreceding<span class=3D"token punctuation">,</span> <span class=3D"=
token number">0</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"running_max"</span><s=
pan class=3D"token punctuation">,</span> <span class=3D"token builtin">max<=
/span><span class=3D"token punctuation">(</span><span class=3D"token string=
">"salary"</span><span class=3D"token punctuation">)</span><span class=3D"t=
oken punctuation">.</span>over<span class=3D"token punctuation">(</span>win=
dow_spec4<span class=3D"token punctuation">)</span><span class=3D"token pun=
ctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment">#5. Count to=
tal rows within the window (entire partition)</span>
</span><span class=3D"code-line">window_spec5 <span class=3D"token operator=
">=3D</span> Window<span class=3D"token punctuation">.</span>partitionBy<sp=
an class=3D"token punctuation">(</span><span class=3D"token string">"depart=
ment"</span><span class=3D"token punctuation">)</span><span class=3D"token =
punctuation">.</span>orderBy<span class=3D"token punctuation">(</span><span=
 class=3D"token string">"salary"</span><span class=3D"token punctuation">)<=
/span><span class=3D"token punctuation">.</span>rowsBetween<span class=3D"t=
oken punctuation">(</span>Window<span class=3D"token punctuation">.</span>u=
nboundedPreceding<span class=3D"token punctuation">,</span> Window<span cla=
ss=3D"token punctuation">.</span>unboundedFollowing<span class=3D"token pun=
ctuation">)</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"total_rows"</span><sp=
an class=3D"token punctuation">,</span> count<span class=3D"token punctuati=
on">(</span><span class=3D"token string">"salary"</span><span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">.</span>over<span =
class=3D"token punctuation">(</span>window_spec5<span class=3D"token punctu=
ation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Show resul=
t</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>show<span class=3D"token punctuation">(</span><span class=3D"token punctu=
ation">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.window im=
port Window
from pyspark.sql.functions import col, sum, avg, min, max, count

#1. Rolling sum over the last 2 rows and current row
window_spec1 =3D Window.partitionBy(&quot;department&quot;).orderBy(&quot;s=
alary&quot;).rowsBetween(-2, 0)
df =3D df.withColumn(&quot;rolling_sum_last_2&quot;, sum(&quot;salary&quot;=
).over(window_spec1))

#2. Moving average including previous, current, and next row
window_spec2 =3D Window.partitionBy(&quot;department&quot;).orderBy(&quot;s=
alary&quot;).rowsBetween(-1, 1)
df =3D df.withColumn(&quot;moving_avg&quot;, avg(&quot;salary&quot;).over(w=
indow_spec2))

#3. Rolling minimum for current and next 2 rows
window_spec3 =3D Window.partitionBy(&quot;department&quot;).orderBy(&quot;s=
alary&quot;).rowsBetween(0, 2)
df =3D df.withColumn(&quot;rolling_min_next_2&quot;, min(&quot;salary&quot;=
).over(window_spec3))

#4. Maximum salary over all previous rows (running max)
window_spec4 =3D Window.partitionBy(&quot;department&quot;).orderBy(&quot;s=
alary&quot;).rowsBetween(Window.unboundedPreceding, 0)
df =3D df.withColumn(&quot;running_max&quot;, max(&quot;salary&quot;).over(=
window_spec4))

#5. Count total rows within the window (entire partition)
window_spec5 =3D Window.partitionBy(&quot;department&quot;).orderBy(&quot;s=
alary&quot;).rowsBetween(Window.unboundedPreceding, Window.unboundedFollowi=
ng)
df =3D df.withColumn(&quot;total_rows&quot;, count(&quot;salary&quot;).over=
(window_spec5))

# Show result
df.show()
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h2 id=3D"array-functions"><a class=3D"anchor" aria-hidden=3D"true" tabinde=
x=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#array-=
functions"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" versio=
n=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=
=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 =
2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-=
2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 =
2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 00=
4.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></pa=
th></svg></a>Array Functions</h2>
<h3 id=3D"creating-and-manipulating-arrays"><a class=3D"anchor" aria-hidden=
=3D"true" tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-c=
heat-sheet#creating-and-manipulating-arrays"><svg class=3D"octicon octicon-=
link" viewBox=3D"0 0 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria=
-hidden=3D"true"><path fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001=
.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1=
.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.6=
9 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0=
 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-=
1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Creating and Manipulating Arra=
ys</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>functions <span class=3D"token keyword">import</span> array<=
span class=3D"token punctuation">,</span> size<span class=3D"token punctuat=
ion">,</span> sort_array<span class=3D"token punctuation">,</span> array_co=
ntains<span class=3D"token punctuation">,</span> explode<span class=3D"toke=
n punctuation">,</span> lit
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 1. Create =
an array column from multiple columns</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: col=
1 =3D "A", col2 =3D "B"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: ["=
A", "B"]</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"combined_array"</span=
><span class=3D"token punctuation">,</span> array<span class=3D"token punct=
uation">(</span><span class=3D"token string">"col1"</span><span class=3D"to=
ken punctuation">,</span> <span class=3D"token string">"col2"</span><span c=
lass=3D"token punctuation">)</span><span class=3D"token punctuation">)</spa=
n>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Get the=
 size of an array</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: ["A=
", "B", "C"]</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 3<=
/span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"array_size"</span><sp=
an class=3D"token punctuation">,</span> size<span class=3D"token punctuatio=
n">(</span><span class=3D"token string">"tags"</span><span class=3D"token p=
unctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Sort ar=
ray elements in ascending order</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: [3,=
 1, 2]</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: [1=
, 2, 3]</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"sorted_array"</span><=
span class=3D"token punctuation">,</span> sort_array<span class=3D"token pu=
nctuation">(</span><span class=3D"token string">"numbers"</span><span class=
=3D"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 4. Check i=
f array contains a specific value</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: ["r=
ed", "blue"], check for "blue"</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: tr=
ue</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"has_blue"</span><span=
 class=3D"token punctuation">,</span> array_contains<span class=3D"token pu=
nctuation">(</span><span class=3D"token string">"colors"</span><span class=
=3D"token punctuation">,</span> <span class=3D"token string">"blue"</span><=
span class=3D"token punctuation">)</span><span class=3D"token punctuation">=
)</span>
</span><span class=3D"code-line">
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.functions=
 import array, size, sort_array, array_contains, explode, lit

# 1. Create an array column from multiple columns
# Input: col1 =3D &quot;A&quot;, col2 =3D &quot;B&quot;
# Output: [&quot;A&quot;, &quot;B&quot;]
df =3D df.withColumn(&quot;combined_array&quot;, array(&quot;col1&quot;, &q=
uot;col2&quot;))

# 2. Get the size of an array
# Input: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]
# Output: 3
df =3D df.withColumn(&quot;array_size&quot;, size(&quot;tags&quot;))

# 3. Sort array elements in ascending order
# Input: [3, 1, 2]
# Output: [1, 2, 3]
df =3D df.withColumn(&quot;sorted_array&quot;, sort_array(&quot;numbers&quo=
t;))

# 4. Check if array contains a specific value
# Input: [&quot;red&quot;, &quot;blue&quot;], check for &quot;blue&quot;
# Output: true
df =3D df.withColumn(&quot;has_blue&quot;, array_contains(&quot;colors&quot=
;, &quot;blue&quot;))

"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"array-elements"><a class=3D"anchor" aria-hidden=3D"true" tabindex=
=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#array-e=
lements"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=
=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D=
"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.8=
3l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5=
a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0=
 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.9=
5 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path>=
</svg></a>Array Elements</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>functions <span class=3D"token keyword">import</span> elemen=
t_at<span class=3D"token punctuation">,</span> col
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 1. Get ele=
ment at a specific position (1-based index)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: ["x=
", "y", "z"], index =3D 2</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "y=
"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"second_item"</span><s=
pan class=3D"token punctuation">,</span> element_at<span class=3D"token pun=
ctuation">(</span><span class=3D"token string">"letters"</span><span class=
=3D"token punctuation">,</span> <span class=3D"token number">2</span><span =
class=3D"token punctuation">)</span><span class=3D"token punctuation">)</sp=
an>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Get ele=
ment using 0-based index (like Python)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: ["x=
", "y", "z"], index =3D 1</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: "y=
"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"second_item_alt"</spa=
n><span class=3D"token punctuation">,</span> col<span class=3D"token punctu=
ation">(</span><span class=3D"token string">"letters"</span><span class=3D"=
token punctuation">)</span><span class=3D"token punctuation">.</span>getIte=
m<span class=3D"token punctuation">(</span><span class=3D"token number">1</=
span><span class=3D"token punctuation">)</span><span class=3D"token punctua=
tion">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.functions=
 import element_at, col

# 1. Get element at a specific position (1-based index)
# Input: [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;], index =3D 2
# Output: &quot;y&quot;
df =3D df.withColumn(&quot;second_item&quot;, element_at(&quot;letters&quot=
;, 2))

# 2. Get element using 0-based index (like Python)
# Input: [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;], index =3D 1
# Output: &quot;y&quot;
df =3D df.withColumn(&quot;second_item_alt&quot;, col(&quot;letters&quot;).=
getItem(1))
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"modifying-array-elements"><a class=3D"anchor" aria-hidden=3D"true=
" tabindex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-she=
et#modifying-array-elements"><svg class=3D"octicon octicon-link" viewBox=3D=
"0 0 16 16" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"=
><path fill-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.=
25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5=
 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010=
-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 =
2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 =
01-2.83 0z"></path></svg></a>Modifying Array Elements</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>functions <span class=3D"token keyword">import</span> array_=
remove<span class=3D"token punctuation">,</span> array_distinct<span class=
=3D"token punctuation">,</span> array_union
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 1. Remove =
a specific element from an array</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: [1,=
 2, 2, 3], remove 2</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: [1=
, 3]</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"no_twos"</span><span =
class=3D"token punctuation">,</span> array_remove<span class=3D"token punct=
uation">(</span><span class=3D"token string">"numbers"</span><span class=3D=
"token punctuation">,</span> <span class=3D"token number">2</span><span cla=
ss=3D"token punctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Remove =
duplicate elements from array</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: [1,=
 2, 2, 3]</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: [1=
, 2, 3]</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"unique_numbers"</span=
><span class=3D"token punctuation">,</span> array_distinct<span class=3D"to=
ken punctuation">(</span><span class=3D"token string">"numbers"</span><span=
 class=3D"token punctuation">)</span><span class=3D"token punctuation">)</s=
pan>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 3. Merge t=
wo arrays and remove duplicates</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: [1,=
 2], [2, 3]</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: [1=
, 2, 3]</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"merged_array"</span><=
span class=3D"token punctuation">,</span> array_union<span class=3D"token p=
unctuation">(</span><span class=3D"token string">"arr1"</span><span class=
=3D"token punctuation">,</span> <span class=3D"token string">"arr2"</span><=
span class=3D"token punctuation">)</span><span class=3D"token punctuation">=
)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.functions=
 import array_remove, array_distinct, array_union

# 1. Remove a specific element from an array
# Input: [1, 2, 2, 3], remove 2
# Output: [1, 3]
df =3D df.withColumn(&quot;no_twos&quot;, array_remove(&quot;numbers&quot;,=
 2))

# 2. Remove duplicate elements from array
# Input: [1, 2, 2, 3]
# Output: [1, 2, 3]
df =3D df.withColumn(&quot;unique_numbers&quot;, array_distinct(&quot;numbe=
rs&quot;))

# 3. Merge two arrays and remove duplicates
# Input: [1, 2], [2, 3]
# Output: [1, 2, 3]
df =3D df.withColumn(&quot;merged_array&quot;, array_union(&quot;arr1&quot;=
, &quot;arr2&quot;))
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"arrays-to-rows"><a class=3D"anchor" aria-hidden=3D"true" tabindex=
=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#arrays-=
to-rows"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=
=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D=
"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.8=
3l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5=
a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0=
 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.9=
5 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path>=
</svg></a>Arrays to Rows</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>functions <span class=3D"token keyword">import</span> explod=
e<span class=3D"token punctuation">,</span> posexplode
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 1. Convert=
 array elements into multiple rows</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: ["a=
pple", "banana"]</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: 2 =
rows: "apple", "banana"</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>withColumn<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"fruit"</span><span cl=
ass=3D"token punctuation">,</span> explode<span class=3D"token punctuation"=
>(</span><span class=3D"token string">"fruits"</span><span class=3D"token p=
unctuation">)</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Explode=
 with position (index)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Input: ["a=
pple", "banana"]</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: (0=
, "apple"), (1, "banana")</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> df<span class=3D"token punctuation">.</span>select<span class=3D"token p=
unctuation">(</span><span class=3D"token string">"id"</span><span class=3D"=
token punctuation">,</span> posexplode<span class=3D"token punctuation">(</=
span><span class=3D"token string">"fruits"</span><span class=3D"token punct=
uation">)</span><span class=3D"token punctuation">.</span>alias<span class=
=3D"token punctuation">(</span><span class=3D"token string">"pos"</span><sp=
an class=3D"token punctuation">,</span> <span class=3D"token string">"fruit=
"</span><span class=3D"token punctuation">)</span><span class=3D"token punc=
tuation">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.functions=
 import explode, posexplode

# 1. Convert array elements into multiple rows
# Input: [&quot;apple&quot;, &quot;banana&quot;]
# Output: 2 rows: &quot;apple&quot;, &quot;banana&quot;
df =3D df.withColumn(&quot;fruit&quot;, explode(&quot;fruits&quot;))

# 2. Explode with position (index)
# Input: [&quot;apple&quot;, &quot;banana&quot;]
# Output: (0, &quot;apple&quot;), (1, &quot;banana&quot;)
df =3D df.select(&quot;id&quot;, posexplode(&quot;fruits&quot;).alias(&quot=
;pos&quot;, &quot;fruit&quot;))
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"rows-to-array"><a class=3D"anchor" aria-hidden=3D"true" tabindex=
=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#rows-to=
-array"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=
=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D=
"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.8=
3l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5=
a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0=
 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.9=
5 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path>=
</svg></a>Rows to Array</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token keyword">from</span> pysp=
ark<span class=3D"token punctuation">.</span>sql<span class=3D"token punctu=
ation">.</span>functions <span class=3D"token keyword">import</span> collec=
t_list<span class=3D"token punctuation">,</span> collect_set
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Input: Mul=
tiple rows with same category, e.g. {"cat": "A", "val": 1}, {"cat": "A", "v=
al": 2}</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Output: {"=
cat": "A", "val_array": [1, 2]}</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 1. Group r=
ows into array (with duplicates)</span>
</span><span class=3D"code-line">df_grouped <span class=3D"token operator">=
=3D</span> df<span class=3D"token punctuation">.</span>groupBy<span class=
=3D"token punctuation">(</span><span class=3D"token string">"cat"</span><sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">.<=
/span>agg<span class=3D"token punctuation">(</span>collect_list<span class=
=3D"token punctuation">(</span><span class=3D"token string">"val"</span><sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">.<=
/span>alias<span class=3D"token punctuation">(</span><span class=3D"token s=
tring">"val_array"</span><span class=3D"token punctuation">)</span><span cl=
ass=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># 2. Group r=
ows into array (unique values only)</span>
</span><span class=3D"code-line">df_grouped <span class=3D"token operator">=
=3D</span> df<span class=3D"token punctuation">.</span>groupBy<span class=
=3D"token punctuation">(</span><span class=3D"token string">"cat"</span><sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">.<=
/span>agg<span class=3D"token punctuation">(</span>collect_set<span class=
=3D"token punctuation">(</span><span class=3D"token string">"val"</span><sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">.<=
/span>alias<span class=3D"token punctuation">(</span><span class=3D"token s=
tring">"unique_vals"</span><span class=3D"token punctuation">)</span><span =
class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"from pyspark.sql.functions=
 import collect_list, collect_set

# Input: Multiple rows with same category, e.g. {&quot;cat&quot;: &quot;A&q=
uot;, &quot;val&quot;: 1}, {&quot;cat&quot;: &quot;A&quot;, &quot;val&quot;=
: 2}
# Output: {&quot;cat&quot;: &quot;A&quot;, &quot;val_array&quot;: [1, 2]}

# 1. Group rows into array (with duplicates)
df_grouped =3D df.groupBy(&quot;cat&quot;).agg(collect_list(&quot;val&quot;=
).alias(&quot;val_array&quot;))

# 2. Group rows into array (unique values only)
df_grouped =3D df.groupBy(&quot;cat&quot;).agg(collect_set(&quot;val&quot;)=
.alias(&quot;unique_vals&quot;))
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h2 id=3D"running-sql-queries"><a class=3D"anchor" aria-hidden=3D"true" tab=
index=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#ru=
nning-sql-queries"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16=
" version=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fil=
l-rule=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 1=
12.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 =
0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-=
2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.=
5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z=
"></path></svg></a>Running SQL Queries</h2>
<h3 id=3D"with-temp-view"><a class=3D"anchor" aria-hidden=3D"true" tabindex=
=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#with-te=
mp-view"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" version=
=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-rule=3D=
"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.8=
3l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5=
a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0=
 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.9=
5 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path>=
</svg></a>With Temp View</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># Create a tempo=
rary SQL table from a DataFrame</span>
</span><span class=3D"code-line">df<span class=3D"token punctuation">.</spa=
n>createOrReplaceTempView<span class=3D"token punctuation">(</span><span cl=
ass=3D"token string">"employees"</span><span class=3D"token punctuation">)<=
/span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Select all=
 columns</span>
</span><span class=3D"code-line">df_sql <span class=3D"token operator">=3D<=
/span> spark<span class=3D"token punctuation">.</span>sql<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"SELECT * FROM employe=
es"</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Select spe=
cific columns</span>
</span><span class=3D"code-line">df_sql <span class=3D"token operator">=3D<=
/span> spark<span class=3D"token punctuation">.</span>sql<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"SELECT name, salary F=
ROM employees"</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Filter dat=
a</span>
</span><span class=3D"code-line">df_sql <span class=3D"token operator">=3D<=
/span> spark<span class=3D"token punctuation">.</span>sql<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"SELECT * FROM employe=
es WHERE salary &gt; 50000"</span><span class=3D"token punctuation">)</span=
>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Aggregatio=
ns</span>
</span><span class=3D"code-line">df_sql <span class=3D"token operator">=3D<=
/span> spark<span class=3D"token punctuation">.</span>sql<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"SELECT department, AV=
G(salary) AS avg_salary FROM employees GROUP BY department"</span><span cla=
ss=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Sorting</s=
pan>
</span><span class=3D"code-line">df_sql <span class=3D"token operator">=3D<=
/span> spark<span class=3D"token punctuation">.</span>sql<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"SELECT * FROM employe=
es ORDER BY salary DESC"</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Using LIMI=
T</span>
</span><span class=3D"code-line">df_sql <span class=3D"token operator">=3D<=
/span> spark<span class=3D"token punctuation">.</span>sql<span class=3D"tok=
en punctuation">(</span><span class=3D"token string">"SELECT * FROM employe=
es LIMIT 10"</span><span class=3D"token punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Using CASE=
 WHEN</span>
</span><span class=3D"code-line">df_sql <span class=3D"token operator">=3D<=
/span> spark<span class=3D"token punctuation">.</span>sql<span class=3D"tok=
en punctuation">(</span><span class=3D"token triple-quoted-string string">"=
""
</span></span><span class=3D"code-line"><span class=3D"token triple-quoted-=
string string">    SELECT name, salary,
</span></span><span class=3D"code-line"><span class=3D"token triple-quoted-=
string string">    CASE=20
</span></span><span class=3D"code-line"><span class=3D"token triple-quoted-=
string string">        WHEN salary &gt; 50000 THEN 'High'
</span></span><span class=3D"code-line"><span class=3D"token triple-quoted-=
string string">        ELSE 'Low'
</span></span><span class=3D"code-line"><span class=3D"token triple-quoted-=
string string">    END AS salary_category
</span></span><span class=3D"code-line"><span class=3D"token triple-quoted-=
string string">    FROM employees
</span></span><span class=3D"code-line"><span class=3D"token triple-quoted-=
string string">"""</span><span class=3D"token punctuation">)</span>
</span></code><div class=3D"copied" data-code=3D"# Create a temporary SQL t=
able from a DataFrame
df.createOrReplaceTempView(&quot;employees&quot;)

# Select all columns
df_sql =3D spark.sql(&quot;SELECT * FROM employees&quot;)

# Select specific columns
df_sql =3D spark.sql(&quot;SELECT name, salary FROM employees&quot;)

# Filter data
df_sql =3D spark.sql(&quot;SELECT * FROM employees WHERE salary &gt; 50000&=
quot;)

# Aggregations
df_sql =3D spark.sql(&quot;SELECT department, AVG(salary) AS avg_salary FRO=
M employees GROUP BY department&quot;)

# Sorting
df_sql =3D spark.sql(&quot;SELECT * FROM employees ORDER BY salary DESC&quo=
t;)

# Using LIMIT
df_sql =3D spark.sql(&quot;SELECT * FROM employees LIMIT 10&quot;)

# Using CASE WHEN
df_sql =3D spark.sql(&quot;&quot;&quot;
    SELECT name, salary,
    CASE=20
        WHEN salary &gt; 50000 THEN 'High'
        ELSE 'Low'
    END AS salary_category
    FROM employees
&quot;&quot;&quot;)
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre>
<h3 id=3D"without-temp-view"><a class=3D"anchor" aria-hidden=3D"true" tabin=
dex=3D"-1" href=3D"https://www.sparkplayground.com/pyspark-cheat-sheet#with=
out-temp-view"><svg class=3D"octicon octicon-link" viewBox=3D"0 0 16 16" ve=
rsion=3D"1.1" width=3D"16" height=3D"16" aria-hidden=3D"true"><path fill-ru=
le=3D"evenodd" d=3D"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.8=
3 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.=
5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a=
2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 =
004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></=
path></svg></a>Without Temp View</h3>
<pre class=3D"language-python"><code class=3D"language-python code-highligh=
t"><span class=3D"code-line"><span class=3D"token comment"># Load any dataf=
rame</span>
</span><span class=3D"code-line">df <span class=3D"token operator">=3D</spa=
n> spark<span class=3D"token punctuation">.</span>read<span class=3D"token =
punctuation">.</span><span class=3D"token builtin">format</span><span class=
=3D"token punctuation">(</span><span class=3D"token string">'csv'</span><sp=
an class=3D"token punctuation">)</span><span class=3D"token punctuation">.<=
/span>option<span class=3D"token punctuation">(</span><span class=3D"token =
string">'header'</span><span class=3D"token punctuation">,</span> <span cla=
ss=3D"token string">'true'</span><span class=3D"token punctuation">)</span>=
<span class=3D"token punctuation">.</span>load<span class=3D"token punctuat=
ion">(</span><span class=3D"token string">'/samples/customers.csv'</span><s=
pan class=3D"token punctuation">)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Use Spark =
SQL with a variable and pass the dataframe</span>
</span><span class=3D"code-line">spark<span class=3D"token punctuation">.</=
span>sql<span class=3D"token punctuation">(</span><span class=3D"token stri=
ng">"select first_name from {customers_df}"</span><span class=3D"token punc=
tuation">,</span>customers_df <span class=3D"token operator">=3D</span> df<=
span class=3D"token punctuation">)</span><span class=3D"token punctuation">=
.</span>show<span class=3D"token punctuation">(</span><span class=3D"token =
punctuation">)</span>
</span><span class=3D"code-line">
</span><span class=3D"code-line"><span class=3D"token comment"># Load any d=
ataframe</span>
</span><span class=3D"code-line">df2 <span class=3D"token operator">=3D</sp=
an> spark<span class=3D"token punctuation">.</span>read<span class=3D"token=
 punctuation">.</span><span class=3D"token builtin">format</span><span clas=
s=3D"token punctuation">(</span><span class=3D"token string">'csv'</span><s=
pan class=3D"token punctuation">)</span><span class=3D"token punctuation">.=
</span>option<span class=3D"token punctuation">(</span><span class=3D"token=
 string">'header'</span><span class=3D"token punctuation">,</span> <span cl=
ass=3D"token string">'true'</span><span class=3D"token punctuation">)</span=
><span class=3D"token punctuation">.</span>load<span class=3D"token punctua=
tion">(</span><span class=3D"token string">'/samples/orders.csv'</span><spa=
n class=3D"token punctuation">)</span>
</span><span class=3D"code-line"><span class=3D"token comment"># Use Spark =
SQL with a variable and pass the dataframe</span>
</span><span class=3D"code-line">spark<span class=3D"token punctuation">.</=
span>sql<span class=3D"token punctuation">(</span><span class=3D"token stri=
ng">"select order_id from {orders_df}"</span><span class=3D"token punctuati=
on">,</span>orders_df <span class=3D"token operator">=3D</span> df2<span cl=
ass=3D"token punctuation">)</span><span class=3D"token punctuation">.</span=
>show<span class=3D"token punctuation">(</span><span class=3D"token punctua=
tion">)</span>
</span></code><div class=3D"copied" data-code=3D"# Load any dataframe
df =3D spark.read.format('csv').option('header', 'true').load('/samples/cus=
tomers.csv')
# Use Spark SQL with a variable and pass the dataframe
spark.sql(&quot;select first_name from {customers_df}&quot;,customers_df =
=3D df).show()

# Load any dataframe
df2 =3D spark.read.format('csv').option('header', 'true').load('/samples/or=
ders.csv')
# Use Spark SQL with a variable and pass the dataframe
spark.sql(&quot;select order_id from {orders_df}&quot;,orders_df =3D df2).s=
how()
"><svg class=3D"octicon-copy" aria-hidden=3D"true" viewBox=3D"0 0 16 16" fi=
ll=3D"currentColor" height=3D"12" width=3D"12"><path fill-rule=3D"evenodd" =
d=3D"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25=
.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.=
5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z"></path><path fill=
-rule=3D"evenodd" d=3D"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 1=
6 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a=
.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.=
25 0 00-.25-.25h-7.5z"></path></svg><svg class=3D"octicon-check" aria-hidde=
n=3D"true" viewBox=3D"0 0 16 16" fill=3D"currentColor" height=3D"12" width=
=3D"12"><path fill-rule=3D"evenodd" d=3D"M13.78 4.22a.75.75 0 010 1.06l-7.2=
5 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a=
.75.75 0 011.06 0z"></path></svg></div></pre></div></div></section></main><=
footer class=3D"bg-base-200 border-t border-base-content/10"><div class=3D"=
max-w-7xl mx-auto px-8 py-24"><div class=3D" flex lg:items-start md:flex-ro=
w md:flex-nowrap flex-wrap flex-col"><div class=3D"w-64 flex-shrink-0 md:mx=
-0 mx-auto text-center md:text-left"><a aria-current=3D"page" class=3D"flex=
 gap-2 justify-center md:justify-start items-center" href=3D"https://www.sp=
arkplayground.com/#"><img alt=3D"Spark Playground logo" fetchpriority=3D"hi=
gh" width=3D"24" height=3D"24" decoding=3D"async" data-nimg=3D"1" class=3D"=
w-6 h-6" src=3D"https://www.sparkplayground.com/_next/image?url=3D%2F_next%=
2Fstatic%2Fmedia%2Ficon.8e0bf7a0.png&amp;w=3D48&amp;q=3D75" style=3D"color:=
 transparent;"><strong class=3D"font-extrabold tracking-tight text-base md:=
text-lg">Spark Playground</strong></a><p class=3D"mt-3 text-sm text-base-co=
ntent/80">Platform to learn, practice, and solve PySpark interview question=
s to land your next DE role.</p><p class=3D"mt-3 text-sm text-base-content/=
60">Copyright =C2=A9 2025 - All rights reserved</p></div><div class=3D"flex=
-grow flex flex-wrap justify-center -mb-10 md:mt-0 mt-10 text-center"><div =
class=3D"lg:w-1/3 md:w-1/2 w-full px-4"><div class=3D"footer-title font-sem=
ibold text-base-content tracking-widest text-sm md:text-left mb-3">LINKS</d=
iv><div class=3D"flex flex-col justify-center items-center md:items-start g=
ap-2 mb-10 text-sm"><a href=3D"mailto:ajulrajar@gmail.com" target=3D"_blank=
" class=3D"link link-hover" aria-label=3D"Contact Support">Contact Us</a><a=
 class=3D"link link-hover" href=3D"https://www.sparkplayground.com/tutorial=
s">Tutorials</a><a class=3D"link link-hover" href=3D"https://www.sparkplayg=
round.com/pyspark-cheat-sheet">Cheat Sheet</a><a class=3D"link link-hover" =
href=3D"https://www.sparkplayground.com/pyspark-online-compiler">Online Com=
piler</a></div></div><div class=3D"lg:w-1/3 md:w-1/2 w-full px-4"><div clas=
s=3D"footer-title font-semibold text-base-content tracking-widest text-sm m=
d:text-left mb-3">LEGAL</div><div class=3D"flex flex-col justify-center ite=
ms-center md:items-start gap-2 mb-10 text-sm"><a class=3D"link link-hover" =
href=3D"https://www.sparkplayground.com/tos">Terms of Service</a><a class=
=3D"link link-hover" href=3D"https://www.sparkplayground.com/privacy-policy=
">Privacy Policy</a></div></div></div></div></div></footer><div style=3D"po=
sition:fixed;z-index:9999;top:16px;left:16px;right:16px;bottom:16px;pointer=
-events:none"></div><div id=3D"sentry-feedback"><template shadowmode=3D"ope=
n"><button type=3D"button" class=3D"widget__actor" aria-hidden=3D"false" ar=
ia-label=3D"Help Us Improve"><svg width=3D"20" height=3D"20" viewBox=3D"0 0=
 20 20" fill=3D"var(--actor-color, var(--foreground))"><g clipPath=3D"url(#=
clip0_57_80)"><path fill-rule=3D"evenodd" clip-rule=3D"evenodd" d=3D"M15.66=
22 15H12.3997C12.2129 14.9959 12.031 14.9396 11.8747 14.8375L8.04965 12.2H7=
.49956V19.1C7.4875 19.3348 7.3888 19.5568 7.22256 19.723C7.05632 19.8892 6.=
83435 19.9879 6.59956 20H2.04956C1.80193 19.9968 1.56535 19.8969 1.39023 19=
.7218C1.21511 19.5467 1.1153 19.3101 1.11206 19.0625V12.2H0.949652C0.824431=
 12.2017 0.700142 12.1783 0.584123 12.1311C0.468104 12.084 0.362708 12.014 =
0.274155 11.9255C0.185602 11.8369 0.115689 11.7315 0.0685419 11.6155C0.0213=
952 11.4995 -0.00202913 11.3752 -0.00034808 11.25V3.75C-0.00900498 3.62067 =
0.0092504 3.49095 0.0532651 3.36904C0.0972798 3.24712 0.166097 3.13566 0.25=
5372 3.04168C0.344646 2.94771 0.452437 2.87327 0.571937 2.82307C0.691437 2.=
77286 0.82005 2.74798 0.949652 2.75H8.04965L11.8747 0.1625C12.031 0.0603649=
 12.2129 0.00407221 12.3997 0H15.6622C15.9098 0.00323746 16.1464 0.103049 1=
6.3215 0.278167C16.4966 0.453286 16.5964 0.689866 16.5997 0.9375V3.25269C17=
.3969 3.42959 18.1345 3.83026 18.7211 4.41679C19.5322 5.22788 19.9878 6.327=
96 19.9878 7.47502C19.9878 8.62209 19.5322 9.72217 18.7211 10.5333C18.1345 =
11.1198 17.3969 11.5205 16.5997 11.6974V14.0125C16.6047 14.1393 16.5842 14.=
2659 16.5395 14.3847C16.4948 14.5035 16.4268 14.6121 16.3394 14.7042C16.252=
 14.7962 16.147 14.8698 16.0307 14.9206C15.9144 14.9714 15.7891 14.9984 15.=
6622 15ZM1.89695 10.325H1.88715V4.625H8.33715C8.52423 4.62301 8.70666 4.566=
54 8.86215 4.4625L12.6872 1.875H14.7247V13.125H12.6872L8.86215 10.4875C8.70=
666 10.3835 8.52423 10.327 8.33715 10.325H2.20217C2.15205 10.3167 2.10102 1=
0.3125 2.04956 10.3125C1.9981 10.3125 1.94708 10.3167 1.89695 10.325ZM2.987=
06 12.2V18.1625H5.66206V12.2H2.98706ZM16.5997 9.93612V5.01393C16.6536 5.023=
55 16.7072 5.03495 16.7605 5.04814C17.1202 5.13709 17.4556 5.30487 17.7425 =
5.53934C18.0293 5.77381 18.2605 6.06912 18.4192 6.40389C18.578 6.73866 18.6=
603 7.10452 18.6603 7.47502C18.6603 7.84552 18.578 8.21139 18.4192 8.54616C=
18.2605 8.88093 18.0293 9.17624 17.7425 9.41071C17.4556 9.64518 17.1202 9.8=
1296 16.7605 9.90191C16.7072 9.91509 16.6536 9.9265 16.5997 9.93612Z"></pat=
h></g><defs><clipPath id=3D"clip0_57_80"><rect width=3D"20" height=3D"20" f=
ill=3D"white"></rect></clipPath></defs></svg><span>Help Us Improve</span></=
button></template></div><next-route-announcer style=3D"position: absolute;"=
><template shadowmode=3D"open"><div aria-live=3D"assertive" id=3D"__next-ro=
ute-announcer__" role=3D"alert" style=3D"position: absolute; border: 0px; h=
eight: 1px; margin: -1px; padding: 0px; width: 1px; clip: rect(0px, 0px, 0p=
x, 0px); overflow: hidden; white-space: nowrap; overflow-wrap: normal;">PyS=
park Cheat Sheet - Quick Syntax Guide for Data Engineers</div></template></=
next-route-announcer><iframe allow=3D"join-ad-interest-group" data-tagging-=
id=3D"AW-16685153175" data-load-time=3D"1753033774790" height=3D"0" width=
=3D"0" src=3D"cid:frame-524EF03C9FC757DA4FB1B26C4CCC218C@mhtml.blink" style=
=3D"display: none; visibility: hidden;"></iframe><iframe height=3D"0" width=
=3D"0" style=3D"display: none; visibility: hidden;"></iframe><ins class=3D"=
adsbygoogle adsbygoogle-noablate" data-adsbygoogle-status=3D"done" style=3D=
"display: none !important;" data-ad-status=3D"unfilled"><div id=3D"aswift_0=
_host" style=3D"border: none; height: 0px; width: 0px; margin: 0px; padding=
: 0px; position: relative; visibility: visible; background-color: transpare=
nt; display: inline-block;"><iframe id=3D"aswift_0" name=3D"aswift_0" brows=
ingtopics=3D"true" style=3D"left:0;position:absolute;top:0;border:0;width:u=
ndefinedpx;height:undefinedpx;min-height:auto;max-height:none;min-width:aut=
o;max-width:none;" sandbox=3D"allow-forms allow-popups allow-popups-to-esca=
pe-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-act=
ivation" frameborder=3D"0" marginwidth=3D"0" marginheight=3D"0" vspace=3D"0=
" hspace=3D"0" allowtransparency=3D"true" scrolling=3D"no" allow=3D"attribu=
tion-reporting; run-ad-auction" src=3D"cid:frame-3D6702DFB8862A0A32634D977C=
F43032@mhtml.blink" data-google-container-id=3D"a!1" tabindex=3D"0" title=
=3D"Advertisement" aria-label=3D"Advertisement" data-load-complete=3D"true"=
></iframe></div></ins><iframe src=3D"cid:frame-D147794B465AD97FD18AEB0FED98=
4598@mhtml.blink" width=3D"0" height=3D"0" style=3D"display: none;"></ifram=
e></body><iframe id=3D"google_esf" name=3D"google_esf" src=3D"cid:frame-99E=
B47DF2ADDCAAD8C80A2A0D44BEBF6@mhtml.blink" style=3D"display: none;"></ifram=
e></html>
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: image/webp
Content-Transfer-Encoding: base64
Content-Location: https://www.sparkplayground.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ficon.8e0bf7a0.png&w=48&q=75

UklGRqABAABXRUJQVlA4WAoAAAAQAAAAHwAAHwAAQUxQSJkAAAABgFzbttrm6HkstWRqAwtjuwGG
QihQB7+/dMN5WhllFhETANQygjPjs1H0p+vA6SDHAKNxr1KBpe7qGEbrUek1BbrrsY2Rn+UKdp0L
6CspPKkLQ3kVE1gqVbGHVTUHWP/7rP7WHobyKsbQV4pzdSE/yaNedc4xWo/yFOp6aGEYzTuVCix1
18AAo+jMj4dfHxfdAuNzLSM4MwAAVlA4IOAAAADwBQCdASogACAAPn0yk0ekoyGhN+gAkA+JbACd
MoM83cBtmLsA3jMiHRCtWAUmYMVVnBQxUjlysAD9dIcZmQDx3dfZw6Jkj6sWNnPIBK0SG1EJgASL
uMg8seuf/SssI2sv/6gz/+QZ65AscRMr9KFPrb4gHUGMB9hHGCQ4D8fi23/dSdJBQfDwcpSd4Ffj
yPuGxAd3AtmCNeDSFRgpkfcSsGLsAUk+g+vMgf+189qTn/ydgpODoRo/sJ6Al8H26INZzzURwhn8
S6Ll6uHbMtHIRn+yQS0MG37wVNT7/AAAAA==

------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: image/webp
Content-Transfer-Encoding: base64
Content-Location: https://www.sparkplayground.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ficon.8e0bf7a0.png&w=64&q=75

UklGRqABAABXRUJQVlA4WAoAAAAQAAAAHwAAHwAAQUxQSJkAAAABgFzbttrm6HkstWRqAwtjuwGG
QihQB7+/dMN5WhllFhETANQygjPjs1H0p+vA6SDHAKNxr1KBpe7qGEbrUek1BbrrsY2Rn+UKdp0L
6CspPKkLQ3kVE1gqVbGHVTUHWP/7rP7WHobyKsbQV4pzdSE/yaNedc4xWo/yFOp6aGEYzTuVCix1
18AAo+jMj4dfHxfdAuNzLSM4MwAAVlA4IOAAAADwBQCdASogACAAPn0yk0ekoyGhN+gAkA+JbACd
MoM83cBtmLsA3jMiHRCtWAUmYMVVnBQxUjlysAD9dIcZmQDx3dfZw6Jkj6sWNnPIBK0SG1EJgASL
uMg8seuf/SssI2sv/6gz/+QZ65AscRMr9KFPrb4gHUGMB9hHGCQ4D8fi23/dSdJBQfDwcpSd4Ffj
yPuGxAd3AtmCNeDSFRgpkfcSsGLsAUk+g+vMgf+189qTn/ydgpODoRo/sJ6Al8H26INZzzURwhn8
S6Ll6uHbMtHIRn+yQS0MG37wVNT7/AAAAA==

------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://cdn.paddle.com/paddle/v2/assets/css/paddle.css

@charset "utf-8";

.paddle-hidden { display: none !important; }

.paddle-visible { display: block !important; }

.paddle_styled_button { -webkit-font-smoothing: antialiased; appearance: no=
ne; }

.paddle_styled_button.light { font-family: "Helvetica Neue", Helvetica, Ari=
al, "lucida grande", tahoma, verdana, arial, sans-serif; text-decoration: n=
one; box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 1px; border-radius: 2px; color=
: rgb(78, 86, 101); padding: 5px 9px; box-sizing: content-box; border-width=
: 1px; border-style: solid; border-image: initial; border-color: rgb(205, 2=
06, 208) rgb(197, 198, 200) rgb(182, 183, 185); font-weight: bold; font-siz=
e: 13px; text-shadow: rgb(255, 255, 255) 0px 1px 0px; background: linear-gr=
adient(rgb(253, 253, 253) 0%, rgb(246, 247, 248) 100%); display: inline-blo=
ck; outline: none; cursor: pointer; }

.paddle_styled_button.light:active { background: linear-gradient(rgb(246, 2=
47, 248) 0%, rgb(253, 253, 253) 100%); box-shadow: rgba(0, 0, 0, 0.1) 0px 1=
px 1px inset; border-color: rgb(182, 183, 185) rgb(197, 198, 200) rgb(205, =
206, 208); }

.paddle_styled_button.green { font-family: "Helvetica Neue", Helvetica, Ari=
al, "lucida grande", tahoma, verdana, arial, sans-serif; text-decoration: n=
one; box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 1px; border-radius: 2px; paddi=
ng: 5px 9px; box-sizing: content-box; border-width: 1px; border-style: soli=
d; border-image: initial; font-weight: bold; font-size: 13px; background: l=
inear-gradient(rgb(116, 201, 55) 0%, rgb(103, 177, 49) 100%); border-color:=
 rgb(96, 166, 46) rgb(81, 159, 24) rgb(64, 151, 1); text-shadow: rgba(0, 0,=
 0, 0.22) 0px -1px 0px; display: inline-block; outline: none; cursor: point=
er; color: rgb(255, 255, 255) !important; }

.paddle_styled_button.green:active { background: linear-gradient(rgb(103, 1=
77, 49) 0%, rgb(116, 201, 55) 100%); box-shadow: rgba(0, 0, 0, 0.1) 0px 1px=
 1px inset; border-color: rgb(64, 151, 1) rgb(81, 159, 24) rgb(96, 166, 46)=
; }

.paddle_styled_button.dark { font-family: "Helvetica Neue", Helvetica, Aria=
l, "lucida grande", tahoma, verdana, arial, sans-serif; text-decoration: no=
ne; box-shadow: rgba(0, 0, 0, 0.18) 0px 1px 1px; border-radius: 2px; color:=
 rgb(255, 255, 255); padding: 5px 9px; box-sizing: content-box; border-widt=
h: 1px; border-style: solid; border-image: initial; border-color: rgb(73, 7=
3, 73) rgb(48, 48, 48) rgb(29, 29, 29); font-weight: bold; font-size: 13px;=
 text-shadow: rgb(65, 65, 65) 0px 1px 0px; background: linear-gradient(rgb(=
99, 99, 99) 0%, rgb(75, 75, 75) 100%); display: inline-block; outline: none=
; cursor: pointer; }

.paddle_styled_button.dark:active { background: linear-gradient(rgb(75, 75,=
 75) 0%, rgb(99, 99, 99) 100%); box-shadow: rgba(0, 0, 0, 0.2) 0px 1px 1px =
inset; border-color: rgb(29, 29, 29) rgb(48, 48, 48) rgb(73, 73, 73); }

.paddle_styled_button.large { padding: 9px 18px; font-size: 15px; }

.experiment-as-wide-overlay { left: calc(50% - 670px) !important; }

@media only screen and (prefers-color-scheme: dark) {
  iframe.paddle-frame { color-scheme: auto !important; }
}

body:has(iframe.paddle-frame.paddle-frame-overlay) { position: static !impo=
rtant; }
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.sparkplayground.com/_next/static/css/6b786b77af9d8e90.css

@charset "utf-8";

@media (prefers-color-scheme: dark) {
  .wmde-markdown, .wmde-markdown-var { color-scheme: dark; --color-prettyli=
ghts-syntax-comment: #8b949e; --color-prettylights-syntax-constant: #79c0ff=
; --color-prettylights-syntax-entity: #d2a8ff; --color-prettylights-syntax-=
storage-modifier-import: #c9d1d9; --color-prettylights-syntax-entity-tag: #=
7ee787; --color-prettylights-syntax-keyword: #ff7b72; --color-prettylights-=
syntax-string: #a5d6ff; --color-prettylights-syntax-variable: #ffa657; --co=
lor-prettylights-syntax-brackethighlighter-unmatched: #f85149; --color-pret=
tylights-syntax-invalid-illegal-text: #f0f6fc; --color-prettylights-syntax-=
invalid-illegal-bg: #8e1519; --color-prettylights-syntax-carriage-return-te=
xt: #f0f6fc; --color-prettylights-syntax-carriage-return-bg: #b62324; --col=
or-prettylights-syntax-string-regexp: #7ee787; --color-prettylights-syntax-=
markup-list: #f2cc60; --color-prettylights-syntax-markup-heading: #1f6feb; =
--color-prettylights-syntax-markup-italic: #c9d1d9; --color-prettylights-sy=
ntax-markup-bold: #c9d1d9; --color-prettylights-syntax-markup-deleted-text:=
 #ffdcd7; --color-prettylights-syntax-markup-deleted-bg: #67060c; --color-p=
rettylights-syntax-markup-inserted-text: #aff5b4; --color-prettylights-synt=
ax-markup-inserted-bg: #033a16; --color-prettylights-syntax-markup-changed-=
text: #ffdfb6; --color-prettylights-syntax-markup-changed-bg: #5a1e02; --co=
lor-prettylights-syntax-markup-ignored-text: #c9d1d9; --color-prettylights-=
syntax-markup-ignored-bg: #1158c7; --color-prettylights-syntax-meta-diff-ra=
nge: #d2a8ff; --color-prettylights-syntax-brackethighlighter-angle: #8b949e=
; --color-prettylights-syntax-sublimelinter-gutter-mark: #484f58; --color-p=
rettylights-syntax-constant-other-reference-link: #a5d6ff; --color-fg-defau=
lt: #c9d1d9; --color-fg-muted: #8b949e; --color-fg-subtle: #484f58; --color=
-canvas-default: #0d1117; --color-canvas-subtle: #161b22; --color-border-de=
fault: #30363d; --color-border-muted: #21262d; --color-neutral-muted: hsla(=
215,8%,47%,.4); --color-accent-fg: #58a6ff; --color-accent-emphasis: #1f6fe=
b; --color-attention-subtle: rgba(187,128,9,.15); --color-danger-fg: #f8514=
9; --color-danger-emphasis: #da3633; --color-attention-fg: #d29922; --color=
-attention-emphasis: #9e6a03; --color-done-fg: #a371f7; --color-done-emphas=
is: #8957e5; --color-success-fg: #3fb950; --color-success-emphasis: #238636=
; --color-copied-active-bg: #2e9b33; }
}

@media (prefers-color-scheme: light) {
  .wmde-markdown, .wmde-markdown-var { color-scheme: light; --color-prettyl=
ights-syntax-comment: #6e7781; --color-prettylights-syntax-constant: #0550a=
e; --color-prettylights-syntax-entity: #8250df; --color-prettylights-syntax=
-storage-modifier-import: #24292f; --color-prettylights-syntax-entity-tag: =
#116329; --color-prettylights-syntax-keyword: #cf222e; --color-prettylights=
-syntax-string: #0a3069; --color-prettylights-syntax-variable: #953800; --c=
olor-prettylights-syntax-brackethighlighter-unmatched: #82071e; --color-pre=
ttylights-syntax-invalid-illegal-text: #f6f8fa; --color-prettylights-syntax=
-invalid-illegal-bg: #82071e; --color-prettylights-syntax-carriage-return-t=
ext: #f6f8fa; --color-prettylights-syntax-carriage-return-bg: #cf222e; --co=
lor-prettylights-syntax-string-regexp: #116329; --color-prettylights-syntax=
-markup-list: #3b2300; --color-prettylights-syntax-markup-heading: #0550ae;=
 --color-prettylights-syntax-markup-italic: #24292f; --color-prettylights-s=
yntax-markup-bold: #24292f; --color-prettylights-syntax-markup-deleted-text=
: #82071e; --color-prettylights-syntax-markup-deleted-bg: #ffebe9; --color-=
prettylights-syntax-markup-inserted-text: #116329; --color-prettylights-syn=
tax-markup-inserted-bg: #dafbe1; --color-prettylights-syntax-markup-changed=
-text: #953800; --color-prettylights-syntax-markup-changed-bg: #ffd8b5; --c=
olor-prettylights-syntax-markup-ignored-text: #eaeef2; --color-prettylights=
-syntax-markup-ignored-bg: #0550ae; --color-prettylights-syntax-meta-diff-r=
ange: #8250df; --color-prettylights-syntax-brackethighlighter-angle: #57606=
a; --color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f; --color-=
prettylights-syntax-constant-other-reference-link: #0a3069; --color-fg-defa=
ult: #24292f; --color-fg-muted: #57606a; --color-fg-subtle: #6e7781; --colo=
r-canvas-default: #fff; --color-canvas-subtle: #f6f8fa; --color-border-defa=
ult: #d0d7de; --color-border-muted: #d8dee4; --color-neutral-muted: rgba(17=
5,184,193,.2); --color-accent-fg: #0969da; --color-accent-emphasis: #0969da=
; --color-attention-subtle: #fff8c5; --color-danger-fg: #d1242f; --color-da=
nger-emphasis: #cf222e; --color-attention-fg: #9a6700; --color-attention-em=
phasis: #9a6700; --color-done-fg: #8250df; --color-done-emphasis: #8250df; =
--color-success-fg: #1a7f37; --color-success-emphasis: #1f883d; --color-cop=
ied-active-bg: #2e9b33; }
}

.wmde-markdown-var[data-color-mode*=3D"dark"], .wmde-markdown[data-color-mo=
de*=3D"dark"], [data-color-mode*=3D"dark"] .wmde-markdown, [data-color-mode=
*=3D"dark"] .wmde-markdown-var, body[data-color-mode*=3D"dark"] { color-sch=
eme: dark; --color-prettylights-syntax-comment: #8b949e; --color-prettyligh=
ts-syntax-constant: #79c0ff; --color-prettylights-syntax-entity: #d2a8ff; -=
-color-prettylights-syntax-storage-modifier-import: #c9d1d9; --color-pretty=
lights-syntax-entity-tag: #7ee787; --color-prettylights-syntax-keyword: #ff=
7b72; --color-prettylights-syntax-string: #a5d6ff; --color-prettylights-syn=
tax-variable: #ffa657; --color-prettylights-syntax-brackethighlighter-unmat=
ched: #f85149; --color-prettylights-syntax-invalid-illegal-text: #f0f6fc; -=
-color-prettylights-syntax-invalid-illegal-bg: #8e1519; --color-prettylight=
s-syntax-carriage-return-text: #f0f6fc; --color-prettylights-syntax-carriag=
e-return-bg: #b62324; --color-prettylights-syntax-string-regexp: #7ee787; -=
-color-prettylights-syntax-markup-list: #f2cc60; --color-prettylights-synta=
x-markup-heading: #1f6feb; --color-prettylights-syntax-markup-italic: #c9d1=
d9; --color-prettylights-syntax-markup-bold: #c9d1d9; --color-prettylights-=
syntax-markup-deleted-text: #ffdcd7; --color-prettylights-syntax-markup-del=
eted-bg: #67060c; --color-prettylights-syntax-markup-inserted-text: #aff5b4=
; --color-prettylights-syntax-markup-inserted-bg: #033a16; --color-prettyli=
ghts-syntax-markup-changed-text: #ffdfb6; --color-prettylights-syntax-marku=
p-changed-bg: #5a1e02; --color-prettylights-syntax-markup-ignored-text: #c9=
d1d9; --color-prettylights-syntax-markup-ignored-bg: #1158c7; --color-prett=
ylights-syntax-meta-diff-range: #d2a8ff; --color-prettylights-syntax-bracke=
thighlighter-angle: #8b949e; --color-prettylights-syntax-sublimelinter-gutt=
er-mark: #484f58; --color-prettylights-syntax-constant-other-reference-link=
: #a5d6ff; --color-fg-default: #c9d1d9; --color-fg-muted: #8b949e; --color-=
fg-subtle: #484f58; --color-canvas-default: #0d1117; --color-canvas-subtle:=
 #161b22; --color-border-default: #30363d; --color-border-muted: #21262d; -=
-color-neutral-muted: hsla(215,8%,47%,.4); --color-accent-fg: #58a6ff; --co=
lor-accent-emphasis: #1f6feb; --color-attention-subtle: rgba(187,128,9,.15)=
; --color-danger-fg: #f85149; }

.wmde-markdown-var[data-color-mode*=3D"light"], .wmde-markdown[data-color-m=
ode*=3D"light"], [data-color-mode*=3D"light"] .wmde-markdown, [data-color-m=
ode*=3D"light"] .wmde-markdown-var, body[data-color-mode*=3D"light"] { colo=
r-scheme: light; --color-prettylights-syntax-comment: #6e7781; --color-pret=
tylights-syntax-constant: #0550ae; --color-prettylights-syntax-entity: #825=
0df; --color-prettylights-syntax-storage-modifier-import: #24292f; --color-=
prettylights-syntax-entity-tag: #116329; --color-prettylights-syntax-keywor=
d: #cf222e; --color-prettylights-syntax-string: #0a3069; --color-prettyligh=
ts-syntax-variable: #953800; --color-prettylights-syntax-brackethighlighter=
-unmatched: #82071e; --color-prettylights-syntax-invalid-illegal-text: #f6f=
8fa; --color-prettylights-syntax-invalid-illegal-bg: #82071e; --color-prett=
ylights-syntax-carriage-return-text: #f6f8fa; --color-prettylights-syntax-c=
arriage-return-bg: #cf222e; --color-prettylights-syntax-string-regexp: #116=
329; --color-prettylights-syntax-markup-list: #3b2300; --color-prettylights=
-syntax-markup-heading: #0550ae; --color-prettylights-syntax-markup-italic:=
 #24292f; --color-prettylights-syntax-markup-bold: #24292f; --color-prettyl=
ights-syntax-markup-deleted-text: #82071e; --color-prettylights-syntax-mark=
up-deleted-bg: #ffebe9; --color-prettylights-syntax-markup-inserted-text: #=
116329; --color-prettylights-syntax-markup-inserted-bg: #dafbe1; --color-pr=
ettylights-syntax-markup-changed-text: #953800; --color-prettylights-syntax=
-markup-changed-bg: #ffd8b5; --color-prettylights-syntax-markup-ignored-tex=
t: #eaeef2; --color-prettylights-syntax-markup-ignored-bg: #0550ae; --color=
-prettylights-syntax-meta-diff-range: #8250df; --color-prettylights-syntax-=
brackethighlighter-angle: #57606a; --color-prettylights-syntax-sublimelinte=
r-gutter-mark: #8c959f; --color-prettylights-syntax-constant-other-referenc=
e-link: #0a3069; --color-fg-default: #24292f; --color-fg-muted: #57606a; --=
color-fg-subtle: #6e7781; --color-canvas-default: #fff; --color-canvas-subt=
le: #f6f8fa; --color-border-default: #d0d7de; --color-border-muted: #d8dee4=
; --color-neutral-muted: rgba(175,184,193,.2); --color-accent-fg: #0969da; =
--color-accent-emphasis: #0969da; --color-attention-subtle: #fff8c5; --colo=
r-danger-fg: #cf222e; }

.wmde-markdown { text-size-adjust: 100%; font-family: -apple-system, BlinkM=
acSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple=
 Color Emoji", "Segoe UI Emoji"; font-size: 16px; line-height: 1.5; overflo=
w-wrap: break-word; color: var(--color-fg-default); background-color: var(-=
-color-canvas-default); }

.wmde-markdown details, .wmde-markdown figcaption, .wmde-markdown figure { =
display: block; }

.wmde-markdown summary { display: list-item; }

.wmde-markdown [hidden] { display: none !important; }

.wmde-markdown a { background-color: transparent; color: var(--color-accent=
-fg); text-decoration: none; }

.wmde-markdown a:active, .wmde-markdown a:hover { outline-width: 0px; }

.wmde-markdown abbr[title] { border-bottom: none; text-decoration: underlin=
e dotted; }

.wmde-markdown b, .wmde-markdown strong { font-weight: 600; }

.wmde-markdown dfn { font-style: italic; }

.wmde-markdown h1 { margin: 0.67em 0px; font-weight: 600; padding-bottom: 0=
.3em; font-size: 2em; border-bottom: 1px solid var(--color-border-muted); }

.wmde-markdown mark { background-color: var(--color-attention-subtle); colo=
r: var(--color-text-primary); }

.wmde-markdown small { font-size: 90%; }

.wmde-markdown sub, .wmde-markdown sup { font-size: 75%; line-height: 0; po=
sition: relative; vertical-align: baseline; }

.wmde-markdown sub { bottom: -0.25em; }

.wmde-markdown sup { top: -0.5em; }

.wmde-markdown img { display: inline-block; border-style: none; max-width: =
100%; box-sizing: content-box; background-color: var(--color-canvas-default=
); }

.wmde-markdown code, .wmde-markdown kbd, .wmde-markdown pre, .wmde-markdown=
 samp { font-family: monospace, monospace; font-size: 1em; }

.wmde-markdown figure { margin: 1em 40px; }

.wmde-markdown hr { box-sizing: content-box; overflow: hidden; background-i=
mage: initial; background-position: initial; background-size: initial; back=
ground-repeat: initial; background-attachment: initial; background-origin: =
initial; background-clip: initial; border-top: 0px; border-right: 0px; bord=
er-left: 0px; border-image: initial; border-bottom: 1px solid var(--color-b=
order-muted); height: 0.25em; padding: 0px; margin: 24px 0px; background-co=
lor: var(--color-border-default); }

.wmde-markdown input { font: inherit; margin: 0px; overflow: visible; }

.wmde-markdown [type=3D"button"], .wmde-markdown [type=3D"reset"], .wmde-ma=
rkdown [type=3D"submit"] { appearance: button; }

.wmde-markdown [type=3D"checkbox"], .wmde-markdown [type=3D"radio"] { box-s=
izing: border-box; padding: 0px; }

.wmde-markdown [type=3D"number"]::-webkit-inner-spin-button, .wmde-markdown=
 [type=3D"number"]::-webkit-outer-spin-button { height: auto; }

.wmde-markdown [type=3D"search"] { appearance: textfield; outline-offset: -=
2px; }

.wmde-markdown [type=3D"search"]::-webkit-search-cancel-button, .wmde-markd=
own [type=3D"search"]::-webkit-search-decoration { appearance: none; }

.wmde-markdown ::-webkit-input-placeholder { color: inherit; opacity: 0.54;=
 }

.wmde-markdown ::-webkit-file-upload-button { appearance: button; font: inh=
erit; }

.wmde-markdown a:hover { text-decoration: underline; }

.wmde-markdown hr::after, .wmde-markdown hr::before { display: table; conte=
nt: ""; }

.wmde-markdown hr::after { clear: both; }

.wmde-markdown table { border-spacing: 0px; border-collapse: collapse; disp=
lay: block; width: max-content; max-width: 100%; }

.wmde-markdown td, .wmde-markdown th { padding: 0px; }

.wmde-markdown details summary { cursor: pointer; }

.wmde-markdown details:not([open]) > :not(summary) { display: none !importa=
nt; }

.wmde-markdown kbd { display: inline-block; padding: 3px 5px; font: 11px / =
10px ui-monospace, SFMono-Regular, "SF Mono", Menlo, Consolas, "Liberation =
Mono", monospace; color: var(--color-fg-default); vertical-align: middle; b=
ackground-color: var(--color-canvas-subtle); border: 1px solid var(--color-=
neutral-muted); border-radius: 6px; box-shadow: inset 0 -1px 0 var(--color-=
neutral-muted); }

.wmde-markdown h1, .wmde-markdown h2, .wmde-markdown h3, .wmde-markdown h4,=
 .wmde-markdown h5, .wmde-markdown h6 { margin-top: 24px; margin-bottom: 16=
px; font-weight: 600; line-height: 1.25; }

.wmde-markdown h2 { font-weight: 600; padding-bottom: 0.3em; font-size: 1.5=
em; border-bottom: 1px solid var(--color-border-muted); }

.wmde-markdown h3 { font-weight: 600; font-size: 1.25em; }

.wmde-markdown h4 { font-weight: 600; font-size: 1em; }

.wmde-markdown h5 { font-weight: 600; font-size: 0.875em; }

.wmde-markdown h6 { font-weight: 600; font-size: 0.85em; color: var(--color=
-fg-muted); }

.wmde-markdown p { margin-top: 0px; margin-bottom: 10px; }

.wmde-markdown blockquote { margin: 0px; padding: 0px 1em; color: var(--col=
or-fg-muted); border-left: .25em solid var(--color-border-default); }

.wmde-markdown ol, .wmde-markdown ul { margin-top: 0px; margin-bottom: 0px;=
 padding-left: 2em; }

.wmde-markdown ol ol, .wmde-markdown ul ol { list-style-type: lower-roman; =
}

.wmde-markdown ol ol ol, .wmde-markdown ol ul ol, .wmde-markdown ul ol ol, =
.wmde-markdown ul ul ol { list-style-type: lower-alpha; }

.wmde-markdown dd { margin-left: 0px; }

.wmde-markdown code, .wmde-markdown pre, .wmde-markdown tt { font-family: u=
i-monospace, SFMono-Regular, "SF Mono", Menlo, Consolas, "Liberation Mono",=
 monospace; font-size: 12px; }

.wmde-markdown pre { margin-top: 0px; margin-bottom: 0px; overflow-wrap: no=
rmal; }

.wmde-markdown .octicon { display: inline-block; vertical-align: text-botto=
m; fill: currentcolor; overflow: visible !important; }

.wmde-markdown ::placeholder { color: var(--color-fg-subtle); opacity: 1; }

.wmde-markdown input::-webkit-inner-spin-button, .wmde-markdown input::-web=
kit-outer-spin-button { margin: 0px; appearance: none; }

.wmde-markdown [data-catalyst] { display: block; }

.wmde-markdown::after, .wmde-markdown::before { display: table; content: ""=
; }

.wmde-markdown::after { clear: both; }

.wmde-markdown > :first-child { margin-top: 0px !important; }

.wmde-markdown > :last-child { margin-bottom: 0px !important; }

.wmde-markdown a:not([href]) { color: inherit; text-decoration: none; }

.wmde-markdown .absent { color: var(--color-danger-fg); }

.wmde-markdown a.anchor { float: left; padding-right: 4px; margin-left: -20=
px; line-height: 1; }

.wmde-markdown .anchor:focus { outline: none; }

.wmde-markdown blockquote, .wmde-markdown details, .wmde-markdown dl, .wmde=
-markdown ol, .wmde-markdown p, .wmde-markdown pre, .wmde-markdown table, .=
wmde-markdown ul { margin-top: 0px; margin-bottom: 16px; }

.wmde-markdown blockquote > :first-child { margin-top: 0px; }

.wmde-markdown blockquote > :last-child { margin-bottom: 0px; }

.wmde-markdown sup > a::before { content: "["; }

.wmde-markdown sup > a::after { content: "]"; }

.wmde-markdown h1 .octicon-link, .wmde-markdown h2 .octicon-link, .wmde-mar=
kdown h3 .octicon-link, .wmde-markdown h4 .octicon-link, .wmde-markdown h5 =
.octicon-link, .wmde-markdown h6 .octicon-link { color: var(--color-fg-defa=
ult); vertical-align: middle; visibility: hidden; }

.wmde-markdown h1:hover .anchor, .wmde-markdown h2:hover .anchor, .wmde-mar=
kdown h3:hover .anchor, .wmde-markdown h4:hover .anchor, .wmde-markdown h5:=
hover .anchor, .wmde-markdown h6:hover .anchor { text-decoration: none; }

.wmde-markdown h1:hover .anchor .octicon-link, .wmde-markdown h2:hover .anc=
hor .octicon-link, .wmde-markdown h3:hover .anchor .octicon-link, .wmde-mar=
kdown h4:hover .anchor .octicon-link, .wmde-markdown h5:hover .anchor .octi=
con-link, .wmde-markdown h6:hover .anchor .octicon-link { visibility: visib=
le; }

.wmde-markdown h1 code, .wmde-markdown h1 tt, .wmde-markdown h2 code, .wmde=
-markdown h2 tt, .wmde-markdown h3 code, .wmde-markdown h3 tt, .wmde-markdo=
wn h4 code, .wmde-markdown h4 tt, .wmde-markdown h5 code, .wmde-markdown h5=
 tt, .wmde-markdown h6 code, .wmde-markdown h6 tt { padding: 0px 0.2em; fon=
t-size: inherit; }

.wmde-markdown ol.no-list, .wmde-markdown ul.no-list { padding: 0px; list-s=
tyle-type: none; }

.wmde-markdown ol[type=3D"1"] { list-style-type: decimal; }

.wmde-markdown ol[type=3D"a"] { list-style-type: lower-alpha; }

.wmde-markdown ol[type=3D"i"] { list-style-type: lower-roman; }

.wmde-markdown div > ol:not([type]) { list-style-type: decimal; }

.wmde-markdown ol ol, .wmde-markdown ol ul, .wmde-markdown ul ol, .wmde-mar=
kdown ul ul { margin-top: 0px; margin-bottom: 0px; }

.wmde-markdown li > p { margin-top: 16px; }

.wmde-markdown li + li { margin-top: 0.25em; }

.wmde-markdown dl { padding: 0px; }

.wmde-markdown dl dt { padding: 0px; margin-top: 16px; font-size: 1em; font=
-style: italic; font-weight: 600; }

.wmde-markdown dl dd { padding: 0px 16px; margin-bottom: 16px; }

.wmde-markdown table th { font-weight: 600; }

.wmde-markdown table td, .wmde-markdown table th { padding: 6px 13px; borde=
r: 1px solid var(--color-border-default); }

.wmde-markdown table tr { background-color: var(--color-canvas-default); bo=
rder-top: 1px solid var(--color-border-muted); }

.wmde-markdown table tr:nth-child(2n) { background-color: var(--color-canva=
s-subtle); }

.wmde-markdown table img { background-color: transparent; }

.wmde-markdown img[align=3D"right"] { padding-left: 20px; }

.wmde-markdown img[align=3D"left"] { padding-right: 20px; }

.wmde-markdown .emoji { max-width: none; vertical-align: text-top; backgrou=
nd-color: transparent; }

.wmde-markdown span.frame { display: block; overflow: hidden; }

.wmde-markdown span.frame > span { display: block; float: left; width: auto=
; padding: 7px; margin: 13px 0px 0px; overflow: hidden; border: 1px solid v=
ar(--color-border-default); }

.wmde-markdown span.frame span img { display: block; float: left; }

.wmde-markdown span.frame span span { display: block; padding: 5px 0px 0px;=
 clear: both; color: var(--color-fg-default); }

.wmde-markdown span.align-center { display: block; overflow: hidden; clear:=
 both; }

.wmde-markdown span.align-center > span { display: block; margin: 13px auto=
 0px; overflow: hidden; text-align: center; }

.wmde-markdown span.align-center span img { margin: 0px auto; text-align: c=
enter; }

.wmde-markdown span.align-right { display: block; overflow: hidden; clear: =
both; }

.wmde-markdown span.align-right > span { display: block; margin: 13px 0px 0=
px; overflow: hidden; text-align: right; }

.wmde-markdown span.align-right span img { margin: 0px; text-align: right; =
}

.wmde-markdown span.float-left { display: block; float: left; margin-right:=
 13px; overflow: hidden; }

.wmde-markdown span.float-left span { margin: 13px 0px 0px; }

.wmde-markdown span.float-right { display: block; float: right; margin-left=
: 13px; overflow: hidden; }

.wmde-markdown span.float-right > span { display: block; margin: 13px auto =
0px; overflow: hidden; text-align: right; }

.wmde-markdown code, .wmde-markdown tt { padding: 0.2em 0.4em; margin: 0px;=
 font-size: 85%; background-color: var(--color-neutral-muted); border-radiu=
s: 6px; }

.wmde-markdown code br, .wmde-markdown tt br { display: none; }

.wmde-markdown del code { text-decoration: inherit; }

.wmde-markdown pre code { font-size: 100%; }

.wmde-markdown pre > code { padding: 0px; margin: 0px; word-break: normal; =
white-space: pre; background: transparent; border: 0px; }

.wmde-markdown pre { font-size: 85%; line-height: 1.45; background-color: v=
ar(--color-canvas-subtle); border-radius: 6px; }

.wmde-markdown pre code, .wmde-markdown pre tt { display: inline; padding: =
0px; margin: 0px; overflow: visible; line-height: inherit; overflow-wrap: n=
ormal; background-color: transparent; border: 0px; }

.wmde-markdown pre > code { padding: 16px; overflow: auto; display: block; =
}

.wmde-markdown .csv-data td, .wmde-markdown .csv-data th { padding: 5px; ov=
erflow: hidden; font-size: 12px; line-height: 1; text-align: left; white-sp=
ace: nowrap; }

.wmde-markdown .csv-data .blob-num { padding: 10px 8px 9px; text-align: rig=
ht; background: var(--color-canvas-default); border: 0px; }

.wmde-markdown .csv-data tr { border-top: 0px; }

.wmde-markdown .csv-data th { font-weight: 600; background: var(--color-can=
vas-subtle); border-top: 0px; }

.wmde-markdown .footnotes { font-size: 12px; color: var(--color-fg-muted); =
border-top: 1px solid var(--color-border-default); }

.wmde-markdown .footnotes ol { padding-left: 16px; }

.wmde-markdown .footnotes li { position: relative; }

.wmde-markdown .footnotes li:target::before { position: absolute; inset: -8=
px -8px -8px -24px; pointer-events: none; content: ""; border: 2px solid va=
r(--color-accent-emphasis); border-radius: 6px; }

.wmde-markdown .footnotes li:target { color: var(--color-fg-default); }

.wmde-markdown .footnotes .data-footnote-backref g-emoji { font-family: mon=
ospace; }

.wmde-markdown .task-list-item { list-style-type: none; }

.wmde-markdown .task-list-item label { font-weight: 400; }

.wmde-markdown .task-list-item.enabled label { cursor: pointer; }

.wmde-markdown .task-list-item + .wmde-markdown .task-list-item { margin-to=
p: 3px; }

.wmde-markdown .task-list-item .handle { display: none; }

.wmde-markdown .contains-task-list input[type=3D"checkbox"], .wmde-markdown=
 .task-list-item-checkbox { margin: 0px 0.2em 0.25em -1.6em; vertical-align=
: middle; }

.wmde-markdown .contains-task-list:dir(rtl) .task-list-item-checkbox, .wmde=
-markdown .contains-task-list:dir(rtl) input[type=3D"checkbox"] { margin: 0=
px -1.6em 0.25em 0.2em; }

.wmde-markdown ::-webkit-calendar-picker-indicator { filter: invert(50%); }

.wmde-markdown pre { position: relative; }

.wmde-markdown pre .copied { visibility: hidden; display: flex; position: a=
bsolute; cursor: pointer; color: var(--color-fg-default); top: 6px; right: =
6px; border-radius: 5px; background: var(--color-border-default); padding: =
6px; font-size: 12px; transition: 0.3s; }

.wmde-markdown pre .copied .octicon-copy { display: block; }

.wmde-markdown pre .copied .octicon-check { display: none; }

.wmde-markdown pre:hover .copied { visibility: visible; }

.wmde-markdown pre:hover .copied:hover { background: var(--color-prettyligh=
ts-syntax-entity-tag); color: var(--color-canvas-default); }

.wmde-markdown pre .copied.active, .wmde-markdown pre:hover .copied:active =
{ background: var(--color-copied-active-bg); color: var(--color-canvas-defa=
ult); }

.wmde-markdown pre .active .octicon-copy { display: none; }

.wmde-markdown pre .active .octicon-check { display: block; }

.wmde-markdown .markdown-alert { padding: 0.5rem 1em; color: inherit; margi=
n-bottom: 16px; border-left: .25em solid var(--borderColor-default,var(--co=
lor-border-default)); }

.wmde-markdown .markdown-alert > :last-child { margin-bottom: 0px !importan=
t; }

.wmde-markdown .markdown-alert .markdown-alert-title { display: flex; align=
-items: center; line-height: 1; font-weight: 500; font-size: 14px; }

.wmde-markdown .markdown-alert .markdown-alert-title svg.octicon { margin-r=
ight: var(--base-size-8,8px) !important; }

.wmde-markdown .markdown-alert.markdown-alert-note { border-left-color: var=
(--borderColor-accent-emphasis,var(--color-accent-emphasis)); }

.wmde-markdown .markdown-alert.markdown-alert-note .markdown-alert-title { =
color: var(--fgColor-accent,var(--color-accent-fg)); }

.wmde-markdown .markdown-alert.markdown-alert-tip { border-left-color: var(=
--borderColor-success-emphasis,var(--color-success-emphasis)); }

.wmde-markdown .markdown-alert.markdown-alert-tip .markdown-alert-title { c=
olor: var(--fgColor-success,var(--color-success-fg)); }

.wmde-markdown .markdown-alert.markdown-alert-important { border-left-color=
: var(--borderColor-done-emphasis,var(--color-done-emphasis)); }

.wmde-markdown .markdown-alert.markdown-alert-important .markdown-alert-tit=
le { color: var(--fgColor-done,var(--color-done-fg)); }

.wmde-markdown .markdown-alert.markdown-alert-warning { border-left-color: =
var(--borderColor-attention-emphasis,var(--color-attention-emphasis)); }

.wmde-markdown .markdown-alert.markdown-alert-warning .markdown-alert-title=
 { color: var(--fgColor-attention,var(--color-attention-fg)); }

.wmde-markdown .markdown-alert.markdown-alert-caution { border-left-color: =
var(--borderColor-danger-emphasis,var(--color-danger-emphasis)); }

.wmde-markdown .markdown-alert.markdown-alert-caution .markdown-alert-title=
 { color: var(--fgColor-danger,var(--color-danger-fg)); }

.wmde-markdown .highlight-line { background-color: var(--color-neutral-mute=
d); }

.wmde-markdown .code-line.line-number::before { display: inline-block; widt=
h: 1rem; text-align: right; margin-right: 16px; color: var(--color-fg-subtl=
e); content: attr(line); white-space: nowrap; }

.wmde-markdown .token.cdata, .wmde-markdown .token.comment, .wmde-markdown =
.token.doctype, .wmde-markdown .token.prolog { color: var(--color-prettylig=
hts-syntax-comment); }

.wmde-markdown .token.namespace { opacity: 0.7; }

.wmde-markdown .token.constant, .wmde-markdown .token.deleted, .wmde-markdo=
wn .token.property, .wmde-markdown .token.selector, .wmde-markdown .token.s=
ymbol, .wmde-markdown .token.tag { color: var(--color-prettylights-syntax-e=
ntity-tag); }

.wmde-markdown .token.maybe-class-name { color: var(--color-prettylights-sy=
ntax-variable); }

.wmde-markdown .token.attr-name, .wmde-markdown .token.boolean, .wmde-markd=
own .token.builtin, .wmde-markdown .token.char, .wmde-markdown .token.numbe=
r, .wmde-markdown .token.operator, .wmde-markdown .token.property-access, .=
wmde-markdown .token.selector .token.class, .wmde-markdown .token.string { =
color: var(--color-prettylights-syntax-constant); }

.wmde-markdown .token.deleted { color: var(--color-prettylights-syntax-mark=
up-deleted-text); }

.wmde-markdown .code-line .token.deleted { background-color: var(--color-pr=
ettylights-syntax-markup-deleted-bg); }

.wmde-markdown .token.inserted { color: var(--color-prettylights-syntax-mar=
kup-inserted-text); }

.wmde-markdown .code-line .token.inserted { background-color: var(--color-p=
rettylights-syntax-markup-inserted-bg); }

.wmde-markdown .token.variable { color: var(--color-prettylights-syntax-con=
stant); }

.wmde-markdown .language-css .token.string, .wmde-markdown .style .token.st=
ring, .wmde-markdown .token.atrule, .wmde-markdown .token.attr-value, .wmde=
-markdown .token.class-name, .wmde-markdown .token.color, .wmde-markdown .t=
oken.entity, .wmde-markdown .token.function, .wmde-markdown .token.url { co=
lor: var(--color-prettylights-syntax-string); }

.wmde-markdown .token.important, .wmde-markdown .token.keyword, .wmde-markd=
own .token.regex, .wmde-markdown .token.rule { color: var(--color-prettylig=
hts-syntax-keyword); }

.wmde-markdown .token.coord { color: var(--color-prettylights-syntax-meta-d=
iff-range); }

.wmde-markdown .token.bold, .wmde-markdown .token.important { font-weight: =
700; }

.wmde-markdown .token.italic { font-style: italic; }

.wmde-markdown .token.entity { cursor: help; }
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.sparkplayground.com/_next/static/css/a8f02d7a58da2449.css

@charset "utf-8";

@font-face { font-family: __Poppins_c968c1; font-style: normal; font-weight=
: 400; font-display: swap; src: url("/_next/static/media/034d78ad42e9620c-s=
.woff2") format("woff2"); unicode-range: U+900-97F, U+1CD0-1CF9, U+200C-200=
D, U+20A8, U+20B9, U+20F0, U+25CC, U+A830-A839, U+A8E0-A8FF, U+11B00-11B09;=
 }

@font-face { font-family: __Poppins_c968c1; font-style: normal; font-weight=
: 400; font-display: swap; src: url("/_next/static/media/fe0777f1195381cb-s=
.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+2C7-2CC, U=
+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9F, U+1EF2-=
1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: __Poppins_c968c1; font-style: normal; font-weight=
: 400; font-display: swap; src: url("/_next/static/media/eafabf029ad39a43-s=
.p.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-=
2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U+2122,=
 U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: __Poppins_c968c1; font-style: normal; font-weight=
: 700; font-display: swap; src: url("/_next/static/media/29a4aea02fdee119-s=
.woff2") format("woff2"); unicode-range: U+900-97F, U+1CD0-1CF9, U+200C-200=
D, U+20A8, U+20B9, U+20F0, U+25CC, U+A830-A839, U+A8E0-A8FF, U+11B00-11B09;=
 }

@font-face { font-family: __Poppins_c968c1; font-style: normal; font-weight=
: 700; font-display: swap; src: url("/_next/static/media/a1386beebedccca4-s=
.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+2C7-2CC, U=
+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9F, U+1EF2-=
1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: __Poppins_c968c1; font-style: normal; font-weight=
: 700; font-display: swap; src: url("/_next/static/media/b957ea75a84b6ea7-s=
.p.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-=
2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U+2122,=
 U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: __Poppins_Fallback_c968c1; src: local("Arial"); a=
scent-override: 93.62%; descent-override: 31.21%; line-gap-override: 8.92%;=
 size-adjust: 112.16%; }

.__className_c968c1 { font-family: __Poppins_c968c1, __Poppins_Fallback_c96=
8c1; font-style: normal; }

@font-face { font-family: __Inter_e8ce0c; font-style: normal; font-weight: =
100 900; font-display: swap; src: url("/_next/static/media/55c55f0601d81cf3=
-s.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A, U+20B4, =
U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: __Inter_e8ce0c; font-style: normal; font-weight: =
100 900; font-display: swap; src: url("/_next/static/media/26a46d62cd723877=
-s.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4=
B0-4B1, U+2116; }

@font-face { font-family: __Inter_e8ce0c; font-style: normal; font-weight: =
100 900; font-display: swap; src: url("/_next/static/media/97e0cb1ae144a2a9=
-s.woff2") format("woff2"); unicode-range: U+1F00-1FFF; }

@font-face { font-family: __Inter_e8ce0c; font-style: normal; font-weight: =
100 900; font-display: swap; src: url("/_next/static/media/581909926a08bbc8=
-s.woff2") format("woff2"); unicode-range: U+370-377, U+37A-37F, U+384-38A,=
 U+38C, U+38E-3A1, U+3A3-3FF; }

@font-face { font-family: __Inter_e8ce0c; font-style: normal; font-weight: =
100 900; font-display: swap; src: url("/_next/static/media/df0a9ae256c0569c=
-s.woff2") format("woff2"); unicode-range: U+102-103, U+110-111, U+128-129,=
 U+168-169, U+1A0-1A1, U+1AF-1B0, U+300-301, U+303-304, U+308-309, U+323, U=
+329, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: __Inter_e8ce0c; font-style: normal; font-weight: =
100 900; font-display: swap; src: url("/_next/static/media/8e9860b6e62d6359=
-s.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+2C7-2CC,=
 U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9F, U+1EF=
2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;=
 }

@font-face { font-family: __Inter_e8ce0c; font-style: normal; font-weight: =
100 900; font-display: swap; src: url("/_next/static/media/e4af272ccee01ff0=
-s.p.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2B=
B-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U+212=
2, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: __Inter_Fallback_e8ce0c; src: local("Arial"); asc=
ent-override: 90.49%; descent-override: 22.56%; line-gap-override: 0%; size=
-adjust: 107.06%; }

.__className_e8ce0c { font-family: __Inter_e8ce0c, __Inter_Fallback_e8ce0c;=
 font-style: normal; }

.__variable_e8ce0c { --font-inter: "__Inter_e8ce0c","__Inter_Fallback_e8ce0=
c"; }
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.sparkplayground.com/_next/static/css/971a3cbfea2853a6.css

@charset "utf-8";

*, ::after, ::before { box-sizing: border-box; border: 0px solid rgb(229, 2=
31, 235); }

::after, ::before { --tw-content: ""; }

:host, html { line-height: 1.5; text-size-adjust: 100%; tab-size: 4; font-f=
amily: var(--font-inter),sans-serif; font-feature-settings: normal; font-va=
riation-settings: normal; -webkit-tap-highlight-color: transparent; }

body { margin: 0px; line-height: inherit; }

hr { height: 0px; color: inherit; border-top-width: 1px; }

abbr:where([title]) { text-decoration: underline dotted; }

h1, h2, h3, h4, h5, h6 { font-size: inherit; font-weight: inherit; }

a { color: inherit; text-decoration: inherit; }

b, strong { font-weight: bolder; }

code, kbd, pre, samp { font-family: ui-monospace, SFMono-Regular, Menlo, Mo=
naco, Consolas, "Liberation Mono", "Courier New", monospace; font-feature-s=
ettings: normal; font-variation-settings: normal; font-size: 1em; }

small { font-size: 80%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-ali=
gn: baseline; }

sub { bottom: -0.25em; }

sup { top: -0.5em; }

table { text-indent: 0px; border-color: inherit; border-collapse: collapse;=
 }

button, input, optgroup, select, textarea { font-family: inherit; font-feat=
ure-settings: inherit; font-variation-settings: inherit; font-size: 100%; f=
ont-weight: inherit; line-height: inherit; letter-spacing: inherit; color: =
inherit; margin: 0px; padding: 0px; }

button, select { text-transform: none; }

button, input:where([type=3D"button"]), input:where([type=3D"reset"]), inpu=
t:where([type=3D"submit"]) { appearance: button; background-color: transpar=
ent; background-image: none; }

progress { vertical-align: baseline; }

::-webkit-inner-spin-button, ::-webkit-outer-spin-button { height: auto; }

[type=3D"search"] { appearance: textfield; outline-offset: -2px; }

::-webkit-search-decoration { appearance: none; }

::-webkit-file-upload-button { appearance: button; font: inherit; }

summary { display: list-item; }

blockquote, dd, dl, figure, h1, h2, h3, h4, h5, h6, hr, p, pre { margin: 0p=
x; }

fieldset { margin: 0px; }

fieldset, legend { padding: 0px; }

menu, ol, ul { list-style: none; margin: 0px; padding: 0px; }

dialog { padding: 0px; }

textarea { resize: vertical; }

input::placeholder, textarea::placeholder { opacity: 1; color: rgb(156, 163=
, 175); }

[role=3D"button"], button { cursor: pointer; }

:disabled { cursor: default; }

audio, canvas, embed, iframe, img, object, svg, video { display: block; ver=
tical-align: middle; }

img, video { max-width: 100%; height: auto; }

[hidden] { display: none; }

:root, [data-theme] { background-color: var(--fallback-b1,oklch(var(--b1)/1=
)); color: var(--fallback-bc,oklch(var(--bc)/1)); }

@supports not (color:oklch(0% 0 0)) {
  :root { color-scheme: light; --fallback-p: #491eff; --fallback-pc: #d4dbf=
f; --fallback-s: #ff41c7; --fallback-sc: #fff9fc; --fallback-a: #00cfbd; --=
fallback-ac: #00100d; --fallback-n: #2b3440; --fallback-nc: #d7dde4; --fall=
back-b1: #fff; --fallback-b2: #e5e6e6; --fallback-b3: #e5e6e6; --fallback-b=
c: #1f2937; --fallback-in: #00b3f0; --fallback-inc: #000; --fallback-su: #0=
0ca92; --fallback-suc: #000; --fallback-wa: #ffc22d; --fallback-wac: #000; =
--fallback-er: #ff6f70; --fallback-erc: #000; }
  @media (prefers-color-scheme: dark) {
  :root { color-scheme: dark; --fallback-p: #7582ff; --fallback-pc: #050617=
; --fallback-s: #ff71cf; --fallback-sc: #190211; --fallback-a: #00c7b5; --f=
allback-ac: #000e0c; --fallback-n: #2a323c; --fallback-nc: #a6adbb; --fallb=
ack-b1: #1d232a; --fallback-b2: #191e24; --fallback-b3: #15191e; --fallback=
-bc: #a6adbb; --fallback-in: #00b3f0; --fallback-inc: #000; --fallback-su: =
#00ca92; --fallback-suc: #000; --fallback-wa: #ffc22d; --fallback-wac: #000=
; --fallback-er: #ff6f70; --fallback-erc: #000; }
}
}

html { -webkit-tap-highlight-color: transparent; }

:root { color-scheme: light; --in: 72.06% 0.191 231.6; --su: 64.8% 0.150 16=
0; --wa: 84.71% 0.199 83.87; --er: 71.76% 0.221 22.18; --pc: 89.824% 0.0619=
2 275.75; --ac: 15.352% 0.0368 183.61; --inc: 0% 0 0; --suc: 0% 0 0; --wac:=
 0% 0 0; --erc: 0% 0 0; --rounded-box: 1rem; --rounded-btn: 0.5rem; --round=
ed-badge: 1.9rem; --animation-btn: 0.25s; --animation-input: .2s; --btn-foc=
us-scale: 0.95; --border-btn: 1px; --tab-border: 1px; --tab-radius: 0.5rem;=
 --p: 49.12% 0.3096 275.75; --s: 69.71% 0.329 342.55; --sc: 98.71% 0.0106 3=
42.55; --a: 76.76% 0.184 183.61; --n: 32.1785% 0.02476 255.701624; --nc: 89=
.4994% 0.011585 252.096176; --b1: 100% 0 0; --b2: 96.1151% 0 0; --b3: 92.41=
69% 0.00108 197.137559; --bc: 27.8078% 0.029596 256.847952; }

@media (prefers-color-scheme: dark) {
  :root { color-scheme: dark; --in: 72.06% 0.191 231.6; --su: 64.8% 0.150 1=
60; --wa: 84.71% 0.199 83.87; --er: 71.76% 0.221 22.18; --pc: 13.138% 0.039=
2 275.75; --sc: 14.96% 0.052 342.55; --ac: 14.902% 0.0334 183.61; --inc: 0%=
 0 0; --suc: 0% 0 0; --wac: 0% 0 0; --erc: 0% 0 0; --rounded-box: 1rem; --r=
ounded-btn: 0.5rem; --rounded-badge: 1.9rem; --animation-btn: 0.25s; --anim=
ation-input: .2s; --btn-focus-scale: 0.95; --border-btn: 1px; --tab-border:=
 1px; --tab-radius: 0.5rem; --p: 65.69% 0.196 275.75; --s: 74.8% 0.26 342.5=
5; --a: 74.51% 0.167 183.61; --n: 31.3815% 0.021108 254.139175; --nc: 74.64=
77% 0.0216 264.435964; --b1: 25.3267% 0.015896 252.417568; --b2: 23.2607% 0=
.013807 253.100675; --b3: 21.1484% 0.01165 254.087939; --bc: 74.6477% 0.021=
6 264.435964; }
}

[data-theme=3D"light"] { color-scheme: light; --in: 72.06% 0.191 231.6; --s=
u: 64.8% 0.150 160; --wa: 84.71% 0.199 83.87; --er: 71.76% 0.221 22.18; --p=
c: 89.824% 0.06192 275.75; --ac: 15.352% 0.0368 183.61; --inc: 0% 0 0; --su=
c: 0% 0 0; --wac: 0% 0 0; --erc: 0% 0 0; --rounded-box: 1rem; --rounded-btn=
: 0.5rem; --rounded-badge: 1.9rem; --animation-btn: 0.25s; --animation-inpu=
t: .2s; --btn-focus-scale: 0.95; --border-btn: 1px; --tab-border: 1px; --ta=
b-radius: 0.5rem; --p: 49.12% 0.3096 275.75; --s: 69.71% 0.329 342.55; --sc=
: 98.71% 0.0106 342.55; --a: 76.76% 0.184 183.61; --n: 32.1785% 0.02476 255=
.701624; --nc: 89.4994% 0.011585 252.096176; --b1: 100% 0 0; --b2: 96.1151%=
 0 0; --b3: 92.4169% 0.00108 197.137559; --bc: 27.8078% 0.029596 256.847952=
; }

[data-theme=3D"dark"] { color-scheme: dark; --in: 72.06% 0.191 231.6; --su:=
 64.8% 0.150 160; --wa: 84.71% 0.199 83.87; --er: 71.76% 0.221 22.18; --pc:=
 13.138% 0.0392 275.75; --sc: 14.96% 0.052 342.55; --ac: 14.902% 0.0334 183=
.61; --inc: 0% 0 0; --suc: 0% 0 0; --wac: 0% 0 0; --erc: 0% 0 0; --rounded-=
box: 1rem; --rounded-btn: 0.5rem; --rounded-badge: 1.9rem; --animation-btn:=
 0.25s; --animation-input: .2s; --btn-focus-scale: 0.95; --border-btn: 1px;=
 --tab-border: 1px; --tab-radius: 0.5rem; --p: 65.69% 0.196 275.75; --s: 74=
.8% 0.26 342.55; --a: 74.51% 0.167 183.61; --n: 31.3815% 0.021108 254.13917=
5; --nc: 74.6477% 0.0216 264.435964; --b1: 25.3267% 0.015896 252.417568; --=
b2: 23.2607% 0.013807 253.100675; --b3: 21.1484% 0.01165 254.087939; --bc: =
74.6477% 0.0216 264.435964; }

[data-theme=3D"nord"] { color-scheme: light; --pc: 11.8872% 0.015449 254.02=
7774; --sc: 13.9303% 0.011822 248.687186; --ac: 15.4929% 0.01245 217.469017=
; --inc: 13.8414% 0.012499 332.664922; --suc: 15.3654% 0.01498 131.063061; =
--wac: 17.0972% 0.017847 84.093335; --erc: 12.122% 0.024119 15.341883; --an=
imation-btn: 0.25s; --animation-input: .2s; --btn-focus-scale: 0.95; --bord=
er-btn: 1px; --tab-border: 1px; --p: 59.4359% 0.077246 254.027774; --s: 69.=
6516% 0.059108 248.687186; --a: 77.4643% 0.062249 217.469017; --n: 45.229% =
0.035214 264.1312; --nc: 89.9258% 0.016374 262.749256; --b1: 95.1276% 0.007=
445 260.731539; --b2: 93.2996% 0.010389 261.788485; --b3: 89.9258% 0.016374=
 262.749256; --bc: 32.4374% 0.022945 264.182036; --in: 69.2072% 0.062496 33=
2.664922; --su: 76.827% 0.074899 131.063061; --wa: 85.4862% 0.089234 84.093=
335; --er: 60.61% 0.120594 15.341883; --rounded-box: 0.4rem; --rounded-btn:=
 0.2rem; --rounded-badge: 0.4rem; --tab-radius: 0.2rem; }

[data-theme=3D"dracula"] { color-scheme: dark; --b2: 26.8053% 0.020556 277.=
508664; --b3: 24.7877% 0.019009 277.508664; --pc: 15.0922% 0.036614 346.812=
432; --sc: 14.8405% 0.029709 301.883095; --ac: 16.6785% 0.024826 66.558491;=
 --nc: 87.8891% 0.006515 275.524078; --inc: 17.6526% 0.018676 212.846491; -=
-suc: 17.4199% 0.043903 148.024881; --wac: 19.1068% 0.026849 112.757109; --=
erc: 13.6441% 0.041266 24.430965; --rounded-box: 1rem; --rounded-btn: 0.5re=
m; --rounded-badge: 1.9rem; --animation-btn: 0.25s; --animation-input: .2s;=
 --btn-focus-scale: 0.95; --border-btn: 1px; --tab-border: 1px; --tab-radiu=
s: 0.5rem; --p: 75.4611% 0.18307 346.812432; --s: 74.2023% 0.148546 301.883=
095; --a: 83.3927% 0.124132 66.558491; --n: 39.4456% 0.032576 275.524078; -=
-b1: 28.8229% 0.022103 277.508664; --bc: 97.7477% 0.007913 106.545019; --in=
: 88.263% 0.09338 212.846491; --su: 87.0995% 0.219516 148.024881; --wa: 95.=
5338% 0.134246 112.757109; --er: 68.2204% 0.206328 24.430965; }

[data-theme=3D"retro"] { color-scheme: light; --inc: 90.923% 0.043042 262.8=
80917; --suc: 12.541% 0.033982 149.213788; --wac: 13.3168% 0.031484 58.3183=
4; --erc: 13.144% 0.0398 27.33; --animation-btn: 0.25s; --animation-input: =
.2s; --btn-focus-scale: 0.95; --border-btn: 1px; --tab-border: 1px; --p: 76=
.8664% 0.104092 22.664655; --pc: 26.5104% 0.006243 0.522862; --s: 80.7415% =
0.052534 159.094608; --sc: 26.5104% 0.006243 0.522862; --a: 70.3919% 0.1254=
55 52.953428; --ac: 26.5104% 0.006243 0.522862; --n: 28.4181% 0.009519 355.=
534017; --nc: 92.5604% 0.025113 89.217311; --b1: 91.6374% 0.034554 90.51575=
; --b2: 88.2722% 0.049418 91.774344; --b3: 84.133% 0.065952 90.856665; --bc=
: 26.5104% 0.006243 0.522862; --in: 54.615% 0.215208 262.880917; --su: 62.7=
052% 0.169912 149.213788; --wa: 66.584% 0.157422 58.31834; --er: 65.72% 0.1=
99 27.33; --rounded-box: 0.4rem; --rounded-btn: 0.4rem; --rounded-badge: 0.=
4rem; --tab-radius: 0.4rem; }

ul { list-style-type: disc; }

ol { list-style-type: decimal; }

.btn-gradient { animation: 3s ease-out 0s infinite alternate none running s=
himmer; font-weight: 600; --tw-shadow: 0 1px 3px 0 rgba(0,0,0,.1),0 1px 2px=
 -1px rgba(0,0,0,.1); --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-colo=
r),0 1px 2px -1px var(--tw-shadow-color); box-shadow: var(--tw-ring-offset-=
shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow); transit=
ion-duration: 0.1s; border-width: 0px !important; border-color: transparent=
 !important; background-color: transparent !important; background-image: li=
near-gradient(60deg, rgb(30, 58, 138), rgb(59, 130, 246)) !important; backg=
round-size: 300% 300% !important; --tw-text-opacity: 1 !important; color: r=
gb(255 255 255/var(--tw-text-opacity)) !important; }

.btn-gradient:hover { --tw-saturate: saturate(1.2); filter: var(--tw-blur) =
var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-ro=
tate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-sha=
dow); }

.btn-gradient:disabled { background-color: rgba(107, 114, 128, 0.3) !import=
ant; background-image: none !important; }

.btn { text-transform: capitalize !important; }

.btn-blue { display: inline-flex; align-items: center; justify-content: cen=
ter; border-radius: 0.75rem; background-image: linear-gradient(to right,var=
(--tw-gradient-stops)); --tw-gradient-from: #2563eb var(--tw-gradient-from-=
position); --tw-gradient-stops: var(--tw-gradient-from),#3b82f6 var(--tw-gr=
adient-via-position),var(--tw-gradient-to); --tw-gradient-to: #60a5fa var(-=
-tw-gradient-to-position); padding: 0.5rem 1.25rem; font-weight: 600; --tw-=
text-opacity: 1; color: rgb(255 255 255/var(--tw-text-opacity)); --tw-shado=
w: 0 4px 6px -1px rgba(0,0,0,.1),0 2px 4px -2px rgba(0,0,0,.1); --tw-shadow=
-colored: 0 4px 6px -1px var(--tw-shadow-color),0 2px 4px -2px var(--tw-sha=
dow-color); box-shadow: var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-rin=
g-shadow,0 0 #0000),var(--tw-shadow); transition-property: color, backgroun=
d-color, border-color, text-decoration-color, fill, stroke, opacity, box-sh=
adow, transform, filter, backdrop-filter, -webkit-backdrop-filter; transiti=
on-duration: 0.3s; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1)=
; }

.btn-blue:hover { --tw-scale-x: 1.02; --tw-scale-y: 1.02; --tw-gradient-fro=
m: #1d4ed8 var(--tw-gradient-from-position); --tw-gradient-stops: var(--tw-=
gradient-from),var(--tw-gradient-to); --tw-gradient-to: #3b82f6 var(--tw-gr=
adient-to-position); }

.btn-blue:active, .btn-blue:hover { transform: translate(var(--tw-translate=
-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x))=
 skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)=
); }

.btn-blue:active { --tw-scale-x: 0.98; --tw-scale-y: 0.98; }

.btn-blue:disabled { background-color: rgba(55, 65, 81, 0.6) !important; ba=
ckground-image: none !important; }

.btn-blue:hover:disabled { --tw-scale-x: 1 !important; --tw-scale-y: 1 !imp=
ortant; transform: translate(var(--tw-translate-x),var(--tw-translate-y)) r=
otate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) sca=
leX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)) !important; transition-pro=
perty: none !important; }

*, ::after, ::before { --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; =
--tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; -=
-tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: =
; --tw-pinch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-gradient-=
from-position: ; --tw-gradient-via-position: ; --tw-gradient-to-position: ;=
 --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-s=
pacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-widt=
h: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,.5);=
 --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shad=
ow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; --tw-blur: ; --tw-brightness=
: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --=
tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw=
-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: =
; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity=
: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; --tw-contain-size: ; -=
-tw-contain-layout: ; --tw-contain-paint: ; --tw-contain-style: ; }

::backdrop { --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-trans=
late-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y=
: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: ; --tw-pin=
ch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-gradient-from-posit=
ion: ; --tw-gradient-via-position: ; --tw-gradient-to-position: ; --tw-ordi=
nal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; =
--tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width: 0px; --=
tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,.5); --tw-ring=
-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0=
000; --tw-shadow-colored: 0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-c=
ontrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturat=
e: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-=
brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-bac=
kdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-b=
ackdrop-saturate: ; --tw-backdrop-sepia: ; --tw-contain-size: ; --tw-contai=
n-layout: ; --tw-contain-paint: ; --tw-contain-style: ; }

.container { width: 100%; }

@media (min-width: 640px) {
  .container { max-width: 640px; }
}

@media (min-width: 768px) {
  .container { max-width: 768px; }
}

@media (min-width: 1024px) {
  .container { max-width: 1024px; }
}

@media (min-width: 1280px) {
  .container { max-width: 1280px; }
}

@media (min-width: 1536px) {
  .container { max-width: 1536px; }
}

.avatar { position: relative; display: inline-flex; }

.avatar > div { display: block; aspect-ratio: 1 / 1; overflow: hidden; }

.avatar img { height: 100%; width: 100%; object-fit: cover; }

.avatar.placeholder > div { display: flex; }

.avatar.placeholder > div, .badge { align-items: center; justify-content: c=
enter; }

.badge { display: inline-flex; transition-property: color, background-color=
, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, t=
ransform, filter, backdrop-filter, -webkit-backdrop-filter; transition-timi=
ng-function: cubic-bezier(0, 0, 0.2, 1); transition-duration: 0.2s; height:=
 1.25rem; font-size: 0.875rem; line-height: 1.25rem; width: fit-content; pa=
dding-left: 0.563rem; padding-right: 0.563rem; border-radius: var(--rounded=
-badge,1.9rem); border-width: 1px; --tw-border-opacity: 1; border-color: va=
r(--fallback-b2,oklch(var(--b2)/var(--tw-border-opacity))); --tw-bg-opacity=
: 1; background-color: var(--fallback-b1,oklch(var(--b1)/var(--tw-bg-opacit=
y))); --tw-text-opacity: 1; color: var(--fallback-bc,oklch(var(--bc)/var(--=
tw-text-opacity))); }

@media (hover: hover) {
  .link-hover:hover { text-decoration-line: underline; }
  .label a:hover { --tw-text-opacity: 1; color: var(--fallback-bc,oklch(var=
(--bc)/var(--tw-text-opacity))); }
  .menu li > :not(ul, .menu-title, details, .btn).active, .menu li > :not(u=
l, .menu-title, details, .btn):active, .menu li > details > summary:active =
{ --tw-bg-opacity: 1; background-color: var(--fallback-n,oklch(var(--n)/var=
(--tw-bg-opacity))); --tw-text-opacity: 1; color: var(--fallback-nc,oklch(v=
ar(--nc)/var(--tw-text-opacity))); }
  .tab:hover { --tw-text-opacity: 1; }
  .table tr.hover:hover, .table tr.hover:nth-child(2n):hover { --tw-bg-opac=
ity: 1; background-color: var(--fallback-b2,oklch(var(--b2)/var(--tw-bg-opa=
city))); }
}

.btn { display: inline-flex; height: 3rem; min-height: 3rem; flex-shrink: 0=
; cursor: pointer; user-select: none; flex-wrap: wrap; align-items: center;=
 justify-content: center; border-radius: var(--rounded-btn,.5rem); border-c=
olor: oklch(var(--btn-color,var(--b2))/var(--tw-border-opacity)); padding-l=
eft: 1rem; padding-right: 1rem; text-align: center; font-size: 0.875rem; li=
ne-height: 1em; gap: 0.5rem; font-weight: 600; text-decoration-line: none; =
transition-duration: 0.2s; transition-timing-function: cubic-bezier(0, 0, 0=
.2, 1); border-width: var(--border-btn,1px); animation: button-pop var(--an=
imation-btn,.25s) ease-out; transition-property: color, background-color, b=
order-color, opacity, box-shadow, transform; --tw-text-opacity: 1; color: v=
ar(--fallback-bc,oklch(var(--bc)/var(--tw-text-opacity))); --tw-shadow: 0 1=
px 2px 0 rgba(0,0,0,.05); --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-=
color); box-shadow: var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-sh=
adow,0 0 #0000),var(--tw-shadow); outline-color: var(--fallback-bc,oklch(va=
r(--bc)/1)); background-color: oklch(var(--btn-color,var(--b2))/var(--tw-bg=
-opacity)); --tw-bg-opacity: 1; --tw-border-opacity: 1; }

.btn-disabled, .btn:disabled, .btn[disabled] { pointer-events: none; }

.btn-square { height: 3rem; width: 3rem; padding: 0px; }

:where(.btn:is(input[type=3D"checkbox"])), :where(.btn:is(input[type=3D"rad=
io"])) { width: auto; appearance: none; }

.btn:is(input[type=3D"checkbox"])::after, .btn:is(input[type=3D"radio"])::a=
fter { --tw-content: attr(aria-label); content: var(--tw-content); }

.card { position: relative; display: flex; flex-direction: column; border-r=
adius: var(--rounded-box,1rem); }

.card:focus { outline: transparent solid 2px; outline-offset: 2px; }

.card figure { display: flex; align-items: center; justify-content: center;=
 }

.card.image-full { display: grid; }

.card.image-full::before { position: relative; content: ""; z-index: 10; bo=
rder-radius: var(--rounded-box,1rem); --tw-bg-opacity: 1; background-color:=
 var(--fallback-n,oklch(var(--n)/var(--tw-bg-opacity))); opacity: 0.75; }

.card.image-full::before, .card.image-full > * { grid-column-start: 1; grid=
-row-start: 1; }

.card.image-full > figure img { height: 100%; object-fit: cover; }

.card.image-full > .card-body { position: relative; z-index: 20; --tw-text-=
opacity: 1; color: var(--fallback-nc,oklch(var(--nc)/var(--tw-text-opacity)=
)); }

.chat { display: grid; grid-template-columns: repeat(2, minmax(0px, 1fr)); =
column-gap: 0.75rem; padding-top: 0.25rem; padding-bottom: 0.25rem; }

.divider { display: flex; flex-direction: row; align-items: center; align-s=
elf: stretch; margin-top: 1rem; margin-bottom: 1rem; height: 1rem; white-sp=
ace: nowrap; }

.divider::after, .divider::before { height: 0.125rem; width: 100%; flex-gro=
w: 1; --tw-content: ""; content: var(--tw-content); background-color: var(-=
-fallback-bc,oklch(var(--bc)/.1)); }

@media (hover: hover) {
  .btm-nav > .disabled:hover, .btm-nav > [disabled]:hover { pointer-events:=
 none; --tw-border-opacity: 0; background-color: var(--fallback-n,oklch(var=
(--n)/var(--tw-bg-opacity))); --tw-bg-opacity: 0.1; color: var(--fallback-b=
c,oklch(var(--bc)/var(--tw-text-opacity))); --tw-text-opacity: 0.2; }
  .btn:hover { --tw-border-opacity: 1; border-color: var(--fallback-b3,oklc=
h(var(--b3)/var(--tw-border-opacity))); --tw-bg-opacity: 1; background-colo=
r: var(--fallback-b3,oklch(var(--b3)/var(--tw-bg-opacity))); }
  @supports (color:color-mix(in oklab,black,black)) {
  .btn:hover { background-color: color-mix(in oklab,oklch(var(--btn-color,v=
ar(--b2))/var(--tw-bg-opacity,1)) 90%,#000); border-color: color-mix(in okl=
ab,oklch(var(--btn-color,var(--b2))/var(--tw-border-opacity,1)) 90%,#000); =
}
}
  @supports not (color:oklch(0% 0 0)) {
  .btn:hover { background-color: var(--btn-color,var(--fallback-b2)); borde=
r-color: var(--btn-color,var(--fallback-b2)); }
}
  .btn.glass:hover { --glass-opacity: 25%; --glass-border-opacity: 15%; }
  .btn-ghost:hover { border-color: transparent; }
  @supports (color:oklch(0% 0 0)) {
  .btn-ghost:hover { background-color: var(--fallback-bc,oklch(var(--bc)/.2=
)); }
}
  .btn-outline.btn-primary:hover { --tw-text-opacity: 1; color: var(--fallb=
ack-pc,oklch(var(--pc)/var(--tw-text-opacity))); }
  @supports (color:color-mix(in oklab,black,black)) {
  .btn-outline.btn-primary:hover { background-color: color-mix(in oklab,var=
(--fallback-p,oklch(var(--p)/1)) 90%,#000); border-color: color-mix(in okla=
b,var(--fallback-p,oklch(var(--p)/1)) 90%,#000); }
}
  .btn-disabled:hover, .btn:disabled:hover, .btn[disabled]:hover { --tw-bor=
der-opacity: 0; background-color: var(--fallback-n,oklch(var(--n)/var(--tw-=
bg-opacity))); --tw-bg-opacity: 0.2; color: var(--fallback-bc,oklch(var(--b=
c)/var(--tw-text-opacity))); --tw-text-opacity: 0.2; }
  @supports (color:color-mix(in oklab,black,black)) {
  .btn:is(input[type=3D"checkbox"]:checked):hover, .btn:is(input[type=3D"ra=
dio"]:checked):hover { background-color: color-mix(in oklab,var(--fallback-=
p,oklch(var(--p)/1)) 90%,#000); border-color: color-mix(in oklab,var(--fall=
back-p,oklch(var(--p)/1)) 90%,#000); }
}
  :where(.menu li:not(.menu-title, .disabled) > :not(ul, details, .menu-tit=
le)):not(.active, .btn):hover, :where(.menu li:not(.menu-title, .disabled) =
> details > summary:not(.menu-title)):not(.active, .btn):hover { cursor: po=
inter; outline: transparent solid 2px; outline-offset: 2px; }
  @supports (color:oklch(0% 0 0)) {
  :where(.menu li:not(.menu-title, .disabled) > :not(ul, details, .menu-tit=
le)):not(.active, .btn):hover, :where(.menu li:not(.menu-title, .disabled) =
> details > summary:not(.menu-title)):not(.active, .btn):hover { background=
-color: var(--fallback-bc,oklch(var(--bc)/.1)); }
}
  .tab[disabled], .tab[disabled]:hover { cursor: not-allowed; color: var(--=
fallback-bc,oklch(var(--bc)/var(--tw-text-opacity))); --tw-text-opacity: 0.=
2; }
}

.footer { width: 100%; grid-auto-flow: row; gap: 2.5rem 1rem; font-size: 0.=
875rem; line-height: 1.25rem; }

.footer, .footer > * { display: grid; place-items: start; }

.footer > * { gap: 0.5rem; }

@media (min-width: 48rem) {
  .footer { grid-auto-flow: column; }
  .footer-center { grid-auto-flow: dense; }
}

.label { display: flex; user-select: none; align-items: center; justify-con=
tent: space-between; padding: 0.5rem 0.25rem; }

.hero { display: grid; width: 100%; place-items: center; background-size: c=
over; background-position: 50% center; }

.hero-overlay, .hero > * { grid-column-start: 1; grid-row-start: 1; }

.hero-overlay { height: 100%; width: 100%; background-color: var(--fallback=
-n,oklch(var(--n)/var(--tw-bg-opacity))); --tw-bg-opacity: 0.5; }

.hero-content { z-index: 0; display: flex; align-items: center; justify-con=
tent: center; max-width: 80rem; gap: 1rem; padding: 1rem; }

.input { flex-shrink: 1; appearance: none; height: 3rem; padding-left: 1rem=
; padding-right: 1rem; font-size: 1rem; line-height: 1.5rem; border-radius:=
 var(--rounded-btn,.5rem); border-width: 1px; border-color: transparent; --=
tw-bg-opacity: 1; background-color: var(--fallback-b1,oklch(var(--b1)/var(-=
-tw-bg-opacity))); }

.input-md[type=3D"number"]::-webkit-inner-spin-button, .input[type=3D"numbe=
r"]::-webkit-inner-spin-button { margin-top: -1rem; margin-bottom: -1rem; m=
argin-inline-end: -1rem; }

.join { display: inline-flex; align-items: stretch; border-radius: var(--ro=
unded-btn,.5rem); }

.join :where(.join-item) { border-start-end-radius: 0px; border-end-end-rad=
ius: 0px; border-end-start-radius: 0px; border-start-start-radius: 0px; }

.join .join-item:not(:first-child):not(:last-child), .join :not(:first-chil=
d):not(:last-child) .join-item { border-start-end-radius: 0px; border-end-e=
nd-radius: 0px; border-end-start-radius: 0px; border-start-start-radius: 0p=
x; }

.join .join-item:first-child:not(:last-child), .join :first-child:not(:last=
-child) .join-item { border-start-end-radius: 0px; border-end-end-radius: 0=
px; }

.join .dropdown .join-item:first-child:not(:last-child), .join :first-child=
:not(:last-child) .dropdown .join-item { border-start-end-radius: inherit; =
border-end-end-radius: inherit; }

.join :where(.join-item:first-child:not(:last-child)), .join :where(:first-=
child:not(:last-child) .join-item) { border-end-start-radius: inherit; bord=
er-start-start-radius: inherit; }

.join .join-item:last-child:not(:first-child), .join :last-child:not(:first=
-child) .join-item { border-end-start-radius: 0px; border-start-start-radiu=
s: 0px; }

.join :where(.join-item:last-child:not(:first-child)), .join :where(:last-c=
hild:not(:first-child) .join-item) { border-start-end-radius: inherit; bord=
er-end-end-radius: inherit; }

@supports not selector(:has(*)) {
  :where(.join *) { border-radius: inherit; }
}

@supports selector(:has(*)) {
  :where(.join :has(.join-item)) { border-radius: inherit; }
}

.link { cursor: pointer; text-decoration-line: underline; }

.link-hover { text-decoration-line: none; }

.menu { display: flex; flex-flow: column wrap; font-size: 0.875rem; line-he=
ight: 1.25rem; padding: 0.5rem; }

.menu :where(li ul) { position: relative; white-space: nowrap; margin-inlin=
e-start: 1rem; padding-inline-start: 0.5rem; }

.menu :where(li:not(.menu-title) > :not(ul, details, .menu-title, .btn)), .=
menu :where(li:not(.menu-title) > details > summary:not(.menu-title)) { dis=
play: grid; grid-auto-flow: column; align-content: flex-start; align-items:=
 center; gap: 0.5rem; grid-auto-columns: minmax(auto, max-content) auto max=
-content; user-select: none; }

.menu li.disabled { cursor: not-allowed; user-select: none; color: var(--fa=
llback-bc,oklch(var(--bc)/.3)); }

.menu :where(li > .menu-dropdown:not(.menu-dropdown-show)) { display: none;=
 }

:where(.menu li) { position: relative; display: flex; flex-shrink: 0; flex-=
flow: column wrap; align-items: stretch; }

:where(.menu li) .badge { justify-self: end; }

.modal { pointer-events: none; position: fixed; inset: 0px; margin: 0px; di=
splay: grid; height: 100%; max-height: none; width: 100%; max-width: none; =
justify-items: center; padding: 0px; opacity: 0; overscroll-behavior: conta=
in; z-index: 999; background-color: transparent; color: inherit; transition=
-duration: 0.2s; transition-timing-function: cubic-bezier(0, 0, 0.2, 1); tr=
ansition-property: transform, opacity, visibility; overflow-y: hidden; }

:where(.modal) { align-items: center; }

.modal-open, .modal-toggle:checked + .modal, .modal:target, .modal[open] { =
pointer-events: auto; visibility: visible; opacity: 1; }

:root:has(:is(.modal-open, .modal:target, .modal-toggle:checked + .modal, .=
modal[open])) { overflow: hidden; scrollbar-gutter: stable; }

.progress { position: relative; appearance: none; height: 0.5rem; backgroun=
d-color: var(--fallback-bc,oklch(var(--bc)/.2)); }

.progress, .range { width: 100%; appearance: none; overflow: hidden; border=
-radius: var(--rounded-box,1rem); }

.range { height: 1.5rem; cursor: pointer; appearance: none; --range-shdw: v=
ar(--fallback-bc,oklch(var(--bc)/1)); background-color: transparent; }

.range:focus { outline: none; }

.rating { position: relative; display: inline-flex; }

.rating :where(input) { cursor: pointer; border-radius: 0px; animation: rat=
ing-pop var(--animation-input,.25s) ease-out; height: 1.5rem; width: 1.5rem=
; background-color: var(--fallback-bc,oklch(var(--bc)/var(--tw-bg-opacity))=
); --tw-bg-opacity: 1; }

.select { display: inline-flex; cursor: pointer; user-select: none; appeara=
nce: none; height: 3rem; min-height: 3rem; padding-left: 1rem; padding-righ=
t: 2.5rem; font-size: 0.875rem; line-height: 2; border-radius: var(--rounde=
d-btn,.5rem); border-width: 1px; border-color: transparent; --tw-bg-opacity=
: 1; background-color: var(--fallback-b1,oklch(var(--b1)/var(--tw-bg-opacit=
y))); background-image: linear-gradient(45deg, transparent 50%, currentcolo=
r 0px), linear-gradient(135deg, currentcolor 50%, transparent 0px); backgro=
und-position: calc(100% - 20px) calc(50% + 1px), calc(100% - 16.1px) calc(5=
0% + 1px); background-size: 4px 4px, 4px 4px; background-repeat: no-repeat;=
 }

.select[multiple] { height: auto; }

.stats { display: inline-grid; border-radius: var(--rounded-box,1rem); --tw=
-bg-opacity: 1; background-color: var(--fallback-b1,oklch(var(--b1)/var(--t=
w-bg-opacity))); --tw-text-opacity: 1; color: var(--fallback-bc,oklch(var(-=
-bc)/var(--tw-text-opacity))); }

:where(.stats) { grid-auto-flow: column; overflow-x: auto; }

.steps { display: inline-grid; grid-auto-flow: column; overflow: auto hidde=
n; counter-reset: step 0; grid-auto-columns: 1fr; }

.steps .step { display: grid; grid-template-columns: auto; grid-template-ro=
ws: 40px 1fr; place-items: center; text-align: center; min-width: 4rem; }

.swap { position: relative; display: inline-grid; user-select: none; place-=
content: center; cursor: pointer; }

.swap > * { grid-column-start: 1; grid-row-start: 1; transition-duration: 0=
.3s; transition-timing-function: cubic-bezier(0, 0, 0.2, 1); transition-pro=
perty: transform, opacity; }

.swap input { appearance: none; }

.swap .swap-indeterminate, .swap .swap-on, .swap input:indeterminate ~ .swa=
p-on { opacity: 0; }

.swap input:checked ~ .swap-off, .swap input:indeterminate ~ .swap-off, .sw=
ap-active .swap-off { opacity: 0; }

.swap input:checked ~ .swap-on, .swap input:indeterminate ~ .swap-indetermi=
nate, .swap-active .swap-on { opacity: 1; }

.tabs { display: grid; align-items: flex-end; }

.tabs-lifted:has(.tab-content[class*=3D" rounded-"]) .tab:first-child:not(.=
tab-active), .tabs-lifted:has(.tab-content[class^=3D"rounded-"]) .tab:first=
-child:not(.tab-active) { border-bottom-color: transparent; }

.tab { position: relative; grid-row-start: 1; display: inline-flex; height:=
 2rem; cursor: pointer; user-select: none; appearance: none; flex-wrap: wra=
p; align-items: center; justify-content: center; text-align: center; font-s=
ize: 0.875rem; line-height: 2; --tab-padding: 1rem; --tw-text-opacity: 0.5;=
 --tab-color: var(--fallback-bc,oklch(var(--bc)/1)); --tab-bg: var(--fallba=
ck-b1,oklch(var(--b1)/1)); --tab-border-color: var(--fallback-b3,oklch(var(=
--b3)/1)); color: var(--tab-color); padding-inline-start: var(--tab-padding=
,1rem); padding-inline-end: var(--tab-padding,1rem); }

.tab:is(input[type=3D"radio"]) { width: auto; border-bottom-right-radius: 0=
px; border-bottom-left-radius: 0px; }

.tab:is(input[type=3D"radio"])::after { --tw-content: attr(aria-label); con=
tent: var(--tw-content); }

.tab:not(input):empty { cursor: default; grid-column-start: span 9999; }

.tab-active + .tab-content, input.tab:checked + .tab-content { display: blo=
ck; }

.table { position: relative; width: 100%; border-radius: var(--rounded-box,=
1rem); text-align: left; font-size: 0.875rem; line-height: 1.25rem; }

.table :where(.table-pin-rows thead tr) { position: sticky; top: 0px; z-ind=
ex: 1; --tw-bg-opacity: 1; background-color: var(--fallback-b1,oklch(var(--=
b1)/var(--tw-bg-opacity))); }

.table :where(.table-pin-rows tfoot tr) { position: sticky; bottom: 0px; z-=
index: 1; --tw-bg-opacity: 1; background-color: var(--fallback-b1,oklch(var=
(--b1)/var(--tw-bg-opacity))); }

.table :where(.table-pin-cols tr th) { position: sticky; left: 0px; right: =
0px; --tw-bg-opacity: 1; background-color: var(--fallback-b1,oklch(var(--b1=
)/var(--tw-bg-opacity))); }

.textarea { min-height: 3rem; flex-shrink: 1; padding: 0.5rem 1rem; font-si=
ze: 0.875rem; line-height: 2; border-radius: var(--rounded-btn,.5rem); bord=
er-width: 1px; border-color: transparent; --tw-bg-opacity: 1; background-co=
lor: var(--fallback-b1,oklch(var(--b1)/var(--tw-bg-opacity))); }

.toast { position: fixed; display: flex; min-width: fit-content; flex-direc=
tion: column; white-space: nowrap; gap: 0.5rem; padding: 1rem; }

.avatar-group { display: flex; overflow: hidden; }

.avatar-group :where(.avatar) { overflow: hidden; border-radius: 9999px; bo=
rder-width: 4px; --tw-border-opacity: 1; border-color: var(--fallback-b1,ok=
lch(var(--b1)/var(--tw-border-opacity))); }

.btm-nav > :where(.active) { border-top-width: 2px; --tw-bg-opacity: 1; bac=
kground-color: var(--fallback-b1,oklch(var(--b1)/var(--tw-bg-opacity))); }

.btm-nav > .disabled, .btm-nav > [disabled] { pointer-events: none; --tw-bo=
rder-opacity: 0; background-color: var(--fallback-n,oklch(var(--n)/var(--tw=
-bg-opacity))); --tw-bg-opacity: 0.1; color: var(--fallback-bc,oklch(var(--=
bc)/var(--tw-text-opacity))); --tw-text-opacity: 0.2; }

.btm-nav > * .label { font-size: 1rem; line-height: 1.5rem; }

.btn:active:focus, .btn:active:hover { animation: 0s ease-out 0s 1 normal n=
one running button-pop; transform: scale(var(--btn-focus-scale,.97)); }

@supports not (color:oklch(0% 0 0)) {
  .btn { background-color: var(--btn-color,var(--fallback-b2)); border-colo=
r: var(--btn-color,var(--fallback-b2)); }
  .btn-primary { --btn-color: var(--fallback-p); }
  .prose :where(code):not(:where([class~=3D"not-prose"] *, pre *)) { backgr=
ound-color: var(--fallback-b3,oklch(var(--b3)/1)); }
}

@supports (color:color-mix(in oklab,black,black)) {
  .btn-outline.btn-primary.btn-active { background-color: color-mix(in okla=
b,var(--fallback-p,oklch(var(--p)/1)) 90%,#000); border-color: color-mix(in=
 oklab,var(--fallback-p,oklch(var(--p)/1)) 90%,#000); }
}

.btn:focus-visible { outline-style: solid; outline-width: 2px; outline-offs=
et: 2px; }

.btn-primary { --tw-text-opacity: 1; color: var(--fallback-pc,oklch(var(--p=
c)/var(--tw-text-opacity))); outline-color: var(--fallback-p,oklch(var(--p)=
/1)); }

@supports (color:oklch(0% 0 0)) {
  .btn-primary { --btn-color: var(--p); }
}

.btn.glass { --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; box-sh=
adow: var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000=
),var(--tw-shadow); outline-color: currentcolor; }

.btn.glass.btn-active { --glass-opacity: 25%; --glass-border-opacity: 15%; =
}

.btn-ghost { border-width: 1px; border-color: transparent; background-color=
: transparent; color: currentcolor; --tw-shadow: 0 0 #0000; --tw-shadow-col=
ored: 0 0 #0000; box-shadow: var(--tw-ring-offset-shadow,0 0 #0000),var(--t=
w-ring-shadow,0 0 #0000),var(--tw-shadow); outline-color: currentcolor; }

.btn-ghost.btn-active { border-color: transparent; background-color: var(--=
fallback-bc,oklch(var(--bc)/.2)); }

.btn-outline.btn-primary { --tw-text-opacity: 1; color: var(--fallback-p,ok=
lch(var(--p)/var(--tw-text-opacity))); }

.btn-outline.btn-primary.btn-active { --tw-text-opacity: 1; color: var(--fa=
llback-pc,oklch(var(--pc)/var(--tw-text-opacity))); }

.btn.btn-disabled, .btn:disabled, .btn[disabled] { --tw-border-opacity: 0; =
background-color: var(--fallback-n,oklch(var(--n)/var(--tw-bg-opacity))); -=
-tw-bg-opacity: 0.2; color: var(--fallback-bc,oklch(var(--bc)/var(--tw-text=
-opacity))); --tw-text-opacity: 0.2; }

.btn:is(input[type=3D"checkbox"]:checked), .btn:is(input[type=3D"radio"]:ch=
ecked) { --tw-border-opacity: 1; border-color: var(--fallback-p,oklch(var(-=
-p)/var(--tw-border-opacity))); --tw-bg-opacity: 1; background-color: var(-=
-fallback-p,oklch(var(--p)/var(--tw-bg-opacity))); --tw-text-opacity: 1; co=
lor: var(--fallback-pc,oklch(var(--pc)/var(--tw-text-opacity))); }

.btn:is(input[type=3D"checkbox"]:checked):focus-visible, .btn:is(input[type=
=3D"radio"]:checked):focus-visible { outline-color: var(--fallback-p,oklch(=
var(--p)/1)); }

@keyframes button-pop {=20
  0% { transform: scale(var(--btn-focus-scale,.98)); }
  40% { transform: scale(1.02); }
  100% { transform: scale(1); }
}

.card :where(figure:first-child) { overflow: hidden; border-start-start-rad=
ius: inherit; border-start-end-radius: inherit; border-end-start-radius: un=
set; border-end-end-radius: unset; }

.card :where(figure:last-child) { overflow: hidden; border-start-start-radi=
us: unset; border-start-end-radius: unset; border-end-start-radius: inherit=
; border-end-end-radius: inherit; }

.card:focus-visible { outline: currentcolor solid 2px; outline-offset: 2px;=
 }

.card.bordered { border-width: 1px; --tw-border-opacity: 1; border-color: v=
ar(--fallback-b2,oklch(var(--b2)/var(--tw-border-opacity))); }

.card.compact .card-body { padding: 1rem; font-size: 0.875rem; line-height:=
 1.25rem; }

.card.image-full :where(figure) { overflow: hidden; border-radius: inherit;=
 }

@keyframes checkmark {=20
  0% { background-position-y: 5px; }
  50% { background-position-y: -2px; }
  100% { background-position-y: 0px; }
}

.divider:not(:empty) { gap: 1rem; }

.footer-title { margin-bottom: 0.5rem; font-weight: 700; text-transform: up=
percase; opacity: 0.6; }

.input input { --tw-bg-opacity: 1; background-color: transparent; }

.input input:focus { outline: transparent solid 2px; outline-offset: 2px; }

.input[list]::-webkit-calendar-picker-indicator { line-height: 1em; }

.input-bordered { border-color: var(--fallback-bc,oklch(var(--bc)/.2)); }

.input:focus, .input:focus-within { box-shadow: none; border-color: var(--f=
allback-bc,oklch(var(--bc)/.2)); outline-style: solid; outline-width: 2px; =
outline-offset: 2px; outline-color: var(--fallback-bc,oklch(var(--bc)/.2));=
 }

.input-disabled, .input:disabled, .input[disabled] { cursor: not-allowed; -=
-tw-border-opacity: 1; border-color: var(--fallback-b2,oklch(var(--b2)/var(=
--tw-border-opacity))); --tw-bg-opacity: 1; background-color: var(--fallbac=
k-b2,oklch(var(--b2)/var(--tw-bg-opacity))); color: var(--fallback-bc,oklch=
(var(--bc)/.4)); }

.input-disabled::placeholder, .input:disabled::placeholder, .input[disabled=
]::placeholder { color: var(--fallback-bc,oklch(var(--bc)/var(--tw-placehol=
der-opacity))); --tw-placeholder-opacity: 0.2; }

.input::-webkit-date-and-time-value { text-align: inherit; }

.join > :where(:not(:first-child)) { margin-top: 0px; margin-bottom: 0px; m=
argin-inline-start: -1px; }

.link:focus { outline: transparent solid 2px; outline-offset: 2px; }

.link:focus-visible { outline: currentcolor solid 2px; outline-offset: 2px;=
 }

.loading { pointer-events: none; display: inline-block; aspect-ratio: 1 / 1=
; width: 1.5rem; background-color: currentcolor; mask-size: 100%; mask-repe=
at: no-repeat; mask-position: center center; }

.loading, .loading-spinner { mask-image: url("data:image/svg+xml,%3Csvg wid=
th=3D'24' height=3D'24' stroke=3D'%23000' viewBox=3D'0 0 24 24' xmlns=3D'ht=
tp://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:cen=
ter;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstro=
ke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyfram=
es spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinn=
er_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstr=
oke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dashar=
ray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class=3D'spinner_V=
8m1'%3E%3Ccircle cx=3D'12' cy=3D'12' r=3D'9.5' fill=3D'none' stroke-width=
=3D'3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E"); }

.loading-ring { mask-image: url("data:image/svg+xml,%3Csvg width=3D'44' hei=
ght=3D'44' viewBox=3D'0 0 44 44' xmlns=3D'http://www.w3.org/2000/svg' strok=
e=3D'%23fff'%3E%3Cg fill=3D'none' fill-rule=3D'evenodd' stroke-width=3D'2'%=
3E%3Ccircle cx=3D'22' cy=3D'22' r=3D'1'%3E%3Canimate attributeName=3D'r' be=
gin=3D'0s' dur=3D'1.8s' values=3D'1; 20' calcMode=3D'spline' keyTimes=3D'0;=
 1' keySplines=3D'0.165, 0.84, 0.44, 1' repeatCount=3D'indefinite' /%3E%3Ca=
nimate attributeName=3D'stroke-opacity' begin=3D'0s' dur=3D'1.8s' values=3D=
'1; 0' calcMode=3D'spline' keyTimes=3D'0; 1' keySplines=3D'0.3, 0.61, 0.355=
, 1' repeatCount=3D'indefinite' /%3E%3C/circle%3E%3Ccircle cx=3D'22' cy=3D'=
22' r=3D'1'%3E%3Canimate attributeName=3D'r' begin=3D'-0.9s' dur=3D'1.8s' v=
alues=3D'1; 20' calcMode=3D'spline' keyTimes=3D'0; 1' keySplines=3D'0.165, =
0.84, 0.44, 1' repeatCount=3D'indefinite' /%3E%3Canimate attributeName=3D's=
troke-opacity' begin=3D'-0.9s' dur=3D'1.8s' values=3D'1; 0' calcMode=3D'spl=
ine' keyTimes=3D'0; 1' keySplines=3D'0.3, 0.61, 0.355, 1' repeatCount=3D'in=
definite' /%3E%3C/circle%3E%3C/g%3E%3C/svg%3E"); }

.loading-xs { width: 1rem; }

:where(.menu li:empty) { --tw-bg-opacity: 1; background-color: var(--fallba=
ck-bc,oklch(var(--bc)/var(--tw-bg-opacity))); opacity: 0.1; margin: 0.5rem =
1rem; height: 1px; }

.menu :where(li ul)::before { position: absolute; bottom: 0.75rem; inset-in=
line-start: 0px; top: 0.75rem; width: 1px; --tw-bg-opacity: 1; background-c=
olor: var(--fallback-bc,oklch(var(--bc)/var(--tw-bg-opacity))); opacity: 0.=
1; content: ""; }

.menu :where(li:not(.menu-title) > :not(ul, details, .menu-title, .btn)), .=
menu :where(li:not(.menu-title) > details > summary:not(.menu-title)) { bor=
der-radius: var(--rounded-btn,.5rem); padding: 0.5rem 1rem; text-align: sta=
rt; transition-property: color, background-color, border-color, text-decora=
tion-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-=
filter, -webkit-backdrop-filter; transition-timing-function: cubic-bezier(0=
, 0, 0.2, 1); transition-duration: 0.2s; text-wrap: balance; }

:where(.menu li:not(.menu-title, .disabled) > :not(ul, details, .menu-title=
)):is(summary):not(.active, .btn):focus-visible, :where(.menu li:not(.menu-=
title, .disabled) > :not(ul, details, .menu-title)):not(summary, .active, .=
btn).focus, :where(.menu li:not(.menu-title, .disabled) > :not(ul, details,=
 .menu-title)):not(summary, .active, .btn):focus, :where(.menu li:not(.menu=
-title, .disabled) > details > summary:not(.menu-title)):is(summary):not(.a=
ctive, .btn):focus-visible, :where(.menu li:not(.menu-title, .disabled) > d=
etails > summary:not(.menu-title)):not(summary, .active, .btn).focus, :wher=
e(.menu li:not(.menu-title, .disabled) > details > summary:not(.menu-title)=
):not(summary, .active, .btn):focus { cursor: pointer; background-color: va=
r(--fallback-bc,oklch(var(--bc)/.1)); --tw-text-opacity: 1; color: var(--fa=
llback-bc,oklch(var(--bc)/var(--tw-text-opacity))); outline: transparent so=
lid 2px; outline-offset: 2px; }

.menu li > :not(ul, .menu-title, details, .btn).active, .menu li > :not(ul,=
 .menu-title, details, .btn):active, .menu li > details > summary:active { =
--tw-bg-opacity: 1; background-color: var(--fallback-n,oklch(var(--n)/var(-=
-tw-bg-opacity))); --tw-text-opacity: 1; color: var(--fallback-nc,oklch(var=
(--nc)/var(--tw-text-opacity))); }

.menu :where(li > details > summary)::-webkit-details-marker { display: non=
e; }

.menu :where(li > .menu-dropdown-toggle)::after, .menu :where(li > details =
> summary)::after { justify-self: end; display: block; margin-top: -0.5rem;=
 height: 0.5rem; width: 0.5rem; transform: rotate(45deg); transition-proper=
ty: transform, margin-top; transition-duration: 0.3s; transition-timing-fun=
ction: cubic-bezier(0.4, 0, 0.2, 1); content: ""; transform-origin: 75% 75%=
; box-shadow: 2px 2px; pointer-events: none; }

.menu :where(li > .menu-dropdown-toggle.menu-dropdown-show)::after, .menu :=
where(li > details[open] > summary)::after { transform: rotate(225deg); mar=
gin-top: 0px; }

.mockup-phone .display { overflow: hidden; border-radius: 40px; margin-top:=
 -25px; }

.mockup-browser .mockup-browser-toolbar .input { position: relative; margin=
-left: auto; margin-right: auto; display: block; height: 1.75rem; width: 24=
rem; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; --tw-b=
g-opacity: 1; background-color: var(--fallback-b2,oklch(var(--b2)/var(--tw-=
bg-opacity))); padding-left: 2rem; direction: ltr; }

.mockup-browser .mockup-browser-toolbar .input::before { left: 0.5rem; aspe=
ct-ratio: 1 / 1; height: 0.75rem; --tw-translate-y: -50%; border-radius: 99=
99px; border-width: 2px; border-color: currentcolor; }

.mockup-browser .mockup-browser-toolbar .input::after, .mockup-browser .moc=
kup-browser-toolbar .input::before { content: ""; position: absolute; top: =
50%; transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rota=
te(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX=
(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); opacity: 0.6; }

.mockup-browser .mockup-browser-toolbar .input::after { left: 1.25rem; heig=
ht: 0.5rem; --tw-translate-y: 25%; --tw-rotate: -45deg; border-radius: 9999=
px; border-width: 1px; border-color: currentcolor; }

.modal::backdrop, .modal:not(dialog:not(.modal-open)) { background-color: r=
gba(0, 0, 0, 0.4); animation: 0.2s ease-out 0s 1 normal none running modal-=
pop; }

.modal-open .modal-box, .modal-toggle:checked + .modal .modal-box, .modal:t=
arget .modal-box, .modal[open] .modal-box { --tw-translate-y: 0px; --tw-sca=
le-x: 1; --tw-scale-y: 1; transform: translate(var(--tw-translate-x),var(--=
tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var=
(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

@keyframes modal-pop {=20
  0% { opacity: 0; }
}

.progress:indeterminate { --progress-color: var(--fallback-bc,oklch(var(--b=
c)/1)); background-image: repeating-linear-gradient(90deg,var(--progress-co=
lor) -1%,var(--progress-color) 10%,transparent 10%,transparent 90%); backgr=
ound-size: 200%; background-position-x: 15%; animation: 5s ease-in-out 0s i=
nfinite normal none running progress-loading; }

.progress::-webkit-progress-bar { border-radius: var(--rounded-box,1rem); b=
ackground-color: transparent; }

.progress::-webkit-progress-value { border-radius: var(--rounded-box,1rem);=
 --tw-bg-opacity: 1; background-color: var(--fallback-bc,oklch(var(--bc)/va=
r(--tw-bg-opacity))); }

@keyframes progress-loading {=20
  50% { background-position-x: -115%; }
}

@keyframes radiomark {=20
  0% { box-shadow: 0 0 0 12px var(--fallback-b1,oklch(var(--b1)/1)) inset,0=
 0 0 12px var(--fallback-b1,oklch(var(--b1)/1)) inset; }
  50% { box-shadow: 0 0 0 3px var(--fallback-b1,oklch(var(--b1)/1)) inset,0=
 0 0 3px var(--fallback-b1,oklch(var(--b1)/1)) inset; }
  100% { box-shadow: 0 0 0 4px var(--fallback-b1,oklch(var(--b1)/1)) inset,=
0 0 0 4px var(--fallback-b1,oklch(var(--b1)/1)) inset; }
}

.range:focus-visible::-webkit-slider-thumb { --focus-shadow: 0 0 0 6px var(=
--fallback-b1,oklch(var(--b1)/1)) inset,0 0 0 2rem var(--range-shdw) inset;=
 }

.range::-webkit-slider-runnable-track { height: 0.5rem; width: 100%; border=
-radius: var(--rounded-box,1rem); background-color: var(--fallback-bc,oklch=
(var(--bc)/.1)); }

.range::-webkit-slider-thumb { position: relative; height: 1.5rem; width: 1=
.5rem; border-radius: var(--rounded-box,1rem); border-style: none; --tw-bg-=
opacity: 1; background-color: var(--fallback-b1,oklch(var(--b1)/var(--tw-bg=
-opacity))); appearance: none; top: 50%; color: var(--range-shdw); transfor=
m: translateY(-50%); --filler-size: 100rem; --filler-offset: 0.6rem; box-sh=
adow: 0 0 0 3px var(--range-shdw) inset,var(--focus-shadow,0 0),calc(var(--=
filler-size) * -1 - var(--filler-offset)) 0 0 var(--filler-size); }

.rating input { appearance: none; }

.rating .rating-hidden { width: 0.5rem; background-color: transparent; }

.rating input[type=3D"radio"]:checked { background-image: none; }

.rating input:checked ~ input, .rating input[aria-checked=3D"true"] ~ input=
 { --tw-bg-opacity: 0.2; }

.rating input:focus-visible { transition-property: transform; transition-ti=
ming-function: cubic-bezier(0, 0, 0.2, 1); transition-duration: 0.3s; trans=
form: translateY(-0.125em); }

.rating input:active:focus { animation: auto ease 0s 1 normal none running =
none; transform: translateY(-0.125em); }

@keyframes rating-pop {=20
  0% { transform: translateY(-0.125em); }
  40% { transform: translateY(-0.125em); }
  100% { transform: translateY(0px); }
}

.select:focus { box-shadow: none; border-color: var(--fallback-bc,oklch(var=
(--bc)/.2)); outline-style: solid; outline-width: 2px; outline-offset: 2px;=
 outline-color: var(--fallback-bc,oklch(var(--bc)/.2)); }

.select-disabled, .select:disabled, .select[disabled] { cursor: not-allowed=
; --tw-border-opacity: 1; border-color: var(--fallback-b2,oklch(var(--b2)/v=
ar(--tw-border-opacity))); --tw-bg-opacity: 1; background-color: var(--fall=
back-b2,oklch(var(--b2)/var(--tw-bg-opacity))); color: var(--fallback-bc,ok=
lch(var(--bc)/var(--tw-text-opacity))); --tw-text-opacity: 0.2; }

.select-disabled::placeholder, .select:disabled::placeholder, .select[disab=
led]::placeholder { color: var(--fallback-bc,oklch(var(--bc)/var(--tw-place=
holder-opacity))); --tw-placeholder-opacity: 0.2; }

.select-multiple, .select[multiple], .select[size].select:not([size=3D"1"])=
 { background-image: none; padding-right: 1rem; }

[dir=3D"rtl"] .select { background-position: calc(0% + 12px) calc(50% + 1px=
), calc(0% + 16px) calc(50% + 1px); }

@keyframes skeleton {=20
  0% { background-position: 150% center; }
  100% { background-position: -50% center; }
}

:where(.stats) > :not([hidden]) ~ :not([hidden]) { --tw-divide-x-reverse: 0=
; --tw-divide-y-reverse: 0; border-width: calc(0px * calc(1 - var(--tw-divi=
de-y-reverse))) calc(1px * var(--tw-divide-x-reverse)) calc(0px * var(--tw-=
divide-y-reverse)) calc(1px * calc(1 - var(--tw-divide-x-reverse))); }

:is([dir=3D"rtl"] .stats > :not([hidden]) ~ :not([hidden])) { --tw-divide-x=
-reverse: 1; }

.steps .step::before { top: 0px; height: 0.5rem; width: 100%; transform: tr=
anslate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate=
)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)=
) scaleY(var(--tw-scale-y)); color: var(--fallback-bc,oklch(var(--bc)/var(-=
-tw-text-opacity))); content: ""; margin-inline-start: -100%; }

.steps .step::after, .steps .step::before { grid-column-start: 1; grid-row-=
start: 1; --tw-bg-opacity: 1; background-color: var(--fallback-b3,oklch(var=
(--b3)/var(--tw-bg-opacity))); --tw-text-opacity: 1; }

.steps .step::after { content: counter(step); counter-increment: step 1; z-=
index: 1; position: relative; display: grid; height: 2rem; width: 2rem; pla=
ce-items: center; place-self: center; border-radius: 9999px; color: var(--f=
allback-bc,oklch(var(--bc)/var(--tw-text-opacity))); }

.steps .step:first-child::before { content: none; }

.steps .step[data-content]::after { content: attr(data-content); }

.steps .step-neutral + .step-neutral::before, .steps .step-neutral::after {=
 --tw-bg-opacity: 1; background-color: var(--fallback-n,oklch(var(--n)/var(=
--tw-bg-opacity))); --tw-text-opacity: 1; color: var(--fallback-nc,oklch(va=
r(--nc)/var(--tw-text-opacity))); }

.steps .step-primary + .step-primary::before, .steps .step-primary::after {=
 --tw-bg-opacity: 1; background-color: var(--fallback-p,oklch(var(--p)/var(=
--tw-bg-opacity))); --tw-text-opacity: 1; color: var(--fallback-pc,oklch(va=
r(--pc)/var(--tw-text-opacity))); }

.steps .step-secondary + .step-secondary::before, .steps .step-secondary::a=
fter { --tw-bg-opacity: 1; background-color: var(--fallback-s,oklch(var(--s=
)/var(--tw-bg-opacity))); --tw-text-opacity: 1; color: var(--fallback-sc,ok=
lch(var(--sc)/var(--tw-text-opacity))); }

.steps .step-accent + .step-accent::before, .steps .step-accent::after { --=
tw-bg-opacity: 1; background-color: var(--fallback-a,oklch(var(--a)/var(--t=
w-bg-opacity))); --tw-text-opacity: 1; color: var(--fallback-ac,oklch(var(-=
-ac)/var(--tw-text-opacity))); }

.steps .step-info + .step-info::before, .steps .step-info::after { --tw-bg-=
opacity: 1; background-color: var(--fallback-in,oklch(var(--in)/var(--tw-bg=
-opacity))); }

.steps .step-info::after { --tw-text-opacity: 1; color: var(--fallback-inc,=
oklch(var(--inc)/var(--tw-text-opacity))); }

.steps .step-success + .step-success::before, .steps .step-success::after {=
 --tw-bg-opacity: 1; background-color: var(--fallback-su,oklch(var(--su)/va=
r(--tw-bg-opacity))); }

.steps .step-success::after { --tw-text-opacity: 1; color: var(--fallback-s=
uc,oklch(var(--suc)/var(--tw-text-opacity))); }

.steps .step-warning + .step-warning::before, .steps .step-warning::after {=
 --tw-bg-opacity: 1; background-color: var(--fallback-wa,oklch(var(--wa)/va=
r(--tw-bg-opacity))); }

.steps .step-warning::after { --tw-text-opacity: 1; color: var(--fallback-w=
ac,oklch(var(--wac)/var(--tw-text-opacity))); }

.steps .step-error + .step-error::before, .steps .step-error::after { --tw-=
bg-opacity: 1; background-color: var(--fallback-er,oklch(var(--er)/var(--tw=
-bg-opacity))); }

.steps .step-error::after { --tw-text-opacity: 1; color: var(--fallback-erc=
,oklch(var(--erc)/var(--tw-text-opacity))); }

.tabs-lifted > .tab:focus-visible { border-end-end-radius: 0px; border-end-=
start-radius: 0px; }

.tab.tab-active:not(.tab-disabled):not([disabled]), .tab:is(input:checked) =
{ border-color: var(--fallback-bc,oklch(var(--bc)/var(--tw-border-opacity))=
); --tw-border-opacity: 1; --tw-text-opacity: 1; }

.tab:focus { outline: transparent solid 2px; outline-offset: 2px; }

.tab:focus-visible { outline: currentcolor solid 2px; outline-offset: -5px;=
 }

.tab-disabled, .tab[disabled] { cursor: not-allowed; color: var(--fallback-=
bc,oklch(var(--bc)/var(--tw-text-opacity))); --tw-text-opacity: 0.2; }

.tabs-bordered > .tab { border-color: var(--fallback-bc,oklch(var(--bc)/var=
(--tw-border-opacity))); --tw-border-opacity: 0.2; border-style: solid; bor=
der-bottom-width: calc(var(--tab-border, 1px) + 1px); }

.tabs-lifted > .tab { border-top-color: ; border-top-style: ; border-right-=
color: ; border-right-style: ; border-bottom-style: ; border-left-color: ; =
border-left-style: ; border-image-source: ; border-image-slice: ; border-im=
age-width: ; border-image-outset: ; border-image-repeat: ; border-width: 0 =
0 var(--tab-border,1px) 0; border-start-start-radius: var(--tab-radius,.5re=
m); border-start-end-radius: var(--tab-radius,.5rem); border-bottom-color: =
var(--tab-border-color); padding-inline-start: var(--tab-padding,1rem); pad=
ding-inline-end: var(--tab-padding,1rem); padding-top: var(--tab-border,1px=
); }

.tabs-lifted > .tab.tab-active:not(.tab-disabled):not([disabled]), .tabs-li=
fted > .tab:is(input:checked) { background-color: var(--tab-bg); border-wid=
th: var(--tab-border,1px) var(--tab-border,1px) 0 var(--tab-border,1px); bo=
rder-inline-start-color: var(--tab-border-color); border-inline-end-color: =
var(--tab-border-color); border-top-color: var(--tab-border-color); padding=
-inline-start: calc(var(--tab-padding, 1rem) - var(--tab-border, 1px)); pad=
ding-inline-end: calc(var(--tab-padding, 1rem) - var(--tab-border, 1px)); p=
adding-bottom: var(--tab-border,1px); padding-top: 0px; }

.tabs-lifted > .tab.tab-active:not(.tab-disabled):not([disabled])::before, =
.tabs-lifted > .tab:is(input:checked)::before { z-index: 1; content: ""; di=
splay: block; position: absolute; width: calc(100% + var(--tab-radius, .5re=
m) * 2); height: var(--tab-radius,.5rem); bottom: 0px; background-size: var=
(--tab-radius,.5rem); background-position: 0px 0px, 100% 0px; background-re=
peat: no-repeat; --tab-grad: calc(69% - var(--tab-border, 1px)); --radius-s=
tart: radial-gradient(circle at top left,transparent var(--tab-grad),var(--=
tab-border-color) calc(var(--tab-grad) + 0.25px),var(--tab-border-color) ca=
lc(var(--tab-grad) + var(--tab-border, 1px)),var(--tab-bg) calc(var(--tab-g=
rad) + var(--tab-border, 1px) + 0.25px)); --radius-end: radial-gradient(cir=
cle at top right,transparent var(--tab-grad),var(--tab-border-color) calc(v=
ar(--tab-grad) + 0.25px),var(--tab-border-color) calc(var(--tab-grad) + var=
(--tab-border, 1px)),var(--tab-bg) calc(var(--tab-grad) + var(--tab-border,=
 1px) + 0.25px)); background-image: var(--radius-start),var(--radius-end); =
}

.tabs-lifted > .tab.tab-active:not(.tab-disabled):not([disabled]):first-chi=
ld::before, .tabs-lifted > .tab:is(input:checked):first-child::before { bac=
kground-image: var(--radius-end); background-position: 100% 0px; }

[dir=3D"rtl"] .tabs-lifted > .tab.tab-active:not(.tab-disabled):not([disabl=
ed]):first-child::before, [dir=3D"rtl"] .tabs-lifted > .tab:is(input:checke=
d):first-child::before { background-image: var(--radius-start); background-=
position: 0px 0px; }

.tabs-lifted > .tab.tab-active:not(.tab-disabled):not([disabled]):last-chil=
d::before, .tabs-lifted > .tab:is(input:checked):last-child::before { backg=
round-image: var(--radius-start); background-position: 0px 0px; }

[dir=3D"rtl"] .tabs-lifted > .tab.tab-active:not(.tab-disabled):not([disabl=
ed]):last-child::before, [dir=3D"rtl"] .tabs-lifted > .tab:is(input:checked=
):last-child::before { background-image: var(--radius-end); background-posi=
tion: 100% 0px; }

.tabs-lifted > .tab-active:not(.tab-disabled):not([disabled]) + .tabs-lifte=
d .tab-active:not(.tab-disabled):not([disabled])::before, .tabs-lifted > .t=
ab:is(input:checked) + .tabs-lifted .tab:is(input:checked)::before { backgr=
ound-image: var(--radius-end); background-position: 100% 0px; }

.tabs-boxed .tab { border-radius: var(--rounded-btn,.5rem); }

:is([dir=3D"rtl"] .table) { text-align: right; }

.table :where(th, td) { padding: 0.75rem 1rem; vertical-align: middle; }

.table tr.active, .table tr.active:nth-child(2n), .table-zebra tbody tr:nth=
-child(2n) { --tw-bg-opacity: 1; background-color: var(--fallback-b2,oklch(=
var(--b2)/var(--tw-bg-opacity))); }

.table-zebra tr.active, .table-zebra tr.active:nth-child(2n), .table-zebra-=
zebra tbody tr:nth-child(2n) { --tw-bg-opacity: 1; background-color: var(--=
fallback-b3,oklch(var(--b3)/var(--tw-bg-opacity))); }

.table :where(thead tr, tbody tr:not(:last-child), tbody tr:first-child:las=
t-child) { border-bottom-width: 1px; --tw-border-opacity: 1; border-bottom-=
color: var(--fallback-b2,oklch(var(--b2)/var(--tw-border-opacity))); }

.table :where(thead, tfoot) { white-space: nowrap; font-size: 0.75rem; line=
-height: 1rem; font-weight: 700; color: var(--fallback-bc,oklch(var(--bc)/.=
6)); }

.table :where(tfoot) { border-top-width: 1px; --tw-border-opacity: 1; borde=
r-top-color: var(--fallback-b2,oklch(var(--b2)/var(--tw-border-opacity))); =
}

.textarea:focus { box-shadow: none; border-color: var(--fallback-bc,oklch(v=
ar(--bc)/.2)); outline-style: solid; outline-width: 2px; outline-offset: 2p=
x; outline-color: var(--fallback-bc,oklch(var(--bc)/.2)); }

.textarea-disabled, .textarea:disabled, .textarea[disabled] { cursor: not-a=
llowed; --tw-border-opacity: 1; border-color: var(--fallback-b2,oklch(var(-=
-b2)/var(--tw-border-opacity))); --tw-bg-opacity: 1; background-color: var(=
--fallback-b2,oklch(var(--b2)/var(--tw-bg-opacity))); --tw-text-opacity: 0.=
2; }

.textarea-disabled::placeholder, .textarea:disabled::placeholder, .textarea=
[disabled]::placeholder { color: var(--fallback-bc,oklch(var(--bc)/var(--tw=
-placeholder-opacity))); --tw-placeholder-opacity: 0.2; }

.toast > * { animation: 0.25s ease-out 0s 1 normal none running toast-pop; =
}

@keyframes toast-pop {=20
  0% { transform: scale(0.9); opacity: 0; }
  100% { transform: scale(1); opacity: 1; }
}

:root .prose { --tw-prose-body: var(--fallback-bc,oklch(var(--bc)/0.8)); --=
tw-prose-headings: var(--fallback-bc,oklch(var(--bc)/1)); --tw-prose-lead: =
var(--fallback-bc,oklch(var(--bc)/1)); --tw-prose-links: var(--fallback-bc,=
oklch(var(--bc)/1)); --tw-prose-bold: var(--fallback-bc,oklch(var(--bc)/1))=
; --tw-prose-counters: var(--fallback-bc,oklch(var(--bc)/1)); --tw-prose-bu=
llets: var(--fallback-bc,oklch(var(--bc)/0.5)); --tw-prose-hr: var(--fallba=
ck-bc,oklch(var(--bc)/0.2)); --tw-prose-quotes: var(--fallback-bc,oklch(var=
(--bc)/1)); --tw-prose-quote-borders: var(--fallback-bc,oklch(var(--bc)/0.2=
)); --tw-prose-captions: var(--fallback-bc,oklch(var(--bc)/0.5)); --tw-pros=
e-code: var(--fallback-bc,oklch(var(--bc)/1)); --tw-prose-pre-code: var(--f=
allback-nc,oklch(var(--nc)/1)); --tw-prose-pre-bg: var(--fallback-n,oklch(v=
ar(--n)/1)); --tw-prose-th-borders: var(--fallback-bc,oklch(var(--bc)/0.5))=
; --tw-prose-td-borders: var(--fallback-bc,oklch(var(--bc)/0.2)); }

.prose :where(code):not(:where([class~=3D"not-prose"] *, pre *)) { padding:=
 1px 8px; border-radius: var(--rounded-badge); font-weight: 400; background=
-color: var(--fallback-bc,oklch(var(--bc)/.1)); }

.prose :where(code):not(:where([class~=3D"not-prose"], [class~=3D"not-prose=
"] *))::after, .prose :where(code):not(:where([class~=3D"not-prose"], [clas=
s~=3D"not-prose"] *))::before { display: none; }

.prose pre code { border-radius: 0px; padding: 0px; }

.prose :where(tbody tr, thead):not(:where([class~=3D"not-prose"] *)) { bord=
er-bottom-color: var(--fallback-bc,oklch(var(--bc)/.2)); }

.artboard.phone-1.artboard-horizontal, .artboard.phone-1.horizontal { width=
: 568px; height: 320px; }

.artboard.phone-2.artboard-horizontal, .artboard.phone-2.horizontal { width=
: 667px; height: 375px; }

.artboard.phone-3.artboard-horizontal, .artboard.phone-3.horizontal { width=
: 736px; height: 414px; }

.artboard.phone-4.artboard-horizontal, .artboard.phone-4.horizontal { width=
: 812px; height: 375px; }

.artboard.phone-5.artboard-horizontal, .artboard.phone-5.horizontal { width=
: 896px; height: 414px; }

.artboard.phone-6.artboard-horizontal, .artboard.phone-6.horizontal { width=
: 1024px; height: 320px; }

.badge-md { height: 1.25rem; font-size: 0.875rem; line-height: 1.25rem; pad=
ding-left: 0.563rem; padding-right: 0.563rem; }

.btm-nav-xs > :where(.active) { border-top-width: 1px; }

.btm-nav-sm > :where(.active) { border-top-width: 2px; }

.btm-nav-md > :where(.active) { border-top-width: 2px; }

.btm-nav-lg > :where(.active) { border-top-width: 4px; }

.btn-sm { height: 2rem; min-height: 2rem; padding-left: 0.75rem; padding-ri=
ght: 0.75rem; font-size: 0.875rem; }

.btn-wide { width: 16rem; }

.btn-block { width: 100%; }

.btn-square:where(.btn-xs) { height: 1.5rem; width: 1.5rem; padding: 0px; }

.btn-square:where(.btn-sm) { height: 2rem; width: 2rem; padding: 0px; }

.btn-square:where(.btn-md) { height: 3rem; width: 3rem; padding: 0px; }

.btn-square:where(.btn-lg) { height: 4rem; width: 4rem; padding: 0px; }

.btn-circle:where(.btn-sm) { height: 2rem; width: 2rem; border-radius: 9999=
px; padding: 0px; }

.join.join-vertical { flex-direction: column; }

.join.join-vertical .join-item:first-child:not(:last-child), .join.join-ver=
tical :first-child:not(:last-child) .join-item { border-end-start-radius: 0=
px; border-end-end-radius: 0px; border-start-start-radius: inherit; border-=
start-end-radius: inherit; }

.join.join-vertical .join-item:last-child:not(:first-child), .join.join-ver=
tical :last-child:not(:first-child) .join-item { border-start-start-radius:=
 0px; border-start-end-radius: 0px; border-end-start-radius: inherit; borde=
r-end-end-radius: inherit; }

.join.join-horizontal { flex-direction: row; }

.join.join-horizontal .join-item:first-child:not(:last-child), .join.join-h=
orizontal :first-child:not(:last-child) .join-item { border-end-end-radius:=
 0px; border-start-end-radius: 0px; border-end-start-radius: inherit; borde=
r-start-start-radius: inherit; }

.join.join-horizontal .join-item:last-child:not(:first-child), .join.join-h=
orizontal :last-child:not(:first-child) .join-item { border-end-start-radiu=
s: 0px; border-start-start-radius: 0px; border-end-end-radius: inherit; bor=
der-start-end-radius: inherit; }

.tabs-md :where(.tab) { height: 2rem; font-size: 0.875rem; line-height: 2; =
--tab-padding: 1rem; }

.tabs-lg :where(.tab) { height: 3rem; font-size: 1.125rem; line-height: 2; =
--tab-padding: 1.25rem; }

.tabs-sm :where(.tab) { height: 1.5rem; font-size: 0.875rem; line-height: 0=
.75rem; --tab-padding: 0.75rem; }

.tabs-xs :where(.tab) { height: 1.25rem; font-size: 0.75rem; line-height: 0=
.75rem; --tab-padding: 0.5rem; }

:where(.toast) { bottom: 0px; inset-inline: auto 0px; top: auto; --tw-trans=
late-x: 0px; --tw-translate-y: 0px; transform: translate(var(--tw-translate=
-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x))=
 skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)=
); }

.toast:where(.toast-start) { inset-inline: 0px auto; --tw-translate-x: 0px;=
 transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(v=
ar(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var=
(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.toast:where(.toast-center) { inset-inline: 50%; --tw-translate-x: -50%; tr=
ansform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(=
--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--=
tw-scale-x)) scaleY(var(--tw-scale-y)); }

:is([dir=3D"rtl"] .toast:where(.toast-center)) { --tw-translate-x: 50%; tra=
nsform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(-=
-tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--t=
w-scale-x)) scaleY(var(--tw-scale-y)); }

.toast:where(.toast-end) { inset-inline: auto 0px; --tw-translate-x: 0px; t=
ransform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var=
(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(-=
-tw-scale-x)) scaleY(var(--tw-scale-y)); }

.toast:where(.toast-bottom) { bottom: 0px; top: auto; --tw-translate-y: 0px=
; transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(=
var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(va=
r(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.toast:where(.toast-middle) { bottom: auto; top: 50%; --tw-translate-y: -50=
%; transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate=
(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(v=
ar(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.toast:where(.toast-top) { bottom: auto; top: 0px; --tw-translate-y: 0px; t=
ransform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var=
(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(-=
-tw-scale-x)) scaleY(var(--tw-scale-y)); }

.tooltip { --tooltip-offset: calc(100% + 1px + var(--tooltip-tail, 0px)); }

.tooltip::before { position: absolute; pointer-events: none; z-index: 1; co=
ntent: var(--tw-content); --tw-content: attr(data-tip); }

.tooltip-top::before, .tooltip::before { transform: translateX(-50%); top: =
auto; left: 50%; right: auto; bottom: var(--tooltip-offset); }

.avatar.online::before { background-color: var(--fallback-su,oklch(var(--su=
)/var(--tw-bg-opacity))); }

.avatar.offline::before, .avatar.online::before { content: ""; position: ab=
solute; z-index: 10; display: block; border-radius: 9999px; --tw-bg-opacity=
: 1; outline-style: solid; outline-width: 2px; outline-color: var(--fallbac=
k-b1,oklch(var(--b1)/1)); width: 15%; height: 15%; top: 7%; right: 7%; }

.avatar.offline::before { background-color: var(--fallback-b3,oklch(var(--b=
3)/var(--tw-bg-opacity))); }

.join.join-vertical > :where(:not(:first-child)) { margin-left: 0px; margin=
-right: 0px; margin-top: -1px; }

.join.join-horizontal > :where(:not(:first-child)) { margin-top: 0px; margi=
n-bottom: 0px; margin-inline-start: -1px; }

.table-md :not(thead):not(tfoot) tr { font-size: 0.875rem; line-height: 1.2=
5rem; }

.table-md :where(th, td) { padding: 0.75rem 1rem; }

.tooltip { position: relative; display: inline-block; text-align: center; -=
-tooltip-tail: 0.1875rem; --tooltip-color: var(--fallback-n,oklch(var(--n)/=
1)); --tooltip-text-color: var(--fallback-nc,oklch(var(--nc)/1)); --tooltip=
-tail-offset: calc(100% + 0.0625rem - var(--tooltip-tail)); }

.tooltip::after, .tooltip::before { opacity: 0; transition-property: color,=
 background-color, border-color, text-decoration-color, fill, stroke, opaci=
ty, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter=
; transition-delay: 0.1s; transition-duration: 0.2s; transition-timing-func=
tion: cubic-bezier(0.4, 0, 0.2, 1); }

.tooltip::after { position: absolute; content: ""; border-style: solid; bor=
der-width: var(--tooltip-tail,0); width: 0px; height: 0px; display: block; =
}

.tooltip::before { max-width: 20rem; border-radius: 0.25rem; padding: 0.25r=
em 0.5rem; font-size: 0.875rem; line-height: 1.25rem; background-color: var=
(--tooltip-color); color: var(--tooltip-text-color); width: max-content; }

.tooltip.tooltip-open::after, .tooltip.tooltip-open::before, .tooltip:hover=
::after, .tooltip:hover::before { opacity: 1; transition-delay: 75ms; }

.tooltip:has(:focus-visible)::after, .tooltip:has(:focus-visible)::before {=
 opacity: 1; transition-delay: 75ms; }

.tooltip:not([data-tip]):hover::after, .tooltip:not([data-tip]):hover::befo=
re { visibility: hidden; opacity: 0; }

.tooltip-top::after, .tooltip::after { transform: translateX(-50%); border-=
color: var(--tooltip-color) transparent transparent transparent; top: auto;=
 left: 50%; right: auto; bottom: var(--tooltip-tail-offset); }

.sr-only { position: absolute; width: 1px; height: 1px; padding: 0px; margi=
n: -1px; overflow: hidden; clip: rect(0px, 0px, 0px, 0px); white-space: now=
rap; border-width: 0px; }

.pointer-events-none { pointer-events: none; }

.pointer-events-auto { pointer-events: auto; }

.\!visible { visibility: visible !important; }

.visible { visibility: visible; }

.static { position: static; }

.fixed { position: fixed; }

.absolute { position: absolute; }

.relative { position: relative; }

.sticky { position: sticky; }

.-inset-\[1px\] { inset: -1px; }

.inset-0 { inset: 0px; }

.-inset-x-4 { left: -1rem; right: -1rem; }

.inset-x-0 { left: 0px; right: 0px; }

.inset-y-0 { top: 0px; bottom: 0px; }

.bottom-0 { bottom: 0px; }

.bottom-6 { bottom: 1.5rem; }

.left-0 { left: 0px; }

.left-1\/2 { left: 50%; }

.left-4 { left: 1rem; }

.right-0 { right: 0px; }

.right-1\/2 { right: 50%; }

.right-3 { right: 0.75rem; }

.right-4 { right: 1rem; }

.right-\[9px\] { right: 9px; }

.top-0 { top: 0px; }

.top-1\/2 { top: 50%; }

.top-2 { top: 0.5rem; }

.top-4 { top: 1rem; }

.top-\[53\%\] { top: 53%; }

.isolate { isolation: isolate; }

.-z-10 { z-index: -10; }

.z-0 { z-index: 0; }

.z-10 { z-index: 10; }

.z-20 { z-index: 20; }

.z-30 { z-index: 30; }

.z-40 { z-index: 40; }

.z-50 { z-index: 50; }

.z-\[60\] { z-index: 60; }

.z-\[999\] { z-index: 999; }

.order-none { order: 0; }

.col-span-2 { grid-column: span 2 / span 2; }

.-m-2 { margin: -0.5rem; }

.-m-2\.5 { margin: -0.625rem; }

.m-1 { margin: 0.25rem; }

.mx-1 { margin-left: 0.25rem; margin-right: 0.25rem; }

.mx-3 { margin-left: 0.75rem; margin-right: 0.75rem; }

.mx-auto { margin-left: auto; margin-right: auto; }

.my-1 { margin-top: 0.25rem; margin-bottom: 0.25rem; }

.my-2 { margin-top: 0.5rem; margin-bottom: 0.5rem; }

.my-4 { margin-top: 1rem; margin-bottom: 1rem; }

.my-6 { margin-top: 1.5rem; margin-bottom: 1.5rem; }

.my-8 { margin-top: 2rem; margin-bottom: 2rem; }

.-mb-10 { margin-bottom: -2.5rem; }

.-ml-1 { margin-left: -0.25rem; }

.-ml-10 { margin-left: -2.5rem; }

.-ml-20 { margin-left: -5rem; }

.-mr-20 { margin-right: -5rem; }

.-mt-4 { margin-top: -1rem; }

.mb-0 { margin-bottom: 0px; }

.mb-0\.5 { margin-bottom: 0.125rem; }

.mb-1 { margin-bottom: 0.25rem; }

.mb-10 { margin-bottom: 2.5rem; }

.mb-12 { margin-bottom: 3rem; }

.mb-16 { margin-bottom: 4rem; }

.mb-2 { margin-bottom: 0.5rem; }

.mb-20 { margin-bottom: 5rem; }

.mb-3 { margin-bottom: 0.75rem; }

.mb-4 { margin-bottom: 1rem; }

.mb-5 { margin-bottom: 1.25rem; }

.mb-6 { margin-bottom: 1.5rem; }

.mb-8 { margin-bottom: 2rem; }

.mb-\[4px\] { margin-bottom: 4px; }

.ml-0 { margin-left: 0px; }

.ml-1 { margin-left: 0.25rem; }

.ml-12 { margin-left: 3rem; }

.ml-2 { margin-left: 0.5rem; }

.ml-4 { margin-left: 1rem; }

.ml-6 { margin-left: 1.5rem; }

.ml-auto { margin-left: auto; }

.mr-1 { margin-right: 0.25rem; }

.mr-12 { margin-right: 3rem; }

.mr-16 { margin-right: 4rem; }

.mr-2 { margin-right: 0.5rem; }

.mr-3 { margin-right: 0.75rem; }

.mt-0 { margin-top: 0px; }

.mt-0\.5 { margin-top: 0.125rem; }

.mt-1 { margin-top: 0.25rem; }

.mt-10 { margin-top: 2.5rem; }

.mt-12 { margin-top: 3rem; }

.mt-16 { margin-top: 4rem; }

.mt-2 { margin-top: 0.5rem; }

.mt-3 { margin-top: 0.75rem; }

.mt-4 { margin-top: 1rem; }

.mt-5 { margin-top: 1.25rem; }

.mt-6 { margin-top: 1.5rem; }

.mt-8 { margin-top: 2rem; }

.mt-auto { margin-top: auto; }

.line-clamp-2 { overflow: hidden; display: -webkit-box; -webkit-box-orient:=
 vertical; -webkit-line-clamp: 2; }

.block { display: block; }

.inline-block { display: inline-block; }

.inline { display: inline; }

.\!flex { display: flex !important; }

.flex { display: flex; }

.inline-flex { display: inline-flex; }

.table { display: table; }

.flow-root { display: flow-root; }

.grid { display: grid; }

.contents { display: contents; }

.hidden { display: none; }

.aspect-square { aspect-ratio: 1 / 1; }

.size-5 { width: 1.25rem; height: 1.25rem; }

.size-6 { width: 1.5rem; height: 1.5rem; }

.\!h-24 { height: 6rem !important; }

.h-1 { height: 0.25rem; }

.h-10 { height: 2.5rem; }

.h-12 { height: 3rem; }

.h-14 { height: 3.5rem; }

.h-16 { height: 4rem; }

.h-2 { height: 0.5rem; }

.h-2\.5 { height: 0.625rem; }

.h-24 { height: 6rem; }

.h-3 { height: 0.75rem; }

.h-36 { height: 9rem; }

.h-4 { height: 1rem; }

.h-48 { height: 12rem; }

.h-5 { height: 1.25rem; }

.h-56 { height: 14rem; }

.h-6 { height: 1.5rem; }

.h-72 { height: 18rem; }

.h-8 { height: 2rem; }

.h-\[1\.5px\] { height: 1.5px; }

.h-\[18px\] { height: 18px; }

.h-\[20px\] { height: 20px; }

.h-\[22rem\] { height: 22rem; }

.h-fit { height: fit-content; }

.h-full { height: 100%; }

.h-screen { height: 100vh; }

.max-h-0 { max-height: 0px; }

.max-h-40 { max-height: 10rem; }

.min-h-0 { min-height: 0px; }

.min-h-full { min-height: 100%; }

.min-h-screen { min-height: 100vh; }

.\!w-24 { width: 6rem !important; }

.w-1 { width: 0.25rem; }

.w-1\/4 { width: 25%; }

.w-10 { width: 2.5rem; }

.w-12 { width: 3rem; }

.w-14 { width: 3.5rem; }

.w-16 { width: 4rem; }

.w-20 { width: 5rem; }

.w-3 { width: 0.75rem; }

.w-36 { width: 9rem; }

.w-4 { width: 1rem; }

.w-5 { width: 1.25rem; }

.w-56 { width: 14rem; }

.w-6 { width: 1.5rem; }

.w-64 { width: 16rem; }

.w-7 { width: 1.75rem; }

.w-72 { width: 18rem; }

.w-8 { width: 2rem; }

.w-\[18px\] { width: 18px; }

.w-\[200\%\] { width: 200%; }

.w-\[20px\] { width: 20px; }

.w-\[2px\] { width: 2px; }

.w-\[4px\] { width: 4px; }

.w-\[5px\] { width: 5px; }

.w-full { width: 100%; }

.w-screen { width: 100vw; }

.min-w-0 { min-width: 0px; }

.min-w-full { min-width: 100%; }

.min-w-max { min-width: max-content; }

.max-w-0 { max-width: 0px; }

.max-w-2xl { max-width: 42rem; }

.max-w-3xl { max-width: 48rem; }

.max-w-4xl { max-width: 56rem; }

.max-w-5xl { max-width: 64rem; }

.max-w-6xl { max-width: 72rem; }

.max-w-7xl { max-width: 80rem; }

.max-w-\[20rem\] { max-width: 20rem; }

.max-w-\[320px\] { max-width: 320px; }

.max-w-\[600px\] { max-width: 600px; }

.max-w-\[82rem\] { max-width: 82rem; }

.max-w-full { max-width: 100%; }

.max-w-lg { max-width: 32rem; }

.max-w-md { max-width: 28rem; }

.max-w-none { max-width: none; }

.max-w-screen-xl { max-width: 1280px; }

.max-w-sm { max-width: 24rem; }

.max-w-xl { max-width: 36rem; }

.max-w-xs { max-width: 20rem; }

.flex-1 { flex: 1 1 0%; }

.flex-shrink-0, .shrink-0 { flex-shrink: 0; }

.flex-grow, .grow { flex-grow: 1; }

.basis-1\/2 { flex-basis: 50%; }

.origin-bottom-left { transform-origin: left bottom; }

.origin-center { transform-origin: center center; }

.origin-right { transform-origin: right center; }

.-translate-x-1\/2 { --tw-translate-x: -50%; }

.-translate-x-1\/2, .-translate-y-0 { transform: translate(var(--tw-transla=
te-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x=
)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-=
y)); }

.-translate-y-0 { --tw-translate-y: -0px; }

.-translate-y-0\.5 { --tw-translate-y: -0.125rem; }

.-translate-y-0\.5, .-translate-y-1\/2 { transform: translate(var(--tw-tran=
slate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-ske=
w-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-sca=
le-y)); }

.-translate-y-1\/2 { --tw-translate-y: -50%; }

.-translate-y-5 { --tw-translate-y: -1.25rem; }

.-translate-y-5, .translate-x-1\/4 { transform: translate(var(--tw-translat=
e-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)=
) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y=
)); }

.translate-x-1\/4 { --tw-translate-x: 25%; }

.translate-x-12 { --tw-translate-x: 3rem; }

.translate-x-12, .translate-y-0 { transform: translate(var(--tw-translate-x=
),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) s=
kewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));=
 }

.translate-y-0 { --tw-translate-y: 0px; }

.translate-y-1\/4 { --tw-translate-y: 25%; }

.-rotate-12, .translate-y-1\/4 { transform: translate(var(--tw-translate-x)=
,var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) sk=
ewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); =
}

.-rotate-12 { --tw-rotate: -12deg; }

.-rotate-\[8deg\] { --tw-rotate: -8deg; }

.-rotate-\[8deg\], .rotate-0 { transform: translate(var(--tw-translate-x),v=
ar(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skew=
Y(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.rotate-0 { --tw-rotate: 0deg; }

.rotate-12 { --tw-rotate: 12deg; }

.rotate-12, .rotate-180 { transform: translate(var(--tw-translate-x),var(--=
tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var=
(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.rotate-180 { --tw-rotate: 180deg; }

.rotate-90 { --tw-rotate: 90deg; }

.rotate-90, .rotate-\[6deg\] { transform: translate(var(--tw-translate-x),v=
ar(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skew=
Y(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.rotate-\[6deg\] { --tw-rotate: 6deg; }

.skew-x-\[-30deg\] { --tw-skew-x: -30deg; }

.scale-100, .skew-x-\[-30deg\] { transform: translate(var(--tw-translate-x)=
,var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) sk=
ewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); =
}

.scale-100 { --tw-scale-x: 1; --tw-scale-y: 1; }

.scale-75 { --tw-scale-x: .75; --tw-scale-y: .75; }

.scale-75, .scale-95 { transform: translate(var(--tw-translate-x),var(--tw-=
translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--=
tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.scale-95 { --tw-scale-x: .95; --tw-scale-y: .95; }

.transform { transform: translate(var(--tw-translate-x),var(--tw-translate-=
y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)=
) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

@keyframes bounce {=20
  0%, 100% { transform: translateY(-25%); animation-timing-function: cubic-=
bezier(0.8, 0, 1, 1); }
  50% { transform: none; animation-timing-function: cubic-bezier(0, 0, 0.2,=
 1); }
}

.animate-bounce { animation: 1s ease 0s infinite normal none running bounce=
; }

@keyframes opacity {=20
  0% { opacity: 0; }
  100% { opacity: 1; }
}

.animate-opacity { animation: 0.25s ease-in-out 0s 1 normal none running op=
acity; }

@keyframes pulse {=20
  50% { opacity: 0.5; }
}

.animate-pulse { animation: 2s cubic-bezier(0.4, 0, 0.6, 1) 0s infinite nor=
mal none running pulse; }

.animate-shimmer { animation: 3s ease-out 0s infinite alternate none runnin=
g shimmer; }

@keyframes shimmer {=20
  0% { background-position: 0px 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0px 50%; }
}

.animate-shimmertext { animation: 2s linear 0s infinite normal none running=
 shimmer; }

@keyframes spin {=20
  100% { transform: rotate(1turn); }
}

.animate-spin { animation: 1s linear 0s infinite normal none running spin; =
}

.cursor-pointer { cursor: pointer; }

.select-none { user-select: none; }

.resize { resize: both; }

.scroll-mt-24 { scroll-margin-top: 6rem; }

.list-outside { list-style-position: outside; }

.list-decimal { list-style-type: decimal; }

.list-disc { list-style-type: disc; }

.list-none { list-style-type: none; }

.break-inside-avoid { break-inside: avoid; }

.grid-cols-1 { grid-template-columns: repeat(1, minmax(0px, 1fr)); }

.grid-cols-4 { grid-template-columns: repeat(4, minmax(0px, 1fr)); }

.flex-row { flex-direction: row; }

.flex-col { flex-direction: column; }

.flex-wrap { flex-wrap: wrap; }

.items-start { align-items: flex-start; }

.items-end { align-items: flex-end; }

.items-center { align-items: center; }

.items-baseline { align-items: baseline; }

.items-stretch { align-items: stretch; }

.justify-start { justify-content: flex-start; }

.justify-end { justify-content: flex-end; }

.justify-center { justify-content: center; }

.justify-between { justify-content: space-between; }

.gap-0 { gap: 0px; }

.gap-0\.5 { gap: 0.125rem; }

.gap-1 { gap: 0.25rem; }

.gap-10 { gap: 2.5rem; }

.gap-12 { gap: 3rem; }

.gap-16 { gap: 4rem; }

.gap-2 { gap: 0.5rem; }

.gap-3 { gap: 0.75rem; }

.gap-4 { gap: 1rem; }

.gap-5 { gap: 1.25rem; }

.gap-6 { gap: 1.5rem; }

.gap-8 { gap: 2rem; }

.gap-x-4 { column-gap: 1rem; }

.gap-y-4 { row-gap: 1rem; }

.gap-y-6 { row-gap: 1.5rem; }

.-space-x-5 > :not([hidden]) ~ :not([hidden]) { --tw-space-x-reverse: 0; ma=
rgin-right: calc(-1.25rem * var(--tw-space-x-reverse)); margin-left: calc(-=
1.25rem * calc(1 - var(--tw-space-x-reverse))); }

.space-x-2 > :not([hidden]) ~ :not([hidden]) { --tw-space-x-reverse: 0; mar=
gin-right: calc(.5rem * var(--tw-space-x-reverse)); margin-left: calc(.5rem=
 * calc(1 - var(--tw-space-x-reverse))); }

.space-x-4 > :not([hidden]) ~ :not([hidden]) { --tw-space-x-reverse: 0; mar=
gin-right: calc(1rem * var(--tw-space-x-reverse)); margin-left: calc(1rem *=
 calc(1 - var(--tw-space-x-reverse))); }

.space-y-1 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; mar=
gin-top: calc(.25rem * calc(1 - var(--tw-space-y-reverse))); margin-bottom:=
 calc(.25rem * var(--tw-space-y-reverse)); }

.space-y-10 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; ma=
rgin-top: calc(2.5rem * calc(1 - var(--tw-space-y-reverse))); margin-bottom=
: calc(2.5rem * var(--tw-space-y-reverse)); }

.space-y-2 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; mar=
gin-top: calc(.5rem * calc(1 - var(--tw-space-y-reverse))); margin-bottom: =
calc(.5rem * var(--tw-space-y-reverse)); }

.space-y-24 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; ma=
rgin-top: calc(6rem * calc(1 - var(--tw-space-y-reverse))); margin-bottom: =
calc(6rem * var(--tw-space-y-reverse)); }

.space-y-3 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; mar=
gin-top: calc(.75rem * calc(1 - var(--tw-space-y-reverse))); margin-bottom:=
 calc(.75rem * var(--tw-space-y-reverse)); }

.space-y-4 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; mar=
gin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse))); margin-bottom: c=
alc(1rem * var(--tw-space-y-reverse)); }

.space-y-5 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; mar=
gin-top: calc(1.25rem * calc(1 - var(--tw-space-y-reverse))); margin-bottom=
: calc(1.25rem * var(--tw-space-y-reverse)); }

.space-y-6 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; mar=
gin-top: calc(1.5rem * calc(1 - var(--tw-space-y-reverse))); margin-bottom:=
 calc(1.5rem * var(--tw-space-y-reverse)); }

.space-y-8 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: 0; mar=
gin-top: calc(2rem * calc(1 - var(--tw-space-y-reverse))); margin-bottom: c=
alc(2rem * var(--tw-space-y-reverse)); }

.overflow-auto { overflow: auto; }

.overflow-hidden { overflow: hidden; }

.overflow-visible { overflow: visible; }

.overflow-x-auto { overflow-x: auto; }

.overflow-y-auto { overflow-y: auto; }

.overflow-x-hidden { overflow-x: hidden; }

.overflow-x-visible { overflow-x: visible; }

.truncate { overflow: hidden; text-overflow: ellipsis; }

.truncate, .whitespace-nowrap { white-space: nowrap; }

.whitespace-pre { white-space: pre; }

.whitespace-pre-line { white-space: pre-line; }

.whitespace-pre-wrap { white-space: pre-wrap; }

.rounded { border-radius: 0.25rem; }

.rounded-2xl { border-radius: 1rem; }

.rounded-3xl { border-radius: 1.5rem; }

.rounded-\[9px\] { border-radius: 9px; }

.rounded-box { border-radius: var(--rounded-box,1rem); }

.rounded-full { border-radius: 9999px; }

.rounded-lg { border-radius: 0.5rem; }

.rounded-md { border-radius: 0.375rem; }

.rounded-xl { border-radius: 0.75rem; }

.rounded-b-md { border-bottom-right-radius: 0.375rem; border-bottom-left-ra=
dius: 0.375rem; }

.rounded-b-none { border-bottom-right-radius: 0px; border-bottom-left-radiu=
s: 0px; }

.rounded-t-box { border-top-left-radius: var(--rounded-box,1rem); border-to=
p-right-radius: var(--rounded-box,1rem); }

.rounded-t-md { border-top-left-radius: 0.375rem; border-top-right-radius: =
0.375rem; }

.border { border-width: 1px; }

.border-0 { border-width: 0px; }

.border-2 { border-width: 2px; }

.border-4 { border-width: 4px; }

.border-b { border-bottom-width: 1px; }

.border-b-2 { border-bottom-width: 2px; }

.border-l-2 { border-left-width: 2px; }

.border-l-4 { border-left-width: 4px; }

.border-t { border-top-width: 1px; }

.\!border-none { border-style: none !important; }

.border-base-300 { --tw-border-opacity: 1; border-color: var(--fallback-b3,=
oklch(var(--b3)/var(--tw-border-opacity))); }

.border-base-content\/10 { border-color: var(--fallback-bc,oklch(var(--bc)/=
.1)); }

.border-base-content\/20 { border-color: var(--fallback-bc,oklch(var(--bc)/=
.2)); }

.border-base-content\/5 { border-color: var(--fallback-bc,oklch(var(--bc)/.=
05)); }

.border-black\/40 { border-color: rgba(0, 0, 0, 0.4); }

.border-blue-200 { --tw-border-opacity: 1; border-color: rgb(191 219 254/va=
r(--tw-border-opacity)); }

.border-blue-500 { --tw-border-opacity: 1; border-color: rgb(59 130 246/var=
(--tw-border-opacity)); }

.border-gray-200 { --tw-border-opacity: 1; border-color: rgb(229 231 235/va=
r(--tw-border-opacity)); }

.border-gray-300 { --tw-border-opacity: 1; border-color: rgb(209 213 219/va=
r(--tw-border-opacity)); }

.border-gray-400 { --tw-border-opacity: 1; border-color: rgb(156 163 175/va=
r(--tw-border-opacity)); }

.border-green-400\/30 { border-color: rgba(74, 222, 128, 0.3); }

.border-primary { --tw-border-opacity: 1; border-color: var(--fallback-p,ok=
lch(var(--p)/var(--tw-border-opacity))); }

.border-purple-500 { --tw-border-opacity: 1; border-color: rgb(168 85 247/v=
ar(--tw-border-opacity)); }

.border-red-400\/30 { border-color: rgba(248, 114, 114, 0.3); }

.border-transparent { border-color: transparent; }

.border-white\/10 { border-color: rgba(255, 255, 255, 0.1); }

.border-t-blue-500 { --tw-border-opacity: 1; border-top-color: rgb(59 130 2=
46/var(--tw-border-opacity)); }

.border-t-transparent { border-top-color: transparent; }

.\!bg-gray-50 { --tw-bg-opacity: 1 !important; background-color: rgb(249 25=
0 251/var(--tw-bg-opacity)) !important; }

.bg-accent { --tw-bg-opacity: 1; background-color: var(--fallback-a,oklch(v=
ar(--a)/var(--tw-bg-opacity))); }

.bg-base-100 { --tw-bg-opacity: 1; background-color: var(--fallback-b1,oklc=
h(var(--b1)/var(--tw-bg-opacity))); }

.bg-base-200 { --tw-bg-opacity: 1; background-color: var(--fallback-b2,oklc=
h(var(--b2)/var(--tw-bg-opacity))); }

.bg-base-200\/50 { background-color: var(--fallback-b2,oklch(var(--b2)/.5))=
; }

.bg-base-300 { --tw-bg-opacity: 1; background-color: var(--fallback-b3,oklc=
h(var(--b3)/var(--tw-bg-opacity))); }

.bg-base-content { --tw-bg-opacity: 1; background-color: var(--fallback-bc,=
oklch(var(--bc)/var(--tw-bg-opacity))); }

.bg-base-content\/5 { background-color: var(--fallback-bc,oklch(var(--bc)/.=
05)); }

.bg-black { --tw-bg-opacity: 1; background-color: rgb(0 0 0/var(--tw-bg-opa=
city)); }

.bg-blue-400\/20 { background-color: rgba(96, 165, 250, 0.2); }

.bg-blue-50 { --tw-bg-opacity: 1; background-color: rgb(239 246 255/var(--t=
w-bg-opacity)); }

.bg-blue-600 { --tw-bg-opacity: 1; background-color: rgb(37 99 235/var(--tw=
-bg-opacity)); }

.bg-blue-600\/30 { background-color: rgba(37, 99, 235, 0.3); }

.bg-gray-100 { --tw-bg-opacity: 1; background-color: rgb(243 244 246/var(--=
tw-bg-opacity)); }

.bg-gray-200 { --tw-bg-opacity: 1; background-color: rgb(229 231 235/var(--=
tw-bg-opacity)); }

.bg-gray-300 { --tw-bg-opacity: 1; background-color: rgb(209 213 219/var(--=
tw-bg-opacity)); }

.bg-gray-400\/80 { background-color: rgba(156, 163, 175, 0.8); }

.bg-gray-50 { --tw-bg-opacity: 1; background-color: rgb(249 250 251/var(--t=
w-bg-opacity)); }

.bg-gray-900 { --tw-bg-opacity: 1; background-color: rgb(17 24 39/var(--tw-=
bg-opacity)); }

.bg-gray-900\/50 { background-color: rgba(17, 24, 39, 0.5); }

.bg-green-100 { --tw-bg-opacity: 1; background-color: rgb(220 252 231/var(-=
-tw-bg-opacity)); }

.bg-green-950\/50 { background-color: rgba(5, 46, 22, 0.5); }

.bg-neutral { --tw-bg-opacity: 1; background-color: var(--fallback-n,oklch(=
var(--n)/var(--tw-bg-opacity))); }

.bg-neutral-content { --tw-bg-opacity: 1; background-color: var(--fallback-=
nc,oklch(var(--nc)/var(--tw-bg-opacity))); }

.bg-primary { --tw-bg-opacity: 1; background-color: var(--fallback-p,oklch(=
var(--p)/var(--tw-bg-opacity))); }

.bg-primary\/20 { background-color: var(--fallback-p,oklch(var(--p)/.2)); }

.bg-red-100 { --tw-bg-opacity: 1; background-color: rgb(254 226 226/var(--t=
w-bg-opacity)); }

.bg-red-400 { --tw-bg-opacity: 1; background-color: rgb(248 113 113/var(--t=
w-bg-opacity)); }

.bg-red-400\/70 { background-color: rgba(248, 114, 114, 0.7); }

.bg-red-950\/50 { background-color: rgba(69, 10, 10, 0.5); }

.bg-secondary { --tw-bg-opacity: 1; background-color: var(--fallback-s,oklc=
h(var(--s)/var(--tw-bg-opacity))); }

.bg-slate-300 { --tw-bg-opacity: 1; background-color: rgb(203 213 225/var(-=
-tw-bg-opacity)); }

.bg-slate-300\/80 { background-color: rgba(203, 213, 225, 0.8); }

.bg-slate-400 { --tw-bg-opacity: 1; background-color: rgb(148 163 184/var(-=
-tw-bg-opacity)); }

.bg-slate-500 { --tw-bg-opacity: 1; background-color: rgb(100 116 139/var(-=
-tw-bg-opacity)); }

.bg-slate-600 { --tw-bg-opacity: 1; background-color: rgb(71 85 105/var(--t=
w-bg-opacity)); }

.bg-slate-900 { --tw-bg-opacity: 1; background-color: rgb(15 23 42/var(--tw=
-bg-opacity)); }

.bg-success { --tw-bg-opacity: 1; background-color: var(--fallback-su,oklch=
(var(--su)/var(--tw-bg-opacity))); }

.bg-success\/70 { background-color: var(--fallback-su,oklch(var(--su)/.7));=
 }

.bg-transparent { background-color: transparent; }

.bg-warning { --tw-bg-opacity: 1; background-color: var(--fallback-wa,oklch=
(var(--wa)/var(--tw-bg-opacity))); }

.bg-warning\/25 { background-color: var(--fallback-wa,oklch(var(--wa)/.25))=
; }

.bg-warning\/70 { background-color: var(--fallback-wa,oklch(var(--wa)/.7));=
 }

.bg-white { --tw-bg-opacity: 1; background-color: rgb(255 255 255/var(--tw-=
bg-opacity)); }

.bg-yellow-500\/20 { background-color: rgba(234, 179, 8, 0.2); }

.bg-opacity-50 { --tw-bg-opacity: 0.5; }

.bg-opacity-70 { --tw-bg-opacity: 0.7; }

.bg-\[radial-gradient\(45rem_50rem_at_top\,theme\(colors\.base-300\)\,theme=
\(colors\.base-100\)\)\] { background-image: radial-gradient(45rem 50rem at=
 top,var(--fallback-b3,oklch(var(--b3)/1)),var(--fallback-b1,oklch(var(--b1=
)/1))); }

.bg-gradient-to-r { background-image: linear-gradient(to right,var(--tw-gra=
dient-stops)); }

.from-blue-700 { --tw-gradient-from: #1d4ed8 var(--tw-gradient-from-positio=
n); --tw-gradient-to: rgba(29,78,216,0) var(--tw-gradient-to-position); --t=
w-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.from-gray-900 { --tw-gradient-from: #111827 var(--tw-gradient-from-positio=
n); --tw-gradient-to: rgba(17,24,39,0) var(--tw-gradient-to-position); --tw=
-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.from-indigo-500\/50 { --tw-gradient-from: rgba(99,102,241,.5) var(--tw-gra=
dient-from-position); --tw-gradient-to: rgba(99,102,241,0) var(--tw-gradien=
t-to-position); --tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradi=
ent-to); }

.from-primary { --tw-gradient-from: var(--fallback-p,oklch(var(--p)/1)) var=
(--tw-gradient-from-position); --tw-gradient-to: var(--fallback-p,oklch(var=
(--p)/0)) var(--tw-gradient-to-position); --tw-gradient-stops: var(--tw-gra=
dient-from),var(--tw-gradient-to); }

.from-rose-100 { --tw-gradient-from: #ffe4e6 var(--tw-gradient-from-positio=
n); --tw-gradient-to: rgba(255,228,230,0) var(--tw-gradient-to-position); -=
-tw-gradient-stops: var(--tw-gradient-from),var(--tw-gradient-to); }

.via-blue-600 { --tw-gradient-to: rgba(37,99,235,0) var(--tw-gradient-to-po=
sition); --tw-gradient-stops: var(--tw-gradient-from),#2563eb var(--tw-grad=
ient-via-position),var(--tw-gradient-to); }

.via-indigo-700 { --tw-gradient-to: rgba(67,56,202,0) var(--tw-gradient-to-=
position); --tw-gradient-stops: var(--tw-gradient-from),#4338ca var(--tw-gr=
adient-via-position),var(--tw-gradient-to); }

.via-pink-200 { --tw-gradient-to: rgba(251,207,232,0) var(--tw-gradient-to-=
position); --tw-gradient-stops: var(--tw-gradient-from),#fbcfe8 var(--tw-gr=
adient-via-position),var(--tw-gradient-to); }

.to-blue-500 { --tw-gradient-to: #3b82f6 var(--tw-gradient-to-position); }

.to-blue-500\/50 { --tw-gradient-to: rgba(59,130,246,.5) var(--tw-gradient-=
to-position); }

.to-blue-600 { --tw-gradient-to: #2563eb var(--tw-gradient-to-position); }

.to-blue-700 { --tw-gradient-to: #1d4ed8 var(--tw-gradient-to-position); }

.to-orange-200 { --tw-gradient-to: #fed7aa var(--tw-gradient-to-position); =
}

.to-purple-700 { --tw-gradient-to: #7e22ce var(--tw-gradient-to-position); =
}

.to-slate-800 { --tw-gradient-to: #1e293b var(--tw-gradient-to-position); }

.bg-\[length\:200\%_100\%\] { background-size: 200% 100%; }

.bg-clip-text { background-clip: text; }

.fill-\[\#00aCee\] { fill: rgb(0, 172, 238); }

.fill-base-content\/40 { fill: var(--fallback-bc,oklch(var(--bc)/.4)); }

.fill-current { fill: currentcolor; }

.fill-gray-50 { fill: rgb(249, 250, 251); }

.fill-neutral-content { fill: var(--fallback-nc,oklch(var(--nc)/1)); }

.fill-primary { fill: var(--fallback-p,oklch(var(--p)/1)); }

.fill-primary-content { fill: var(--fallback-pc,oklch(var(--pc)/1)); }

.object-contain { object-fit: contain; }

.object-cover { object-fit: cover; }

.object-center { object-position: center center; }

.p-1 { padding: 0.25rem; }

.p-1\.5 { padding: 0.375rem; }

.p-10 { padding: 2.5rem; }

.p-2 { padding: 0.5rem; }

.p-2\.5 { padding: 0.625rem; }

.p-3 { padding: 0.75rem; }

.p-4 { padding: 1rem; }

.p-5 { padding: 1.25rem; }

.p-6 { padding: 1.5rem; }

.p-8 { padding: 2rem; }

.px-1 { padding-left: 0.25rem; padding-right: 0.25rem; }

.px-1\.5 { padding-left: 0.375rem; padding-right: 0.375rem; }

.px-10 { padding-left: 2.5rem; padding-right: 2.5rem; }

.px-12 { padding-left: 3rem; padding-right: 3rem; }

.px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }

.px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }

.px-4 { padding-left: 1rem; padding-right: 1rem; }

.px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }

.px-8 { padding-left: 2rem; padding-right: 2rem; }

.py-0 { padding-top: 0px; padding-bottom: 0px; }

.py-0\.5 { padding-top: 0.125rem; padding-bottom: 0.125rem; }

.py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }

.py-1\.5 { padding-top: 0.375rem; padding-bottom: 0.375rem; }

.py-12 { padding-top: 3rem; padding-bottom: 3rem; }

.py-16 { padding-top: 4rem; padding-bottom: 4rem; }

.py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }

.py-2\.5 { padding-top: 0.625rem; padding-bottom: 0.625rem; }

.py-20 { padding-top: 5rem; padding-bottom: 5rem; }

.py-24 { padding-top: 6rem; padding-bottom: 6rem; }

.py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; }

.py-4 { padding-top: 1rem; padding-bottom: 1rem; }

.py-5 { padding-top: 1.25rem; padding-bottom: 1.25rem; }

.py-8 { padding-top: 2rem; padding-bottom: 2rem; }

.pb-2 { padding-bottom: 0.5rem; }

.pb-24 { padding-bottom: 6rem; }

.pb-4 { padding-bottom: 1rem; }

.pb-5 { padding-bottom: 1.25rem; }

.pb-6 { padding-bottom: 1.5rem; }

.pb-8 { padding-bottom: 2rem; }

.pl-0 { padding-left: 0px; }

.pl-0\.5 { padding-left: 0.125rem; }

.pl-4 { padding-left: 1rem; }

.pl-6 { padding-left: 1.5rem; }

.pl-8 { padding-left: 2rem; }

.pt-0 { padding-top: 0px; }

.pt-1 { padding-top: 0.25rem; }

.pt-16 { padding-top: 4rem; }

.pt-2 { padding-top: 0.5rem; }

.pt-4 { padding-top: 1rem; }

.pt-6 { padding-top: 1.5rem; }

.pt-8 { padding-top: 2rem; }

.text-left { text-align: left; }

.text-center { text-align: center; }

.text-right { text-align: right; }

.align-middle { vertical-align: middle; }

.align-bottom { vertical-align: bottom; }

.font-mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Cons=
olas, "Liberation Mono", "Courier New", monospace; }

.text-2xl { font-size: 1.5rem; line-height: 2rem; }

.text-3xl { font-size: 1.875rem; line-height: 2.25rem; }

.text-4xl { font-size: 2.25rem; line-height: 2.5rem; }

.text-5xl { font-size: 3rem; line-height: 1; }

.text-6xl { font-size: 3.75rem; line-height: 1; }

.text-\[11px\] { font-size: 11px; }

.text-base { font-size: 1rem; line-height: 1.5rem; }

.text-lg { font-size: 1.125rem; line-height: 1.75rem; }

.text-sm { font-size: 0.875rem; line-height: 1.25rem; }

.text-xl { font-size: 1.25rem; line-height: 1.75rem; }

.text-xs { font-size: 0.75rem; line-height: 1rem; }

.font-black { font-weight: 900; }

.font-bold { font-weight: 700; }

.font-extrabold { font-weight: 800; }

.font-medium { font-weight: 500; }

.font-normal { font-weight: 400; }

.font-semibold { font-weight: 600; }

.uppercase { text-transform: uppercase; }

.lowercase { text-transform: lowercase; }

.capitalize { text-transform: capitalize; }

.italic { font-style: italic; }

.leading-8 { line-height: 2rem; }

.leading-none { line-height: 1; }

.leading-relaxed { line-height: 1.625; }

.leading-tight { line-height: 1.25; }

.tracking-\[-0\.01em\] { letter-spacing: -0.01em; }

.tracking-tight { letter-spacing: -0.025em; }

.tracking-wide { letter-spacing: 0.025em; }

.tracking-widest { letter-spacing: 0.1em; }

.text-accent { --tw-text-opacity: 1; color: var(--fallback-a,oklch(var(--a)=
/var(--tw-text-opacity))); }

.text-accent-content { --tw-text-opacity: 1; color: var(--fallback-ac,oklch=
(var(--ac)/var(--tw-text-opacity))); }

.text-base-content { --tw-text-opacity: 1; color: var(--fallback-bc,oklch(v=
ar(--bc)/var(--tw-text-opacity))); }

.text-base-content\/30 { color: var(--fallback-bc,oklch(var(--bc)/.3)); }

.text-base-content\/50 { color: var(--fallback-bc,oklch(var(--bc)/.5)); }

.text-base-content\/60 { color: var(--fallback-bc,oklch(var(--bc)/.6)); }

.text-base-content\/70 { color: var(--fallback-bc,oklch(var(--bc)/.7)); }

.text-base-content\/75 { color: var(--fallback-bc,oklch(var(--bc)/.75)); }

.text-base-content\/80 { color: var(--fallback-bc,oklch(var(--bc)/.8)); }

.text-base-content\/90 { color: var(--fallback-bc,oklch(var(--bc)/.9)); }

.text-black { --tw-text-opacity: 1; color: rgb(0 0 0/var(--tw-text-opacity)=
); }

.text-black\/70 { color: rgba(0, 0, 0, 0.7); }

.text-black\/80 { color: rgba(0, 0, 0, 0.8); }

.text-black\/90 { color: rgba(0, 0, 0, 0.9); }

.text-blue-500 { --tw-text-opacity: 1; color: rgb(59 130 246/var(--tw-text-=
opacity)); }

.text-blue-600 { --tw-text-opacity: 1; color: rgb(37 99 235/var(--tw-text-o=
pacity)); }

.text-blue-800 { --tw-text-opacity: 1; color: rgb(30 64 175/var(--tw-text-o=
pacity)); }

.text-blue-900 { --tw-text-opacity: 1; color: rgb(30 58 138/var(--tw-text-o=
pacity)); }

.text-current { color: currentcolor; }

.text-error { --tw-text-opacity: 1; color: var(--fallback-er,oklch(var(--er=
)/var(--tw-text-opacity))); }

.text-gray-300 { --tw-text-opacity: 1; color: rgb(209 213 219/var(--tw-text=
-opacity)); }

.text-gray-400 { --tw-text-opacity: 1; color: rgb(156 163 175/var(--tw-text=
-opacity)); }

.text-gray-50 { --tw-text-opacity: 1; color: rgb(249 250 251/var(--tw-text-=
opacity)); }

.text-gray-500 { --tw-text-opacity: 1; color: rgb(107 114 128/var(--tw-text=
-opacity)); }

.text-gray-500\/50 { color: rgba(107, 114, 128, 0.5); }

.text-gray-600 { --tw-text-opacity: 1; color: rgb(75 85 99/var(--tw-text-op=
acity)); }

.text-gray-700 { --tw-text-opacity: 1; color: rgb(55 65 81/var(--tw-text-op=
acity)); }

.text-gray-800 { --tw-text-opacity: 1; color: rgb(31 41 55/var(--tw-text-op=
acity)); }

.text-gray-900 { --tw-text-opacity: 1; color: rgb(17 24 39/var(--tw-text-op=
acity)); }

.text-green-300 { --tw-text-opacity: 1; color: rgb(134 239 172/var(--tw-tex=
t-opacity)); }

.text-green-400 { --tw-text-opacity: 1; color: rgb(74 222 128/var(--tw-text=
-opacity)); }

.text-green-500 { --tw-text-opacity: 1; color: rgb(34 197 94/var(--tw-text-=
opacity)); }

.text-green-600 { --tw-text-opacity: 1; color: rgb(22 163 74/var(--tw-text-=
opacity)); }

.text-green-800 { --tw-text-opacity: 1; color: rgb(22 101 52/var(--tw-text-=
opacity)); }

.text-neutral { --tw-text-opacity: 1; color: var(--fallback-n,oklch(var(--n=
)/var(--tw-text-opacity))); }

.text-neutral-content { --tw-text-opacity: 1; color: var(--fallback-nc,oklc=
h(var(--nc)/var(--tw-text-opacity))); }

.text-neutral\/80 { color: var(--fallback-n,oklch(var(--n)/.8)); }

.text-primary { --tw-text-opacity: 1; color: var(--fallback-p,oklch(var(--p=
)/var(--tw-text-opacity))); }

.text-primary-content { --tw-text-opacity: 1; color: var(--fallback-pc,oklc=
h(var(--pc)/var(--tw-text-opacity))); }

.text-purple-600 { --tw-text-opacity: 1; color: rgb(147 51 234/var(--tw-tex=
t-opacity)); }

.text-red-300 { --tw-text-opacity: 1; color: rgb(252 165 165/var(--tw-text-=
opacity)); }

.text-red-400 { --tw-text-opacity: 1; color: rgb(248 113 113/var(--tw-text-=
opacity)); }

.text-red-500 { --tw-text-opacity: 1; color: rgb(239 68 68/var(--tw-text-op=
acity)); }

.text-red-600 { --tw-text-opacity: 1; color: rgb(220 38 38/var(--tw-text-op=
acity)); }

.text-red-800 { --tw-text-opacity: 1; color: rgb(153 27 27/var(--tw-text-op=
acity)); }

.text-secondary-content { --tw-text-opacity: 1; color: var(--fallback-sc,ok=
lch(var(--sc)/var(--tw-text-opacity))); }

.text-slate-500 { --tw-text-opacity: 1; color: rgb(100 116 139/var(--tw-tex=
t-opacity)); }

.text-slate-600 { --tw-text-opacity: 1; color: rgb(71 85 105/var(--tw-text-=
opacity)); }

.text-slate-700 { --tw-text-opacity: 1; color: rgb(51 65 85/var(--tw-text-o=
pacity)); }

.text-slate-800 { --tw-text-opacity: 1; color: rgb(30 41 59/var(--tw-text-o=
pacity)); }

.text-transparent { color: transparent; }

.text-warning { --tw-text-opacity: 1; color: var(--fallback-wa,oklch(var(--=
wa)/var(--tw-text-opacity))); }

.text-white { --tw-text-opacity: 1; color: rgb(255 255 255/var(--tw-text-op=
acity)); }

.text-yellow-500 { --tw-text-opacity: 1; color: rgb(234 179 8/var(--tw-text=
-opacity)); }

.underline { text-decoration-line: underline; }

.line-through { text-decoration-line: line-through; }

.decoration-base-300 { text-decoration-color: var(--fallback-b3,oklch(var(-=
-b3)/1)); }

.decoration-dashed { text-decoration-style: dashed; }

.underline-offset-8 { text-underline-offset: 8px; }

.\!opacity-100 { opacity: 1 !important; }

.opacity-0 { opacity: 0; }

.opacity-100 { opacity: 1; }

.opacity-20 { opacity: 0.2; }

.opacity-50 { opacity: 0.5; }

.opacity-70 { opacity: 0.7; }

.opacity-80 { opacity: 0.8; }

.opacity-85 { opacity: 0.85; }

.opacity-90 { opacity: 0.9; }

.shadow { --tw-shadow: 0 1px 3px 0 rgba(0,0,0,.1),0 1px 2px -1px rgba(0,0,0=
,.1); --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),0 1px 2px -1p=
x var(--tw-shadow-color); }

.shadow, .shadow-lg { box-shadow: var(--tw-ring-offset-shadow,0 0 #0000),va=
r(--tw-ring-shadow,0 0 #0000),var(--tw-shadow); }

.shadow-lg { --tw-shadow: 0 10px 15px -3px rgba(0,0,0,.1),0 4px 6px -4px rg=
ba(0,0,0,.1); --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color),=
0 4px 6px -4px var(--tw-shadow-color); }

.shadow-md { --tw-shadow: 0 4px 6px -1px rgba(0,0,0,.1),0 2px 4px -2px rgba=
(0,0,0,.1); --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color),0 2p=
x 4px -2px var(--tw-shadow-color); }

.shadow-md, .shadow-sm { box-shadow: var(--tw-ring-offset-shadow,0 0 #0000)=
,var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow); }

.shadow-sm { --tw-shadow: 0 1px 2px 0 rgba(0,0,0,.05); --tw-shadow-colored:=
 0 1px 2px 0 var(--tw-shadow-color); }

.shadow-xl { --tw-shadow: 0 20px 25px -5px rgba(0,0,0,.1),0 8px 10px -6px r=
gba(0,0,0,.1); --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color)=
,0 8px 10px -6px var(--tw-shadow-color); box-shadow: var(--tw-ring-offset-s=
hadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow); }

.outline-none { outline: transparent solid 2px; outline-offset: 2px; }

.outline { outline-style: solid; }

.ring-1 { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring=
-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring=
-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);=
 }

.ring-1, .ring-2 { box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-s=
hadow),var(--tw-shadow,0 0 #0000); }

.ring-2 { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring=
-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring=
-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);=
 }

.ring-base-content { --tw-ring-opacity: 1; --tw-ring-color: var(--fallback-=
bc,oklch(var(--bc)/var(--tw-ring-opacity))); }

.ring-base-content\/10 { --tw-ring-color: var(--fallback-bc,oklch(var(--bc)=
/0.1)); }

.ring-blue-500 { --tw-ring-opacity: 1; --tw-ring-color: rgb(59 130 246/var(=
--tw-ring-opacity)); }

.ring-opacity-5 { --tw-ring-opacity: 0.05; }

.blur { --tw-blur: blur(8px); }

.blur, .blur-lg { filter: var(--tw-blur) var(--tw-brightness) var(--tw-cont=
rast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-sa=
turate) var(--tw-sepia) var(--tw-drop-shadow); }

.blur-lg { --tw-blur: blur(16px); }

.blur-sm { --tw-blur: blur(4px); }

.blur-sm, .drop-shadow { filter: var(--tw-blur) var(--tw-brightness) var(--=
tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(=
--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow); }

.drop-shadow { --tw-drop-shadow: drop-shadow(0 1px 2px rgba(0,0,0,.1)) drop=
-shadow(0 1px 1px rgba(0,0,0,.06)); }

.drop-shadow-lg { --tw-drop-shadow: drop-shadow(0 10px 8px rgba(0,0,0,.04))=
 drop-shadow(0 4px 3px rgba(0,0,0,.1)); }

.drop-shadow-lg, .filter { filter: var(--tw-blur) var(--tw-brightness) var(=
--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) va=
r(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow); }

.backdrop-blur-sm { --tw-backdrop-blur: blur(4px); backdrop-filter: var(--t=
w-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) =
var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdro=
p-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-b=
ackdrop-sepia); }

.transition { transition-property: color, background-color, border-color, t=
ext-decoration-color, fill, stroke, opacity, box-shadow, transform, filter,=
 backdrop-filter, -webkit-backdrop-filter; transition-timing-function: cubi=
c-bezier(0.4, 0, 0.2, 1); transition-duration: 0.15s; }

.transition-all { transition-property: all; transition-timing-function: cub=
ic-bezier(0.4, 0, 0.2, 1); transition-duration: 0.15s; }

.transition-colors { transition-property: color, background-color, border-c=
olor, text-decoration-color, fill, stroke; transition-timing-function: cubi=
c-bezier(0.4, 0, 0.2, 1); transition-duration: 0.15s; }

.transition-opacity { transition-property: opacity; transition-timing-funct=
ion: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 0.15s; }

.transition-transform { transition-property: transform; transition-timing-f=
unction: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 0.15s; }

.duration-100 { transition-duration: 0.1s; }

.duration-1000 { transition-duration: 1s; }

.duration-150 { transition-duration: 0.15s; }

.duration-200 { transition-duration: 0.2s; }

.duration-300 { transition-duration: 0.3s; }

.duration-500 { transition-duration: 0.5s; }

.duration-75 { transition-duration: 75ms; }

.ease-in { transition-timing-function: cubic-bezier(0.4, 0, 1, 1); }

.ease-in-out { transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.ease-out { transition-timing-function: cubic-bezier(0, 0, 0.2, 1); }

body, html { scroll-behavior: smooth !important; }

@media (max-width: 600px) {
  td, tr { display: block; width: 100%; padding: 5px; }
  thead { display: none; }
  td[data-header-title]::before { content: attr(data-header-title)":"; disp=
lay: block; color: rgb(102, 102, 102); float: left; width: 100px; border-ra=
dius: 5px; }
  tbody { border-collapse: collapse; }
  tbody, tbody tr { display: block; border-radius: 5px; }
  tbody tr { margin-bottom: 20px; }
  tbody tr:nth-of-type(2n+1) { background: transparent; border-radius: 5px;=
 }
  tr td:nth-of-type(2n+1) { background: rgb(238, 238, 238); border-radius: =
5px; }
}

progress::-webkit-progress-value { transition: width 0.6s ease-out; }

@font-face { font-family: dm-mono-regular; font-weight: 400; font-style: no=
rmal; }

.markdown-tables table { font-size: 0.875rem; border-collapse: collapse; }

.markdown-tables td, .markdown-tables th { padding: 0.25rem 0.5rem; white-s=
pace: nowrap; }

.placeholder\:opacity-60::placeholder { opacity: 0.6; }

.hover\:-translate-y-1:hover { --tw-translate-y: -0.25rem; transform: trans=
late(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) =
skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) s=
caleY(var(--tw-scale-y)); }

.hover\:border-b-2:hover { border-bottom-width: 2px; }

.hover\:border-blue-300:hover { --tw-border-opacity: 1; border-color: rgb(1=
47 197 253/var(--tw-border-opacity)); }

.hover\:border-blue-600:hover { --tw-border-opacity: 1; border-color: rgb(3=
7 99 235/var(--tw-border-opacity)); }

.hover\:border-gray-300:hover { --tw-border-opacity: 1; border-color: rgb(2=
09 213 219/var(--tw-border-opacity)); }

.hover\:border-green-400\/50:hover { border-color: rgba(74, 222, 128, 0.5);=
 }

.hover\:border-primary:hover { --tw-border-opacity: 1; border-color: var(--=
fallback-p,oklch(var(--p)/var(--tw-border-opacity))); }

.hover\:border-red-400\/50:hover { border-color: rgba(248, 114, 114, 0.5); =
}

.hover\:bg-base-200:hover { --tw-bg-opacity: 1; background-color: var(--fal=
lback-b2,oklch(var(--b2)/var(--tw-bg-opacity))); }

.hover\:bg-base-300:hover { --tw-bg-opacity: 1; background-color: var(--fal=
lback-b3,oklch(var(--b3)/var(--tw-bg-opacity))); }

.hover\:bg-blue-200:hover { --tw-bg-opacity: 1; background-color: rgb(191 2=
19 254/var(--tw-bg-opacity)); }

.hover\:bg-blue-600\/40:hover { background-color: rgba(37, 99, 235, 0.4); }

.hover\:bg-error\/20:hover { background-color: var(--fallback-er,oklch(var(=
--er)/.2)); }

.hover\:bg-gray-100:hover { --tw-bg-opacity: 1; background-color: rgb(243 2=
44 246/var(--tw-bg-opacity)); }

.hover\:bg-primary:hover { --tw-bg-opacity: 1; background-color: var(--fall=
back-p,oklch(var(--p)/var(--tw-bg-opacity))); }

.hover\:bg-slate-200:hover { --tw-bg-opacity: 1; background-color: rgb(226 =
232 240/var(--tw-bg-opacity)); }

.hover\:bg-slate-700:hover { --tw-bg-opacity: 1; background-color: rgb(51 6=
5 85/var(--tw-bg-opacity)); }

.hover\:text-accent-content:hover { --tw-text-opacity: 1; color: var(--fall=
back-ac,oklch(var(--ac)/var(--tw-text-opacity))); }

.hover\:text-base-content:hover { --tw-text-opacity: 1; color: var(--fallba=
ck-bc,oklch(var(--bc)/var(--tw-text-opacity))); }

.hover\:text-black:hover { --tw-text-opacity: 1; color: rgb(0 0 0/var(--tw-=
text-opacity)); }

.hover\:text-blue-600:hover { --tw-text-opacity: 1; color: rgb(37 99 235/va=
r(--tw-text-opacity)); }

.hover\:text-blue-800:hover { --tw-text-opacity: 1; color: rgb(30 64 175/va=
r(--tw-text-opacity)); }

.hover\:text-error:hover { --tw-text-opacity: 1; color: var(--fallback-er,o=
klch(var(--er)/var(--tw-text-opacity))); }

.hover\:text-green-100:hover { --tw-text-opacity: 1; color: rgb(220 252 231=
/var(--tw-text-opacity)); }

.hover\:text-primary:hover { --tw-text-opacity: 1; color: var(--fallback-p,=
oklch(var(--p)/var(--tw-text-opacity))); }

.hover\:text-purple-600:hover { --tw-text-opacity: 1; color: rgb(147 51 234=
/var(--tw-text-opacity)); }

.hover\:text-red-100:hover { --tw-text-opacity: 1; color: rgb(254 226 226/v=
ar(--tw-text-opacity)); }

.hover\:text-red-600:hover { --tw-text-opacity: 1; color: rgb(220 38 38/var=
(--tw-text-opacity)); }

.hover\:text-secondary:hover { --tw-text-opacity: 1; color: var(--fallback-=
s,oklch(var(--s)/var(--tw-text-opacity))); }

.hover\:text-white\/80:hover { color: rgba(255, 255, 255, 0.8); }

.hover\:underline:hover { text-decoration-line: underline; }

.hover\:opacity-100:hover { opacity: 1; }

.hover\:opacity-90:hover { opacity: 0.9; }

.hover\:shadow-lg:hover { --tw-shadow: 0 10px 15px -3px rgba(0,0,0,.1),0 4p=
x 6px -4px rgba(0,0,0,.1); --tw-shadow-colored: 0 10px 15px -3px var(--tw-s=
hadow-color),0 4px 6px -4px var(--tw-shadow-color); }

.hover\:shadow-lg:hover, .hover\:shadow-md:hover { box-shadow: var(--tw-rin=
g-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)=
; }

.hover\:shadow-md:hover { --tw-shadow: 0 4px 6px -1px rgba(0,0,0,.1),0 2px =
4px -2px rgba(0,0,0,.1); --tw-shadow-colored: 0 4px 6px -1px var(--tw-shado=
w-color),0 2px 4px -2px var(--tw-shadow-color); }

.hover\:shadow-xl:hover { --tw-shadow: 0 20px 25px -5px rgba(0,0,0,.1),0 8p=
x 10px -6px rgba(0,0,0,.1); --tw-shadow-colored: 0 20px 25px -5px var(--tw-=
shadow-color),0 8px 10px -6px var(--tw-shadow-color); box-shadow: var(--tw-=
ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shad=
ow); }

.hover\:shadow-green-500\/20:hover { --tw-shadow-color: rgba(34,197,94,.2);=
 --tw-shadow: var(--tw-shadow-colored); }

.hover\:shadow-red-500\/20:hover { --tw-shadow-color: rgba(239,68,68,.2); -=
-tw-shadow: var(--tw-shadow-colored); }

.focus\:outline-none:focus { outline: transparent solid 2px; outline-offset=
: 2px; }

.focus\:ring-2:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 =
var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: =
var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw=
-ring-color); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow=
),var(--tw-shadow,0 0 #0000); }

.focus\:ring-blue-500:focus { --tw-ring-opacity: 1; --tw-ring-color: rgb(59=
 130 246/var(--tw-ring-opacity)); }

.focus\:ring-offset-2:focus { --tw-ring-offset-width: 2px; }

.active\:outline-none:active { outline: transparent solid 2px; outline-offs=
et: 2px; }

.group:hover .group-hover\:-ml-64 { margin-left: -16rem; }

.group:hover .group-hover\:-mt-36 { margin-top: -9rem; }

.group:hover .group-hover\:hidden { display: none; }

.group:hover .group-hover\:translate-x-0 { --tw-translate-x: 0px; }

.group:hover .group-hover\:translate-x-0, .group:hover .group-hover\:transl=
ate-y-0 { transform: translate(var(--tw-translate-x),var(--tw-translate-y))=
 rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) s=
caleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.group:hover .group-hover\:translate-y-0 { --tw-translate-y: 0px; }

.group:hover .group-hover\:-rotate-3 { --tw-rotate: -3deg; }

.group:hover .group-hover\:-rotate-3, .group:hover .group-hover\:scale-100 =
{ transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(=
var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(va=
r(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.group:hover .group-hover\:scale-100 { --tw-scale-x: 1; --tw-scale-y: 1; }

.group:hover .group-hover\:scale-110 { --tw-scale-x: 1.1; --tw-scale-y: 1.1=
; }

.group:hover .group-hover\:scale-110, .group:hover .group-hover\:scale-75 {=
 transform: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(v=
ar(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var=
(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.group:hover .group-hover\:scale-75 { --tw-scale-x: .75; --tw-scale-y: .75;=
 }

.group:hover .group-hover\:scale-\[1\.05\] { --tw-scale-x: 1.05; --tw-scale=
-y: 1.05; transform: translate(var(--tw-translate-x),var(--tw-translate-y))=
 rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) s=
caleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.group:hover .group-hover\:border-base-content\/10 { border-color: var(--fa=
llback-bc,oklch(var(--bc)/.1)); }

.group:hover .group-hover\:bg-base-100 { --tw-bg-opacity: 1; background-col=
or: var(--fallback-b1,oklch(var(--b1)/var(--tw-bg-opacity))); }

.group:hover .group-hover\:text-base-content\/50 { color: var(--fallback-bc=
,oklch(var(--bc)/.5)); }

.group:hover .group-hover\:text-blue-600 { --tw-text-opacity: 1; color: rgb=
(37 99 235/var(--tw-text-opacity)); }

.group:hover .group-hover\:text-green-300 { --tw-text-opacity: 1; color: rg=
b(134 239 172/var(--tw-text-opacity)); }

.group:hover .group-hover\:text-red-300 { --tw-text-opacity: 1; color: rgb(=
252 165 165/var(--tw-text-opacity)); }

.group:hover .group-hover\:underline { text-decoration-line: underline; }

.group:hover .group-hover\:opacity-0 { opacity: 0; }

.group:hover .group-hover\:opacity-100 { opacity: 1; }

@media not all and (min-width: 768px) {
  .max-md\:flex { display: flex; }
  .max-md\:-scale-x-100 { --tw-scale-x: -1; transform: translate(var(--tw-t=
ranslate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-=
skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-=
scale-y)); }
  .max-md\:px-8 { padding-left: 2rem; padding-right: 2rem; }
  .max-md\:text-sm { font-size: 0.875rem; line-height: 1.25rem; }
}

@media (min-width: 640px) {
  .sm\:ml-1 { margin-left: 0.25rem; }
  .sm\:mr-28 { margin-right: 7rem; }
  .sm\:w-\[26rem\] { width: 26rem; }
  .sm\:max-w-sm { max-width: 24rem; }
  .sm\:-rotate-1 { --tw-rotate: -1deg; transform: translate(var(--tw-transl=
ate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-=
x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale=
-y)); }
  .sm\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0px, 1fr)); }
  .sm\:flex-row { flex-direction: row; }
  .sm\:gap-12 { gap: 3rem; }
  .sm\:gap-8 { gap: 2rem; }
  .sm\:gap-y-8 { row-gap: 2rem; }
  .sm\:py-32 { padding-top: 8rem; padding-bottom: 8rem; }
  .sm\:text-left { text-align: left; }
  .sm\:text-2xl { font-size: 1.5rem; line-height: 2rem; }
  .sm\:text-4xl { font-size: 2.25rem; line-height: 2.5rem; }
  .sm\:text-5xl { font-size: 3rem; line-height: 1; }
  .sm\:text-sm { font-size: 0.875rem; line-height: 1.25rem; }
  .sm\:leading-10 { line-height: 2.5rem; }
  .sm\:ring-1 { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--t=
w-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--t=
w-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-c=
olor); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(-=
-tw-shadow,0 0 #0000); }
  .sm\:ring-neutral\/10 { --tw-ring-color: var(--fallback-n,oklch(var(--n)/=
0.1)); }
}

@media (min-width: 768px) {
  .md\:order-first { order: -9999; }
  .md\:col-span-2 { grid-column: span 2 / span 2; }
  .md\:mx-0 { margin-left: 0px; margin-right: 0px; }
  .md\:mx-6 { margin-left: 1.5rem; margin-right: 1.5rem; }
  .md\:mb-0 { margin-bottom: 0px; }
  .md\:mb-0\.5 { margin-bottom: 0.125rem; }
  .md\:mb-12 { margin-bottom: 3rem; }
  .md\:mb-16 { margin-bottom: 4rem; }
  .md\:mb-24 { margin-bottom: 6rem; }
  .md\:mb-8 { margin-bottom: 2rem; }
  .md\:ml-0 { margin-left: 0px; }
  .md\:ml-8 { margin-left: 2rem; }
  .md\:mr-1 { margin-right: 0.25rem; }
  .md\:mr-1\.5 { margin-right: 0.375rem; }
  .md\:mt-0 { margin-top: 0px; }
  .md\:mt-12 { margin-top: 3rem; }
  .md\:mt-8 { margin-top: 2rem; }
  .md\:block { display: block; }
  .md\:flex { display: flex; }
  .md\:grid { display: grid; }
  .md\:h-12 { height: 3rem; }
  .md\:h-64 { height: 16rem; }
  .md\:w-1\/2 { width: 50%; }
  .md\:w-12 { width: 3rem; }
  .md\:w-24 { width: 6rem; }
  .md\:w-56 { width: 14rem; }
  .md\:w-64 { width: 16rem; }
  .md\:max-w-\[280px\] { max-width: 280px; }
  .md\:-rotate-90 { --tw-rotate: -90deg; }
  .md\:-rotate-90, .md\:-scale-x-100 { transform: translate(var(--tw-transl=
ate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-=
x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale=
-y)); }
  .md\:-scale-x-100 { --tw-scale-x: -1; }
  .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0px, 1fr)); }
  .md\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0px, 1fr)); }
  .md\:flex-row { flex-direction: row; }
  .md\:flex-nowrap { flex-wrap: nowrap; }
  .md\:items-start { align-items: flex-start; }
  .md\:items-center { align-items: center; }
  .md\:justify-start { justify-content: flex-start; }
  .md\:gap-12 { gap: 3rem; }
  .md\:gap-20 { gap: 5rem; }
  .md\:gap-24 { gap: 6rem; }
  .md\:gap-4 { gap: 1rem; }
  .md\:gap-8 { gap: 2rem; }
  .md\:space-y-32 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse:=
 0; margin-top: calc(8rem * calc(1 - var(--tw-space-y-reverse))); margin-bo=
ttom: calc(8rem * var(--tw-space-y-reverse)); }
  .md\:space-y-8 > :not([hidden]) ~ :not([hidden]) { --tw-space-y-reverse: =
0; margin-top: calc(2rem * calc(1 - var(--tw-space-y-reverse))); margin-bot=
tom: calc(2rem * var(--tw-space-y-reverse)); }
  .md\:p-0 { padding: 0px; }
  .md\:p-10 { padding: 2.5rem; }
  .md\:p-8 { padding: 2rem; }
  .md\:px-0 { padding-left: 0px; padding-right: 0px; }
  .md\:px-12 { padding-left: 3rem; padding-right: 3rem; }
  .md\:px-4 { padding-left: 1rem; padding-right: 1rem; }
  .md\:py-24 { padding-top: 6rem; padding-bottom: 6rem; }
  .md\:py-32 { padding-bottom: 8rem; }
  .md\:pt-32, .md\:py-32 { padding-top: 8rem; }
  .md\:pt-8 { padding-top: 2rem; }
  .md\:text-left { text-align: left; }
  .md\:text-4xl { font-size: 2.25rem; line-height: 2.5rem; }
  .md\:text-5xl { font-size: 3rem; line-height: 1; }
  .md\:text-6xl { font-size: 3.75rem; line-height: 1; }
  .md\:text-lg { font-size: 1.125rem; line-height: 1.75rem; }
  .md\:text-xl { font-size: 1.25rem; line-height: 1.75rem; }
  .md\:font-semibold { font-weight: 600; }
  .group:hover .group-hover\:md\:-mt-28 { margin-top: -7rem; }
}

@media (min-width: 1024px) {
  .lg\:order-none { order: 0; }
  .lg\:mb-4 { margin-bottom: 1rem; }
  .lg\:mb-8 { margin-bottom: 2rem; }
  .lg\:ml-12 { margin-left: 3rem; }
  .lg\:ml-8 { margin-left: 2rem; }
  .lg\:mr-0 { margin-right: 0px; }
  .lg\:mt-12 { margin-top: 3rem; }
  .lg\:flex { display: flex; }
  .lg\:hidden { display: none; }
  .lg\:h-\[25rem\] { height: 25rem; }
  .lg\:w-1\/3 { width: 33.3333%; }
  .lg\:w-2\/3 { width: 66.6667%; }
  .lg\:w-3\/4 { width: 75%; }
  .lg\:w-72 { width: 18rem; }
  .lg\:w-\[600px\] { width: 600px; }
  .lg\:max-w-2xl { max-width: 42rem; }
  .lg\:max-w-5xl { max-width: 64rem; }
  .lg\:max-w-\[320px\] { max-width: 320px; }
  .lg\:max-w-none { max-width: none; }
  .lg\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0px, 1fr)); }
  .lg\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0px, 1fr)); }
  .lg\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0px, 1fr)); }
  .lg\:flex-row { flex-direction: row; }
  .lg\:items-start { align-items: flex-start; }
  .lg\:items-center { align-items: center; }
  .lg\:items-stretch { align-items: stretch; }
  .lg\:justify-center { justify-content: center; }
  .lg\:gap-10 { gap: 2.5rem; }
  .lg\:gap-20 { gap: 5rem; }
  .lg\:gap-6 { gap: 1.5rem; }
  .lg\:gap-8 { gap: 2rem; }
  .lg\:border-r { border-right-width: 1px; }
  .lg\:border-gray-200 { --tw-border-opacity: 1; border-color: rgb(229 231 =
235/var(--tw-border-opacity)); }
  .lg\:p-8 { padding: 2rem; }
  .lg\:px-0 { padding-left: 0px; padding-right: 0px; }
  .lg\:px-12 { padding-left: 3rem; padding-right: 3rem; }
  .lg\:px-16 { padding-left: 4rem; padding-right: 4rem; }
  .lg\:px-4 { padding-left: 1rem; padding-right: 1rem; }
  .lg\:px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }
  .lg\:px-8 { padding-left: 2rem; padding-right: 2rem; }
  .lg\:py-32 { padding-top: 8rem; padding-bottom: 8rem; }
  .lg\:py-8 { padding-top: 2rem; padding-bottom: 2rem; }
  .lg\:pr-6 { padding-right: 1.5rem; }
  .lg\:pt-16 { padding-top: 4rem; }
  .lg\:pt-4 { padding-top: 1rem; }
  .lg\:pt-8 { padding-top: 2rem; }
  .lg\:text-left { text-align: left; }
  .lg\:text-2xl { font-size: 1.5rem; line-height: 2rem; }
  .lg\:text-3xl { font-size: 1.875rem; line-height: 2.25rem; }
  .lg\:text-4xl { font-size: 2.25rem; line-height: 2.5rem; }
  .lg\:text-5xl { font-size: 3rem; line-height: 1; }
  .lg\:text-6xl { font-size: 3.75rem; line-height: 1; }
  .lg\:text-8xl { font-size: 6rem; line-height: 1; }
  .lg\:text-base { font-size: 1rem; line-height: 1.5rem; }
  .lg\:text-lg { font-size: 1.125rem; line-height: 1.75rem; }
  .lg\:text-xl { font-size: 1.25rem; line-height: 1.75rem; }
}

@media (min-width: 1280px) {
  .xl\:mr-16 { margin-right: 4rem; }
  .xl\:origin-center { transform-origin: center center; }
  .xl\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0px, 1fr)); }
}

.\[\&\>div\>div\>table\>tbody\>tr\>\*\]\:text-sm > div > div > table > tbod=
y > tr > *, .\[\&\>div\>div\>table\>thead\>\*\]\:text-sm > div > div > tabl=
e > thead > * { font-size: 0.875rem; line-height: 1.25rem; }

.\[\&\>div\]\:rounded-md > div { border-radius: 0.375rem; }
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-41e7adc3-dc79-4e6e-86e2-59930d6194d2@mhtml.blink

@charset "utf-8";

#nprogress { pointer-events: none; }

#nprogress .bar { background: rgb(68, 109, 255); position: fixed; z-index: =
1600; top: 0px; left: 0px; width: 100%; height: 3px; }

#nprogress .peg { display: block; position: absolute; right: 0px; width: 10=
0px; height: 100%; box-shadow: rgb(68, 109, 255) 0px 0px 10px, rgb(68, 109,=
 255) 0px 0px 5px; opacity: 1; transform: rotate(3deg) translate(0px, -4px)=
; }

#nprogress .spinner { display: block; position: fixed; z-index: 1600; top: =
15px; right: 15px; }

#nprogress .spinner-icon { width: 18px; height: 18px; box-sizing: border-bo=
x; border-width: 2px; border-style: solid; border-color: rgb(68, 109, 255) =
transparent transparent rgb(68, 109, 255); border-image: initial; border-ra=
dius: 50%; animation: 400ms linear 0s infinite normal none running nprogres=
s-spinner; }

.nprogress-custom-parent { overflow: hidden; position: relative; }

.nprogress-custom-parent #nprogress .bar, .nprogress-custom-parent #nprogre=
ss .spinner { position: absolute; }

@-webkit-keyframes nprogress-spinner {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@keyframes nprogress-spinner {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-cf17e8b5-8a4f-4df9-9c68-47925a77c824@mhtml.blink

@charset "utf-8";

.styles-module_tooltip__mnnfp { padding: 8px 16px; border-radius: 3px; font=
-size: 90%; width: max-content; }

.styles-module_arrow__K0L3T { width: 8px; height: 8px; }

[class*=3D"react-tooltip__place-top"] > .styles-module_arrow__K0L3T { trans=
form: rotate(45deg); }

[class*=3D"react-tooltip__place-right"] > .styles-module_arrow__K0L3T { tra=
nsform: rotate(135deg); }

[class*=3D"react-tooltip__place-bottom"] > .styles-module_arrow__K0L3T { tr=
ansform: rotate(225deg); }

[class*=3D"react-tooltip__place-left"] > .styles-module_arrow__K0L3T { tran=
sform: rotate(315deg); }

.styles-module_dark__xNqje { background: var(--rt-color-dark); color: var(-=
-rt-color-white); }

.styles-module_light__Z6W-X { background-color: var(--rt-color-white); colo=
r: var(--rt-color-dark); }

.styles-module_success__A2AKt { background-color: var(--rt-color-success); =
color: var(--rt-color-white); }

.styles-module_warning__SCK0X { background-color: var(--rt-color-warning); =
color: var(--rt-color-white); }

.styles-module_error__JvumD { background-color: var(--rt-color-error); colo=
r: var(--rt-color-white); }

.styles-module_info__BWdHW { background-color: var(--rt-color-info); color:=
 var(--rt-color-white); }
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-227001bd-8eb8-4886-bd56-a9981d2fa21b@mhtml.blink

@charset "utf-8";

:root { --rt-color-white: #fff; --rt-color-dark: #222; --rt-color-success: =
#8dc572; --rt-color-error: #be6464; --rt-color-warning: #f0ad4e; --rt-color=
-info: #337ab7; --rt-opacity: 0.9; --rt-transition-show-delay: 0.15s; --rt-=
transition-closing-delay: 0.15s; }

.core-styles-module_tooltip__3vRRp { position: absolute; top: 0px; left: 0p=
x; pointer-events: none; opacity: 0; will-change: opacity; }

.core-styles-module_fixed__pcSol { position: fixed; }

.core-styles-module_arrow__cvMwQ { position: absolute; background: inherit;=
 }

.core-styles-module_noArrow__xock6 { display: none; }

.core-styles-module_clickable__ZuTTB { pointer-events: auto; }

.core-styles-module_show__Nt9eE { opacity: var(--rt-opacity); transition: o=
pacity var(--rt-transition-show-delay)ease-out; }

.core-styles-module_closing__sGnxF { opacity: 0; transition: opacity var(--=
rt-transition-closing-delay)ease-in; }
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-b9cd6c48-7491-4db0-8016-b1df1a84379e@mhtml.blink

@charset "utf-8";

.Typewriter__cursor { animation: 1s ease 0s infinite normal none running Ty=
pewriter-cursor; margin-left: 1px; }

@-webkit-keyframes Typewriter-cursor {=20
  0% { opacity: 0; }
  50% { opacity: 1; }
  100% { opacity: 0; }
}

@keyframes Typewriter-cursor {=20
  0% { opacity: 0; }
  50% { opacity: 1; }
  100% { opacity: 0; }
}
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-4f8a21ee-8dfa-44cc-983f-84dbf1589ac8@mhtml.blink

@charset "utf-8";

.rfm-marquee-container { overflow-x: hidden; display: flex; flex-direction:=
 row; position: relative; width: var(--width); transform: var(--transform);=
 }

.rfm-marquee-container:hover div { animation-play-state: var(--pause-on-hov=
er); }

.rfm-marquee-container:active div { animation-play-state: var(--pause-on-cl=
ick); }

.rfm-overlay { position: absolute; width: 100%; height: 100%; }

.rfm-overlay::before, .rfm-overlay::after { background: linear-gradient(to =
right, var(--gradient-color), rgba(255, 255, 255, 0)); content: ""; height:=
 100%; position: absolute; width: var(--gradient-width); z-index: 2; pointe=
r-events: none; touch-action: none; }

.rfm-overlay::after { right: 0px; top: 0px; transform: rotateZ(180deg); }

.rfm-overlay::before { left: 0px; top: 0px; }

.rfm-marquee { flex: 0 0 auto; min-width: var(--min-width); z-index: 1; dis=
play: flex; flex-direction: row; align-items: center; animation-duration: ;=
 animation-timing-function: ; animation-iteration-count: ; animation-fill-m=
ode: ; animation-name: ; animation-timeline: ; animation-range-start: ; ani=
mation-range-end: ; animation-play-state: var(--play); animation-delay: var=
(--delay); animation-direction: var(--direction); }

@keyframes scroll {=20
  0% { transform: translateX(0%); }
  100% { transform: translateX(-100%); }
}

.rfm-initial-child-container { flex: 0 0 auto; display: flex; min-width: au=
to; flex-direction: row; align-items: center; }

.rfm-child { transform: var(--transform); }
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-4e49106d-bf45-4307-93bd-e278fa2dcf55@mhtml.blink

@charset "utf-8";

@keyframes go2264125279 {=20
  0% { transform: scale(0) rotate(45deg); opacity: 0; }
  100% { transform: scale(1) rotate(45deg); opacity: 1; }
}

@keyframes go3020080000 {=20
  0% { transform: scale(0); opacity: 0; }
  100% { transform: scale(1); opacity: 1; }
}

@keyframes go463499852 {=20
  0% { transform: scale(0) rotate(90deg); opacity: 0; }
  100% { transform: scale(1) rotate(90deg); opacity: 1; }
}

@keyframes go1268368563 {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@keyframes go1310225428 {=20
  0% { transform: scale(0) rotate(45deg); opacity: 0; }
  100% { transform: scale(1) rotate(45deg); opacity: 1; }
}

@keyframes go651618207 {=20
  0% { height: 0px; width: 0px; opacity: 0; }
  40% { height: 0px; width: 6px; opacity: 1; }
  100% { opacity: 1; height: 10px; }
}

@keyframes go901347462 {=20
  0% { transform: scale(0.6); opacity: 0.4; }
  100% { transform: scale(1); opacity: 1; }
}

.go4109123758 { z-index: 9999; }

.go4109123758 > * { pointer-events: auto; }
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/html
Content-ID: <frame-524EF03C9FC757DA4FB1B26C4CCC218C@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://td.doubleclick.net/td/rul/16685153175?random=1753033774771&cv=11&fst=1753033774771&fmt=3&bg=ffffff&guid=ON&async=1&en=gtag.config&gtm=45be57g1v9197072448za200&gcd=13l3l3l3l1l1&dma=0&tag_exp=101509157~103116026~103200004~103233427~104573694~104684208~104684211~104921712~104921714&u_w=1366&u_h=768&url=https%3A%2F%2Fwww.sparkplayground.com%2F&ref=https%3A%2F%2Fwww.google.com%2F&hn=www.googleadservices.com&frm=0&tiba=Spark%20Playground%20-%20Crack%20Your%20PySpark%20%26%20Data%20Engineering%20Interview&npa=0&pscdl=noapi&auid=847911326.1753033775&uaa=x86&uab=64&uafvl=Not)A%253BBrand%3B8.0.0.0%7CChromium%3B138.0.7204.158%7CGoogle%2520Chrome%3B138.0.7204.158&uamb=0&uam=&uap=Windows&uapv=10.0.0&uaw=0&fledge=1&data=event%3Dgtag.config

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body></body></html>
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/html
Content-ID: <frame-C446391D0356BFE521C3EC0069C8CA82@mhtml.blink>
Content-Transfer-Encoding: quoted-printable

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body><iframe height=3D"0" width=3D"0" src=3D"cid:frame-3E=
83E59919FD4B53CB7E133B101B06F5@mhtml.blink" style=3D"display: none; visibil=
ity: hidden;"></iframe></body></html>
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/html
Content-ID: <frame-99EB47DF2ADDCAAD8C80A2A0D44BEBF6@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://googleads.g.doubleclick.net/pagead/html/r20250716/r20190131/zrt_lookup_fy2021.html

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8">
</head><body></body></html>
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/html
Content-ID: <frame-3D6702DFB8862A0A32634D977CF43032@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-3690357492073975&output=html&adk=1812271804&adf=3025194257&abgtt=6&lmt=1753033775&plat=3%3A16%2C4%3A16%2C9%3A32776%2C16%3A8388608%2C17%3A32%2C24%3A32%2C25%3A32%2C30%3A1081344%2C32%3A32%2C41%3A32%2C42%3A32&format=0x0&url=https%3A%2F%2Fwww.sparkplayground.com%2F&pra=5&wgl=1&aihb=0&aiudt=1&asro=0&aifxl=29_18~30_19&aiapm=0.1542&aiapmd=0.1542&aiapmi=0.16&aiapmid=0.16&aiact=0.5423&aiactd=0.5423&aicct=0.7&aicctd=0.5799&ailct=0.5849&ailctd=0.65&aimart=4&aimartd=4&uach=WyJXaW5kb3dzIiwiMTAuMC4wIiwieDg2IiwiIiwiMTM4LjAuNzIwNC4xNTgiLG51bGwsMCxudWxsLCI2NCIsW1siTm90KUE7QnJhbmQiLCI4LjAuMC4wIl0sWyJDaHJvbWl1bSIsIjEzOC4wLjcyMDQuMTU4Il0sWyJHb29nbGUgQ2hyb21lIiwiMTM4LjAuNzIwNC4xNTgiXV0sMF0.&dt=1753033774719&bpp=4&bdt=620&idt=424&shv=r20250716&mjsv=m202507160101&ptt=9&saldr=aa&abxe=1&cookie_enabled=1&eoidce=1&nras=1&correlator=4313618568046&frm=20&pv=2&u_tz=330&u_his=3&u_h=768&u_w=1366&u_ah=707&u_aw=1366&u_cd=24&u_sd=0.9&dmc=8&adx=-12245933&ady=-12245933&biw=1501&bih=688&scr_x=0&scr_y=0&eid=31093430%2C95362655%2C95365881%2C95366018%2C95366350%2C31093503%2C42533294%2C95344789%2C95359266%2C95366367&oid=2&pvsid=8431094752448377&tmod=269427325&uas=0&nvt=1&fsapi=1&ref=https%3A%2F%2Fwww.google.com%2F&fc=1920&brdim=0%2C0%2C0%2C0%2C1366%2C0%2C1366%2C707%2C1517%2C688&vis=1&rsz=%7C%7Cs%7C&abl=NS&fu=32768&bc=31&bz=0.9&td=1&tdf=2&psd=W251bGwsbnVsbCxudWxsLDNd&nt=1&ifi=1&uci=a!1&fsb=1&dtd=466

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body style=3D"background-color:transparent" marginwidth=
=3D"0" marginheight=3D"0">                                                 =
                                                                           =
                                                                           =
                                                                           =
                                                                           =
                                                                           =
                                                                           =
                                         </body></html>
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/html
Content-ID: <frame-D147794B465AD97FD18AEB0FED984598@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.google.com/recaptcha/api2/aframe

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8"></head><body><img src=3D"https://pagead2.googlesyn=
dication.com/pagead/sodar?id=3Dsodar2&amp;v=3D237&amp;li=3Dgda_r20250716&am=
p;jk=3D8431094752448377&amp;rc=3D"></body></html>
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN----
Content-Type: text/html
Content-ID: <frame-3E83E59919FD4B53CB7E133B101B06F5@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.googletagmanager.com/static/service_worker/57f0/sw_iframe.html?origin=https%3A%2F%2Fwww.sparkplayground.com

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3Dwindows-1252">
  <link rel=3D"shortcut icon" href=3D"data:image/x-icon;," type=3D"image/x-=
icon">
</head>
<body>
 =20

</body></html>
------MultipartBoundary--fUyTNIgk5pNFlhcTZyyDuORLDoSlCRf1X8ozU87usN------
